.\" Man page generated from reStructuredText.
.
.TH "INDEX" "8" "Dec 16, 2020" "2.0.1" "OPAE"
.SH NAME
index \- Manual page index
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
The main documentation for the site is organized into following sections:
.INDENT 0.0
.IP \(bu 2
\fI\%OPAE User Guides\fP
.IP \(bu 2
\fI\%OPAE Libraries\fP
.IP \(bu 2
\fI\%OPAE Linux Kernel Drivers\fP
.IP \(bu 2
\fI\%OPAE FPGA Tools\fP
.UNINDENT
.SH QUICK START GUIDE
.SS Overview
.sp
The OPAE C library is a lightweight user\-space library that provides
abstraction for FPGA resources in a compute environment. Built on top of the
OPAE Intel® FPGA driver stack that supports Intel® FPGA platforms, the library
abstracts away hardware specific and OS specific details and exposes the
underlying FPGA resources as a set of features accessible from within
software programs running on the host.
.sp
These features include the acceleration logic preconfigured on the
device, as well as functions to manage and reconfigure the
device. Hence, the library is able to enable user applications to
transparently and seamlessly leverage FPGA\-based acceleration.
.sp
In this document, we will explore the initial steps on how to setup
the required libraries and utilities to use the FPGA devices.
.sp
If you do not have access to an Intel® Xeon® processor with integrated
FPGA, or a programmable FPGA acceleration card for Intel® Xeon®
processors, you will not be able to run the examples below. However, you can
still make use of the AFU simulation environment (ASE) to develop and test
accelerator RTL with OPAE applications.
.sp
For more information about ASE, see the \fI\%OPAE AFU Simulation Environment
(ASE) User Guide\fP\&.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The AFU simulation environment is not available for the Intel PAC N3000.
.UNINDENT
.UNINDENT
.sp
The source for the OPAE SDK Linux device drivers is available at the
\fI\%OPAE Linux DFL drivers repository\fP\&.
.sp
\(ga\(ga
.SS Build the OPAE Linux device drivers from source
.sp
For building the OPAE kernel and kernel driver, the kernel development environment is required. So before you build the kernel, you must install the required packages. Run the following commands:
.sp
We using Federa 32 as an example.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo yum install gcc gcc\-c++ make kernel\-headers kernel\-devel elfutils\-libelf\-devel ncurses\-devel openssl\-devel bison flex
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Download the OPAE upstream kernel tree from github.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone https://github.com/OPAE/linux\-dfl.git \-b fpga\-upstream\-dev\-5.8.0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Configure the kernel.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cd linux\-dfl
$ cp /boot/config\-\(gauname \-r\(ga .config
$ cat configs/n3000_d5005_defconfig >> .config 
$ echo \(aqCONFIG_LOCALVERSION="\-dfl"\(aq >> .config
$ echo \(aqCONFIG_LOCALVERSION_AUTO=y\(aq >> .config
$ make olddefconfig
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Compile and install the new kernel.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ make \-j
$ sudo make modules_install
$ sudo make install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When installed finished, reboot your system.
When the system login again, check the kernel version is correctly or not.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[figo@localhost linux\-dfl]$ uname \-a
Linux localhost.localdomain 5.8.0\-rc1\-dfl\-g73e16386cda0 #6 SMP Wed Aug 19 08:38:32 EDT 2020 x86_64 x86_64 x86_64 GNU/Linux
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Building and installing the OPAE SDK from source
.sp
Download the OPAE SDK source package from the respective \fI\%release page on
GitHub\fP \- click the \fBSource code (tar.gz)\fP link under "Downloads"\&.
.sp
After downloading the source, unpack, configure, and compile it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    tar xfvz opae\-sdk\-<release>.tar.gz
    cd opae\-sdk\-<release>
    mkdir build
    cd build
    cmake ..
    make
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
By default, the OPAE SDK will install into \fB/usr/local\fP if you also issue the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    sudo make install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can change this installation prefix from \fB/usr/local\fP into something else
by adding \fB\-DCMAKE_INSTALL_PREFIX=<new prefix>\fP to the \fBcmake\fP command above.
The remainder of this guide assumes you installed into \fB/usr/local\fP\&.
.SS Configuring the FPGA (loading an FPGA AFU)##
.sp
The \fIfpgaconf\fP tool exercises the AFU reconfiguration
functionality. It shows how to read a bitstream from a disk file,
check its validity and compatability, and then injects it into FPGA to
be configured as a new AFU, which can then be discovered and used by
user applications.
.sp
For this step you require a valid green bitstream (GBS) file. To
reconfigure the FPGA slot, you can issue following command as system
administrator (\fIroot\fP):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo fpgaconf \-b 0x5e <filename>.gbs
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fB\-b\fP parameter to \fIfpgaconf\fP indicates the \fItarget bus number\fP of the
FPGA slot to be reconfigured. Alternatively, you can also specify the
\fItarget socket number\fP of the FPGA using the \fB\-s\fP parameter.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo fpgaconf \-\-help
Usage:
        fpgaconf [\-hvn] [\-b <bus>] [\-d <device>] [\-f <function>] [\-s <socket>] <gbs>

                \-h,\-\-help           Print this help
                \-v,\-\-verbose        Increase verbosity
                \-n,\-\-dry\-run        Don\(aqt actually perform actions
                \-b,\-\-bus            Set target bus number
                \-d,\-\-device         Set target device number
                \-f,\-\-function       Set target function number
                \-s,\-\-socket         Set target socket number
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The sample application on the Building a Sample Application
section requires loading of an AFU called "Native Loopback
Adapter" (NLB) on the FPGA. Please refer to the NLB documentation
for the location of the NLB\(aqs green bitstream. You also can verify
if the NLB green bitstream has already been loaded into the FPGA
slot by typing the following command and checking the output
matches the following:
.sp
$ cat /sys/class/fpga_region/region0/dfl\-port.0/afu_id
.sp
d8424dc4a4a3c413f89e433683f9040b
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The fpgaconf tool is not available for the Intel PAC N3000. The NLB is
alrealy include in AFU.
.UNINDENT
.UNINDENT
.SS Building a sample application
.sp
The library source includes code samples. Use these samples to learn
how to call functions in the library. Build and run these samples as
quick sanity checks to determine if your installation and environment
are set up properly.
.sp
In this guide, we will build \fIhello_fpga.c\fP\&. This is the "Hello
World!" example of using the library.  This code searches for a
predefined and known AFU called "Native Loopback Adapter" on the
FPGA. If found, it acquires ownership and then interacts with the AFU
by sending it a 2MB message and waiting for the message being echoed
back. This code exercises all major components of the API except for
AFU reconfiguration: AFU search, enumeration, access, MMIO, and memory
management.
.sp
You can also find the source for \fBhello\e_fpga\fP in the \fBsamples\fP directory of the
OPAE SDK repository on github.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    int main(int argc, char *argv[])
    {
        fpga_properties    filter = NULL;
        fpga_token         afu_token;
        fpga_handle        afu_handle;
        fpga_guid          guid;
        uint32_t           num_matches;

        volatile uint64_t *dsm_ptr    = NULL;
        volatile uint64_t *status_ptr = NULL;
        volatile uint64_t *input_ptr  = NULL;
        volatile uint64_t *output_ptr = NULL;

        uint64_t        dsm_wsid;
        uint64_t        input_wsid;
        uint64_t        output_wsid;
        fpga_result     res = FPGA_OK;

        if (uuid_parse(NLB0_AFUID, guid) < 0) {
            fprintf(stderr, "Error parsing guid \(aq%s\(aq\en", NLB0_AFUID);
            goto out_exit;
        }

        /* Look for accelerator by its "afu_id" */
        res = fpgaGetProperties(NULL, &filter);
        ON_ERR_GOTO(res, out_exit, "creating properties object");

        res = fpgaPropertiesSetObjectType(filter, FPGA_ACCELERATOR);
        ON_ERR_GOTO(res, out_destroy_prop, "setting object type");

        res = fpgaPropertiesSetGuid(filter, guid);
        ON_ERR_GOTO(res, out_destroy_prop, "setting GUID");

        /* TODO: Add selection via BDF / device ID */

        res = fpgaEnumerate(&filter, 1, &afu_token, 1, &num_matches);
        ON_ERR_GOTO(res, out_destroy_prop, "enumerating accelerators");

        if (num_matches < 1) {
            fprintf(stderr, "accelerator not found.\en");
            res = fpgaDestroyProperties(&filter);
            return FPGA_INVALID_PARAM;
        }

        /* Open accelerator and map MMIO */
        res = fpgaOpen(afu_token, &afu_handle, 0);
        ON_ERR_GOTO(res, out_destroy_tok, "opening accelerator");

        res = fpgaMapMMIO(afu_handle, 0, NULL);
        ON_ERR_GOTO(res, out_close, "mapping MMIO space");

        /* Allocate buffers */
        res = fpgaPrepareBuffer(afu_handle, LPBK1_DSM_SIZE,
                    (void **)&dsm_ptr, &dsm_wsid, 0);
        ON_ERR_GOTO(res, out_close, "allocating DSM buffer");

        res = fpgaPrepareBuffer(afu_handle, LPBK1_BUFFER_ALLOCATION_SIZE,
                   (void **)&input_ptr, &input_wsid, 0);
        ON_ERR_GOTO(res, out_free_dsm, "allocating input buffer");

        res = fpgaPrepareBuffer(afu_handle, LPBK1_BUFFER_ALLOCATION_SIZE,
                   (void **)&output_ptr, &output_wsid, 0);
        ON_ERR_GOTO(res, out_free_input, "allocating output buffer");

        printf("Running Test\en");

        /* Initialize buffers */
        memset((void *)dsm_ptr,    0,    LPBK1_DSM_SIZE);
        memset((void *)input_ptr,  0xAF, LPBK1_BUFFER_SIZE);
        memset((void *)output_ptr, 0xBE, LPBK1_BUFFER_SIZE);

        cache_line *cl_ptr = (cache_line *)input_ptr;
        for (uint32_t i = 0; i < LPBK1_BUFFER_SIZE / CL(1); ++i) {
            cl_ptr[i].uint[15] = i+1; /* set the last uint in every cacheline */
        }

        /* Reset accelerator */
        res = fpgaReset(afu_handle);
        ON_ERR_GOTO(res, out_free_output, "resetting accelerator");

        /* Program DMA addresses */
        uint64_t iova;
        res = fpgaGetIOAddress(afu_handle, dsm_wsid, &iova);
        ON_ERR_GOTO(res, out_free_output, "getting DSM IOVA");

        res = fpgaWriteMMIO64(afu_handle, 0, CSR_AFU_DSM_BASEL, iova);
        ON_ERR_GOTO(res, out_free_output, "writing CSR_AFU_DSM_BASEL");

        res = fpgaWriteMMIO32(afu_handle, 0, CSR_CTL, 0);
        ON_ERR_GOTO(res, out_free_output, "writing CSR_CFG");
        res = fpgaWriteMMIO32(afu_handle, 0, CSR_CTL, 1);
        ON_ERR_GOTO(res, out_free_output, "writing CSR_CFG");

        res = fpgaGetIOAddress(afu_handle, input_wsid, &iova);
        ON_ERR_GOTO(res, out_free_output, "getting input IOVA");
        res = fpgaWriteMMIO64(afu_handle, 0, CSR_SRC_ADDR, CACHELINE_ALIGNED_ADDR(iova));
        ON_ERR_GOTO(res, out_free_output, "writing CSR_SRC_ADDR");

        res = fpgaGetIOAddress(afu_handle, output_wsid, &iova);
        ON_ERR_GOTO(res, out_free_output, "getting output IOVA");
        res = fpgaWriteMMIO64(afu_handle, 0, CSR_DST_ADDR, CACHELINE_ALIGNED_ADDR(iova));
        ON_ERR_GOTO(res, out_free_output, "writing CSR_DST_ADDR");

        res = fpgaWriteMMIO32(afu_handle, 0, CSR_NUM_LINES, LPBK1_BUFFER_SIZE / CL(1));
        ON_ERR_GOTO(res, out_free_output, "writing CSR_NUM_LINES");
        res = fpgaWriteMMIO32(afu_handle, 0, CSR_CFG, 0x42000);
        ON_ERR_GOTO(res, out_free_output, "writing CSR_CFG");

        status_ptr = dsm_ptr + DSM_STATUS_TEST_COMPLETE/8;

        /* Start the test */
        res = fpgaWriteMMIO32(afu_handle, 0, CSR_CTL, 3);
        ON_ERR_GOTO(res, out_free_output, "writing CSR_CFG");

        /* Wait for test completion */
        while (0 == ((*status_ptr) & 0x1)) {
            usleep(100);
        }

        /* Stop the device */
        res = fpgaWriteMMIO32(afu_handle, 0, CSR_CTL, 7);
        ON_ERR_GOTO(res, out_free_output, "writing CSR_CFG");

        /* Check output buffer contents */
        for (uint32_t i = 0; i < LPBK1_BUFFER_SIZE; i++) {
            if (((uint8_t*)output_ptr)[i] != ((uint8_t*)input_ptr)[i]) {
                fprintf(stderr, "Output does NOT match input "
                    "at offset %i!\en", i);
                break;
            }
        }

        printf("Done Running Test\en");

        /* Release buffers */
    out_free_output:
        res = fpgaReleaseBuffer(afu_handle, output_wsid);
        ON_ERR_GOTO(res, out_free_input, "releasing output buffer");
    out_free_input:
        res = fpgaReleaseBuffer(afu_handle, input_wsid);
        ON_ERR_GOTO(res, out_free_dsm, "releasing input buffer");
    out_free_dsm:
        res = fpgaReleaseBuffer(afu_handle, dsm_wsid);
        ON_ERR_GOTO(res, out_unmap, "releasing DSM buffer");

        /* Unmap MMIO space */
    out_unmap:
        res = fpgaUnmapMMIO(afu_handle, 0);
        ON_ERR_GOTO(res, out_close, "unmapping MMIO space");

        /* Release accelerator */
    out_close:
        res = fpgaClose(afu_handle);
        ON_ERR_GOTO(res, out_destroy_tok, "closing accelerator");

        /* Destroy token */
    out_destroy_tok:
        res = fpgaDestroyToken(&afu_token);
        ON_ERR_GOTO(res, out_destroy_prop, "destroying token");

        /* Destroy properties object */
    out_destroy_prop:
        res = fpgaDestroyProperties(&filter);
        ON_ERR_GOTO(res, out_exit, "destroying properties object");

    out_exit:
        return res;

    }
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Linking with the OPAE library is straightforward.  Code using this library
should include the header file \fBfpga.h\fP\&. Taking the GCC compiler on
Linux as an example, the minimalist compile and link line should look
like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ gcc \-std=c99 hello_fpga.c \-I/usr/local/include \-L/usr/local/lib \-lopae\-c \-luuid \-ljson\-c \-lpthread \-o hello_fpga
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Third\-party library dependency: The library internally uses
\fIlibuuid\fP and \fIlibjson\-c\fP\&. But they are not distributed as part of the
library. Make sure you have these libraries properly installed.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B $ sudo ./hello_fpga \-c
Running Test
Running on bus 0x08.
AFU NLB0 found @ 28000
Done Running Test
.UNINDENT
.sp
To run the \fIhello_fpga\fP application; just issue:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo ./hello_fpga

Running Test
Done

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In order to successfully run hello_fpga, the user needs to configure
system hugepage to reserve 2M\-hugepages.
For example, the command below reserves 20 2M\-hugepages:
.sp
$ echo 20 | sudo tee /sys/kernel/mm/hugepages/hugepages\-2048kB/nr_hugepages
.sp
For x86_64 architecture CPU, user can use following command to find out avaiable huge page sizes:
.sp
$ grep pse /proc/cpuinfo | uniq
flags : ... pse ...
.sp
If this commands returns a non\-empty string, 2MB pages are supported:
.sp
$ grep pse /proc/cpuinfo | uniq
flags : ... pdpe1gb ...
.sp
If this commands returns a non\-empty string, 1GB pages are supported:
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The default configuration for many Linux distribution currently sets a relatively low limit for pinned memory allocations per process (RLIMIT_MEMLOCK, often set to a default of 64kiB).
To run an OPAE application which attempts to share more memory than specified by this limit between software and an accelerator, you can either:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Run the application as root, or
.IP \(bu 2
Increase the limit for locked memory via ulimit:
.UNINDENT
.sp
$ ulimit \-l unlimited
.UNINDENT
.UNINDENT
.sp
See the Installation Guide for how to permanently adjust the memlock limit.
.UNINDENT
.UNINDENT
.SH OPAE INSTALLATION GUIDE
.SS System compatibility
.sp
The OPAE SDK has been tested on the following configurations.
.INDENT 0.0
.IP \(bu 2
Hardware: Intel(R) FPGA Programmable Acceleration Cards: Arria(R) 10 GX, N3000.
.IP \(bu 2
Operating System: Tested on Fedora 32, with Linux kernel 5.8.
.IP \(bu 2
Arria&reg 10 GX FPGA FIM version: 1.0.3 (1.0 Production)
.UNINDENT
.SS How to download the OPAE SDK
.sp
OPAE SDK releases are available on \fI\%GitHub\fP\&.
Source code for the OPAE DFL device driver for Linux is also available on \fI\%GitHub\fP\&.
.SS Install the Fedora 32
.sp
Download the Fedora 32 (x86_64 version) installation file in \fI\%fedora\fP, and install the Fedora 32 in yourserver. You can choose Fedora Workstation or Fedora server.
.SS Build the kernel and DFL drivers
.sp
For building the OPAE kernel and kernel driver, the kernel development environment is required. So before you build the kernel, you must install the required packages. Run the following commands:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo yum install gcc gcc\-c++ make kernel\-headers kernel\-devel elfutils\-libelf\-devel ncurses\-devel openssl\-devel bison flex
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Download the OPAE upstream kernel tree from github.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone https://github.com/OPAE/linux\-dfl.git \-b fpga\-upstream\-dev\-5.8.0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Configure the kernel.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cd linux\-dfl
$ cp /boot/config\-\(gauname \-r\(ga .config
$ cat configs/n3000_d5005_defconfig >> .config 
$ echo \(aqCONFIG_LOCALVERSION="\-dfl"\(aq >> .config
$ echo \(aqCONFIG_LOCALVERSION_AUTO=y\(aq >> .config
$ make olddefconfig
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Compile and install the new kernel.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ make \-j
$ sudo make modules_install
$ sudo make install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When installed finished, reboot your system.
When the system login again, check the kernel version is correctly or not.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[figo@localhost linux\-dfl]$ uname \-a
Linux localhost.localdomain 5.8.0\-rc1\-dfl\-g73e16386cda0 #6 SMP Wed Aug 19 08:38:32 EDT 2020 x86_64 x86_64 x86_64 GNU/Linux
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And also you can check the OPAE dfl drivers have auto\-loaded or not.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[figo@localhost linux\-dfl]$ lsmod | grep fpga
ifpga_sec_mgr          20480  1 intel_m10_bmc_secure
fpga_region            20480  3 dfl_fme_region,dfl_fme,dfl
fpga_bridge            24576  4 dfl_fme_region,fpga_region,dfl_fme,dfl_fme_br
fpga_mgr               16384  4 dfl_fme_region,fpga_region,dfl_fme_mgr,dfl_fme
[figo@localhost linux\-dfl]$ lsmod | grep dfl
dfl_eth_group          36864  0
dfl_fme_region         20480  0
dfl_emif               16384  0
dfl_n3000_nios         20480  0
dfl_fme_br             16384  0
dfl_fme_mgr            20480  1
dfl_fme                49152  0
dfl_afu                36864  0
dfl_pci                20480  0
dfl                    40960  7 dfl_pci,dfl_fme,dfl_fme_br,dfl_eth_group,dfl_n3000_nios,dfl_afu,dfl_emif
fpga_region            20480  3 dfl_fme_region,dfl_fme,dfl
fpga_bridge            24576  4 dfl_fme_region,fpga_region,dfl_fme,dfl_fme_br
fpga_mgr               16384  4 dfl_fme_region,fpga_region,dfl_fme_mgr,dfl_fme
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Build the OPAE\-SDK
.sp
Before you build the kernel, you must install the required packages. Run the following commands:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo yum install cmake libuuid libuuid\-devel json\-c python3\-devel python3\-libs json\-c\-devel hwloc\-devel uuid python3\-pip python3\-virtualenv tbb\-devel rpm\-build
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Download the OPAE\-SDK source code from github.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone https://github.com/OPAE/opae\-sdk.git
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Compile and build the OPAE\-SDK.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cd opae\-sdk
$ mkdir build
$ cmake  ..  \-DCPACK_GENERATOR=RPM \-DOPAE_BUILD_LEGACY=ON
$ make \-j
$ make \-j package_rpm
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After compile successful, there are 8 rpm packages generated.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
opae\-2.0.0\-1.x86_64.rpm
opae\-devel\-2.0.0\-1.x86_64.rpm
opae\-libs\-2.0.0\-1.x86_64.rpm
opae\-opae.admin\-2.0.0\-1.x86_64.rpm
opae\-PACSign\-2.0.0\-1.x86_64.rpm
opae\-tests\-2.0.0\-1.x86_64.rpm
opae\-tools\-2.0.0\-1.x86_64.rpm
opae\-tools\-extra\-2.0.0\-1.x86_64.rpm
.ft P
.fi
.UNINDENT
.UNINDENT
.SS OPAE SDK installation with rpm packages
.sp
The rpm packages generated in the previous step can be installed using these commands:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo yum install opae\-libs\-<release>.x86_64.rpm
$ sudo yum install opae\-tools\-<release>.x86_64.rpm
$ sudo yum install opae\-tools\-extra\-<release>.x86_64.rpm
$ sudo yum install opae\-devel\-<release>.x86_64.rpm
$ sudo yum install opae\-<release>.x86_64.rpm
$ sudo yum install opae\-opae.admin\-<release>.x86_64.rpm
$ sudo yum install opae\-PACSign\-<release>.x86_64.rpm
$ sudo yum install opae\-tests\-<release>.x86_64.rpm
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When you installed the rpms, you can use fpgainfo command to check the FPGA FME infomation.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[figo@localhost install_guide]$ fpgainfo fme
Board Management Controller, MAX10 NIOS FW version: D.2.1.24
Board Management Controller, MAX10 Build version: D.2.0.7
//****** FME ******//
Object Id                        : 0xEF00000
PCIe s:b:d.f                     : 0000:08:00.0
Device Id                        : 0x0B30
Socket Id                        : 0x00
Ports Num                        : 01
Bitstream Id                     : 0x2300011001030F
Bitstream Version                : 0.2.3
Pr Interface Id                  : f3c99413\-5081\-4aad\-bced\-07eb84a6d0bb
Boot Page                        : user
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To uninstall the OPAE rpms, you can use this commands
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo yum remove opae\-libs
$ sudo yum remove opae\-tools
$ sudo yum remove opae\-tools\-extra
$ sudo yum remove opae\-devel
$ sudo yum remove opae
$ sudo yum remove opae\-opae.admin
$ sudo yum remove opae\-PACSign
$ sudo yum remove opae\-tests
.ft P
.fi
.UNINDENT
.UNINDENT
.SS FPGA Device Access Permissions
.sp
Access to FPGA accelerators and devices is controlled using file access permissions on the
Intel® FPGA device files, \fB/dev/dfl\-fme.*\fP and \fB/dev/dfl\-port.*\fP, as well as to the files reachable through \fB/sys/class/fpga_region/\fP\&.
.sp
In order to allow regular (non\-root) users to access accelerators, you need to grant them read and write permissions on \fB/dev/dfl\-port.*\fP (with \fB*\fP denoting the respective socket, i.e. 0 or 1). E.g.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo chmod a+rw /dev/dfl\-port.0
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Memlock limit
.sp
Depending on the requirements of your application, you may also want to
increase the maximum amount of memory a user process is allowed to lock. The
exact way to do this depends on your Linux distribution.
.sp
You can check the current memlock limit using
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ulimit \-l
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A way to permanently remove the limit for locked memory for a regular user is
to add the following lines to your /etc/security/limits.conf:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
user1    hard   memlock           unlimited
user1    soft   memlock           unlimited
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This removes the limit on locked memory for user \fBuser1\fP\&. To remove it for
all users, you can replace \fBuser1\fP with \fB*\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
*    hard   memlock           unlimited
*    soft   memlock           unlimited
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that settings in the /etc/security/limits.conf file don\(aqt apply to
services.  To increase the locked memory limit for a service you need to
modify the application\(aqs systemd service file and add the line:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[Service]
LimitMEMLOCK=infinity
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Hugepage Settings
.sp
Users need to configure system hugepages to reserve 2MB\-hugepages or
1GB\-hugepages. For example, the \(aqhello_fpga\(aq sample requires several
2MB\-hugepages. And the \fIfpgadiag\fP tool requires several 1GB\-hugepages.
.sp
The command below reserves 20 2M\-hugepages:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo sh \-c \(aqecho 20 > /sys/kernel/mm/hugepages/hugepages\-2048kB/nr_hugepages\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The command below reserves 4 1GB\-hugepages:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo sh \-c \(aqecho 4 > /sys/kernel/mm/hugepages/hugepages\-1048576kB/nr_hugepages\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For x86_64 architecture processors, user can use following command to find out avaiable hugepage sizes:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ grep pse /proc/cpuinfo | uniq
flags : ... pse ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If this commands returns a non\-empty string, 2MB pages are supported.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ grep pse /proc/cpuinfo | uniq
flags : ... pdpe1gb ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If this commands returns a non\-empty string, 1GB pages are supported.
.SH OPAE C API PROGRAMMING GUIDE
.SS Overview
.sp
The OPAE C library (\fIlibopae\-c\fP) is a lightweight user\-space library that
provides abstractions for FPGA resources in a compute environment. The OPAE C library
builds on the driver stack that supports the FPGA device, abstracting
hardware\- and OS\-specific details. It provides access to the underlying FPGA
resources as a set of features available to software programs
running on the host. These features include the acceleration logic
preconfigured on the FPGA and functions to manage and reconfigure
the FPGA. The library enables your applications to
transparently and seamlessly benefit from FPGA\-based acceleration.
.sp
[image: Layered architecture]
[image]

.sp
By providing a unified C API, the library supports different FPGA
integration and deployment models, ranging from single\-node systems with one or
a few FPGA devices to large\-scale FPGA deployments in a data center.
At one end of the spectrum, the API supports a simple application using a PCIe link to reconfigure
the FPGA with different accelerator functions. At the other end of the spectrum, resource
management and orchestration services in a data center can use this API to
discover and select FPGA resources and then allocate them for use by acceleration workloads.
.SS OPAE Role
.sp
The OPAE provides a common base layer for a wide range of
applications without sacrificing performance or efficiency. The abstraction layer limits
the details of the FPGA hardware that software applications must handle.
.sp
The OPAE provides consistent interfaces to crucial components of the platform. The  OPAE does not constrain
frameworks and applications by making optimizations with limited applicability. When the OPAE does
provide convenience functions or optimizations, they are optional.
.sp
For example, the OPAE provides an interface to allocate physically contiguous
buffers in system memory that user\-space software and an accelerator can share.
This interface enables the most basic feature set of
allocating and sharing a large page of memory in one API call. However, it
does \fInot\fP provide a malloc()\-like interface backed by a memory pool or slab
allocator. Higher layers of the software stack can make such
domain\-specific optimizations.
.SS Intel Accelerator Stack Hardware Terminology
.sp
The following terms define the hardware and hardware processes involved in creating an accelerator function.
.INDENT 0.0
.IP \(bu 2
FPGA: \fI\%Field Programmable Gate Array\fP
is a discrete or integrated device connecting to a host CPU via PCIe or other type of interconnects.
.IP \(bu 2
Accelerator Function Unit (AFU): The AFU is the supplied implementation of an accelerator, typically
in HDL. AFUs implement a function such as compression, encryption, or mathematical operations.
The Quartus Prime Pro software synthesizes the RTL logic into a bitstream.
.IP \(bu 2
Accelerator Function (AF): The AF is the compiled binary for an AFU. An AF is a raw binary file (.rbf)
bitstream. A tool (\fIfpgaconf\fP) reconfigures the FPGA using an AF bitstream.
.IP \(bu 2
Reconfiguration: The process of reprogramming the FPGA with a different AF.
.UNINDENT
.SS OPAE Software Concepts Reflected in the C API
.sp
The following OPAE data structures and functions integrate AFUs into the OPAE environment.
The OPAE C API models these data structures and functions. For more information on the object
models refer to the \fI\%Object model\fP section.
.INDENT 0.0
.IP \(bu 2
Accelerator: An accelerator is an allocable accelerator function implemented in an FPGA.
An accelerator tracks the  \fIownership\fP of an AFU (or part of it) for a process that uses it.
Multiple processes can share an accelerator.
.IP \(bu 2
Device: The OPAE enumerates and models two device types: the FPGA and the AFU.
.IP \(bu 2
Events: Events are asynchronous notifications. The FPGA driver
triggers particular events to indicate error conditions. Accelerator logic can also
define its own events. User applications can choose to be
notified when particular events occur and respond appropriately.
.IP \(bu 2
Shared memory buffers: Software allocates shared memory buffers in user process memory
on the host. Shared memory buffers facilitate data transfers between the user process and the
accelerator that it owns.
.UNINDENT
.SS OPAE Library
.sp
Linking with this library is straightforward.
Code using the  OPAE library should include the header file \fBfpga.h\fP\&. Taking the GCC
compiler on Linux as an example, here is the simplest compile and link command:
.sp
\fBgcc myprog.c \-I</path/to/fpga.h> \-L</path/to/libopae\-c.so> \-lopae\-c \-luuid \-ljson\-c \-lpthread\fP
.sp
\&.. note::
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
The OPAE library uses the third\-party \(galibuuid\(ga and \(galibjson\-c\(ga libraries that are not distributed with 
the OPAE library. Make sure to install these libraries.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Sample Code
.sp
The library source includes two code samples. Use these samples
to learn how to call functions in the library. Build and run these samples
to determine if your installation and environment are set up properly.
.sp
Refer to the \fI\%Running the Hello FPGA Example\fP chapter in the \fIIntel® Acceleration Stack
Quick Start Guide for for Intel Programmable Acceleration Card with Intel Arria® 10 GX FPGA\fP for more information about using the sample code.
.SS High\-Level Directory Structure
.sp
Building and installing the OPAE library results in the following directory structure on the Linux OS.
Windows and MacOS have similar directories and files.
.sp
|Directory & Files |Contents |
|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-|
|include/opae      |Directory containing all header files|
|include/opae/fpga.h |Top\-level header for user code to include|
|include/opae/access.h |Header file for accelerator acquire/release, MMIO, memory management, event handling, and so on |
|include/opae/bitstream.h |Header file for bitstream manipulation functions |
|include/opae/common.h |Header file for error reporting functions |
|include/opae/enum.h |Header file for AFU enumeration functions |
|include/opae/manage.h |Header file for FPGA management functions |
|include/opae/types.h |Various type definitions |
|lib               |Directory containing shared library files |
|lib/libopae\-c.so    |The shared dynamic library for linking with the user application |
|doc               |Directory containing API documentation |
|doc/html          |Directory for documentation of HTML format
|doc/latex         |Directory for documentation of LaTex format
|doc/man           |Directory for documentation of Unix man page format
.SS Basic Application Flow
.sp
The figure below shows the basic application flow from the
viewpoint of a user\-process.
.sp
[image: Basic flow]
[image]

.SS API Components
.sp
The API object model abstracts the physical FPGA device and
available functions. It is a generalized model and extends to
describe any FPGA type.
.SS Object Models
.INDENT 0.0
.IP \(bu 2
\fBfpga_objtype\fP: An enum type that represents the type of an FPGA resource, either \fBFPGA_DEVICE\fP or \fBFPGA_ACCELERATOR\fP\&.
An \fBFPGA_DEVICE\fP object corresponds to a physical FPGA device. Only \fBFPGA_DEVICE\fP objects can invoke management functions.
The \fBFPGA_ACCELERATOR\fP represents an instance of an AFU.
.IP \(bu 2
\fBfpga_token\fP: An opaque type that represents a resource known to, but not
necessarily owned by, the calling process. The calling process must own a
resource before it can invoke functions of the resource.
.IP \(bu 2
\fBfpga_handle\fP: An opaque type that represents a resource owned by the
calling process. The API functions \fBfpgaOpen()\fP and \fBfpgaClose()\fP acquire and release ownership of a resource that an \fBfpga_handle\fP represents. (Refer to the \fI\%Functions\fP section for more information.)
.IP \(bu 2
\fBfpga_properties\fP: An opaque type for a properties object. Your
applications use these properties to query and search for appropriate resources. The
\fI\%FPGA Resource Properties\fP section documents properties visible to your
applications.
.IP \(bu 2
\fBfpga_event_handle\fP: An opaque handle the FPGA driver uses to notify your
application about an event.
.IP \(bu 2
\fBfpga_event_type\fP: An enum type that represents the types of events. The following are valid values:
\fBFPGA_EVENT_INTERRUPT\fP, \fBFPGA_EVENT_ERROR\fP, and \fBFPGA_EVENT_POWER_THERMAL\fP\&. (The Intel Programmable Acceleration Card (PAC) with
Intel Arria 10 GX FPGA does not handle thermal and power events.)
.IP \(bu 2
\fBfpga_result\fP: An enum type to represent the result of an API function. If the
function returns successfully the result is \fBFPGA_OK\fP\&. Otherwise, the result is
the appropriate error codes. Function \fBfpgaErrStr()\fP translates an error code
into human\-readable strings.
.UNINDENT
.SS Functions
.sp
The table below groups important API calls by their functionality. For more information about each of the functions, refer to the
\fI\%OPAE C API reference manual\fP\&.
.sp
|Functionality |API Call |FPGA |Accelerator|Description |
|:\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-:|:\-\-\-\-\-:|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
|Enumeration | \fBfpgaEnumerate()\fP |Yes| Yes| Query FPGA resources that match certain properties |
|Enumeration: Properties | \fBfpga[Get, Update, Clear, Clone, Destroy Properties]()\fP |Yes| Yes| Manage \fBfpga_properties\fP life cycle |
|           | \fBfpgaPropertiesGet[Prop]()\fP | Yes| Yes|Get the specified property \fIProp\fP, from the \fI\%FPGA Resource Properties\fP table |
|           | \fBfpgaPropertiesSet[Prop]()\fP | Yes| Yes|Set the specified property \fIProp\fP, from the \fI\%FPGA Resource Properties\fP table |
|Access: Ownership  | \fBfpga[Open, Close]()\fP | Yes| Yes|Acquire/release ownership |
|Access: Reset      | \fBfpgaReset()\fP |Yes| Yes| Reset an accelerator |
|Access: Event handling | \fBfpga[Register, Unregister]Event()\fP |Yes| Yes| Register/unregister an event to be notified about |
|               | \fBfpga[Create, Destroy]EventHandle()\fP|Yes| Yes| Manage \fBfpga_event_handle\fP life cycle |
|Access: MMIO       | \fBfpgaMapMMIO()\fP, \fBfpgaUnMapMMIO()\fP |Yes| Yes| Map/unmap MMIO space |
|           | \fBfpgaGetMMIOInfo()\fP |Yes| Yes| Get information about the specified MMIO space |
|           | \fBfpgaReadMMIO[32, 64]()\fP | Yes| Yes|Read a 32\-bit or 64\-bit value from MMIO space |
|           | \fBfpgaWriteMMIO[32, 64]()\fP |Yes| Yes| Write a 32\-bit or 64\-bit value to MMIO space |
|Memory management: Shared memory | \fBfpga[Prepare, Release]Buffer()\fP |Yes| Yes| Manage memory buffer shared between the calling process and an accelerator |
|              | \fBfpgaGetIOAddress()\fP | Yes| Yes|Return the device I/O address of a shared memory buffer |
|Management: Reconfiguration | \fBfpgaReconfigureSlot()\fP | Yes | No | Replace an existing AFU with a new one |
|Error report | \fBfpgaErrStr()\fP | Yes| Yes|Map an error code to a human readable string |
.sp
\&.. note::
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
The UMsg APIs are not supported for the Intel(R) PAC cards. They will be deprecated in a future release.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS FPGA Resource Properties
.sp
Applications query resource properties by specifying the property name for \fBProp\fP in the
\fBfpgaPropertiesGet[Prop]()\fP and \fBfpgaPropertiesSet[Prop]()\fP functions. The FPGA and Accelerator
columns state whether or not the Property is available for the FPGA or Accelerator objects.
.sp
|Property |FPGA |Accelerator |Description |
|:\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-:|:\-\-\-\-:|:\-\-\-\-\-|
|Parent |No |Yes |\fBfpga_token\fP of the parent object |
|ObjectType |Yes |Yes |The type of the resource: either \fBFPGA_DEVICE\fP or \fBFPGA_ACCELERATOR\fP |
|Bus |Yes |Yes |The bus number |
|Device |Yes |Yes |The PCI device number |
|Function |Yes |Yes |The PCI function number |
|SocketId |Yes |Yes |The socket ID |
|DeviceId |Yes |Yes |The device ID |
|NumSlots |Yes |No |Number of AFU slots available on an \fBFPGA_DEVICE\fP resource |
|BBSID |Yes |No |The FPGA Interface Manager (FIM) ID of an \fBFPGA_DEVICE\fP resource |
|BBSVersion |Yes |No |The FIM version of an \fBFPGA_DEVICE\fP resource |
|VendorId |Yes |No |The vendor ID of an \fBFPGA_DEVICE\fP resource |
|GUID |Yes |Yes |The GUID of an \fBFPGA_DEVICE\fP or \fBFPGA_ACCELERATOR\fP resource |
|NumMMIO |No |Yes |The number of MMIO space of an \fBFPGA_ACCELERATOR\fP resource |
|NumInterrupts |No |Yes |The number of interrupts of an \fBFPGA_ACCELERATOR\fP resource |
|AcceleratorState |No |Yes |The state of an \fBFPGA_ACCELERATOR\fP resource: either \fBFPGA_ACCELERATOR_ASSIGNED\fP or \fBFPGA_ACCELERATOR_UNASSIGNED\fP|
.SS OPAE C API Return Codes
.sp
The OPAE C library returns a code for every exported public API function.  \fBFPGA_OK\fP indicates successful completion
of the requested operation. Any return code other than \fBFPGA_OK\fP indicates an error or unexpected
behavior. When using the OPAE C API, always check the API return codes.
.sp
|Error Code|Description|
|\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-|
|\fBFPGA_OK\fP|Operation completed successfully|
|\fBFPGA_INVALID_PARAM\fP|Invalid parameter supplied|
|\fBFPGA_BUSY\fP|Resource is busy|
|\fBFPGA_EXCEPTION\fP|An exception occurred|
|\fBFPGA_NOT_FOUND\fP|A required resource was not found|
|\fBFPGA_NO_MEMORY\fP|Not enough memory to complete operation|
|\fBFPGA_NOT_SUPPORTED\fP|Requested operation is not supported|
|\fBFPGA_NO_DRIVER\fP|Driver is not loaded|
|\fBFPGA_NO_DAEMON\fP|FPGA Daemon (\fBfpgad\fP) is not running|
|\fBFPGA_NO_ACCESS\fP|Insufficient privileges or permissions|
|\fBFPGA_RECONF_ERROR\fP|Error while reconfiguring FPGA|
.SS Usage Models
.SS Query and Search for a Resource
.sp
The user\-code first populates an \fBfpga_properties\fP object with the required properties.
Then, \fBfpgaEnumerate()\fP searches for matching resources. \fBfpgaEnumerate()\fP may return more
than one matching resource.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include "fpga/fpga.h"

fpga_guid               guid;
fpga_properties         filter = NULL;
fpga_result             res;
fpga_token              tokens[MAX_NUM_TOKENS];
uint32_t                num_matches = 0;

/* Start with an empty properties object */
res = fpgaGetProperties(NULL, &filter);

/* Populate the properties object with required values.
   In this case, search for accelerators that matches 
   the specified GUID.
*/
uuid_parse(GUID, guid);
res = fpgaPropertiesSetObjectType(filter, FPGA_ACCELERATOR);
res = fpgaPropertiesSetGuid(filter, guid);

/* Query the number of matching resources */
res = fpgaEnumerate(&filter, 1, NULL, 1, &num_matches);

/* Return tokens for all matching resources */
res = fpgaEnumerate(&filter, 1, tokens, num_matches, &num_matches);

/* Destroy the properties object */
res = fpgaDestroyProperties(&filter);

/* More code */
\&......

/* Destroy tokens */
for (uint32_t i = 0; i < num_matches; ++i) {
    res = fpgaDestroyToken(tokens[i]);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBfpgaEnumerate()\fP function can take multiple \fBfpga_properties\fPobjects in an array. In such cases,
the function performs a logical OR of  the properties object and returns resources that match any of
the multiple properties. The  \fBfpga_token\fP objects that \fBfpgaEnumerate()\fP returns, do not signify
ownership. To acquire ownership of a resource represented by a token, pass the token to \fBfpgaOpen()\fP\&.
.SS Acquire and Release a Resource
.sp
Use \fBfpgaOpen()\fP and \fBfpgaClose()\fP to acquire and release ownership of a resource.
The calling process must own the resource before it can initiate MMIO, access share memory buffers,
and use functions offered by the resource.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    #include "fpga/fpga.h"

    fpga_handle             handle;
    fpga_result             res;

    /* Acquire ownership of a resource that 
    \(gafpgaEnumerate()\(ga previously returned as a token */
     
    res = fpgaOpen(token, &handle);

    /* More code */
    ......

    /* Release the ownership */
    res = fpgaClose(handle);
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Shared Memory Buffer
.sp
This code snippet shows how to prepare a memory buffer to be shared between the
calling process and an accelerator.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    #include "fpga/fpga.h"

    fpga_handle             handle;
    fpga_result             res;

    /* Hint for the virtual address of the buffer */
    volatile uint64_t       *addr_hint;
    /* An ID we can use to reference the buffer later */
    uint32_t                bufid;
    /* Flag to indicate whether or not the buffer is preallocated */
    int                     flag = 0;

    /* Allocate (if necessary), pin, and map a buffer to be accessible
       by an accelerator
    */
    res = fpgaPrepareBuffer(handle, BUF_SIZE, (void **) &addr_hint,
                            &bufid, flag);

    /* The actual address mapped to the buffer */
    uint64_t                iova;
    /* Get the IO virtual address for the buffer */
    res = fpgaGetIOAddress(handle, bufid, &iova);

    /* Inform the accelerator about the virtual address by writing to its mapped
       register file
    */
    ......

    /* More code */
    ......

    /* Release the shared buffer */
    res = fpgaReleaseBuffer(handle, bufid);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\&.. note::
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
The \(gaflag\(ga variable can take a constant \(gaFPGA_BUF_PREALLOCATED\(ga to
indicate that the calling process has already allocated the address space
that \(gaaddr_hint\(ga points to.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS MMIO
.sp
This code snippet shows how to map and unmap the register file of an accelerator into the
calling process\(aqs virtual memory space.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    #include "fpga/fpga.h"

    fpga_handle             handle;
    fpga_result             res;

    /* Index of the MMIO space. There might be multiple spaces on an accelerator */
    uint32_t                mmio_num = 0;
    /* Mapped address */
    uint64_t                mmio_addr;

    /* Map MMIO */
    res = fpgaMapMMIO(handle, mmio_num, &mmio_addr);

    /* Write to a 32\-bit value to the mapped register file at a certain byte
       offset.

       CSR_CTL is the offset in the mapped space to where the value will be
       written. It\(aqs defined elsewhere.
    */
    res = fpgaWriteMMIO32(handle, mmio_num, CSR_CTL, value);

    /* More code */
    ......

    /* Unmap MMIO */
    res = fpgaUnmapMMIO(handle, mmio_num);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\&.. Note::
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Every AFU has its own register adress space and its own protocol to control operation through 
the registers. 
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INTEL® ACCELERATOR FUNCTIONAL UNIT (AFU) SIMULATION ENVIRONMENT (ASE) USER GUIDE
.SS Intended Audience
.sp
The \fIAccelerator Functional Unit (AFU) Accelerator Simulation Environment (ASE) User Guide\fP addresses both beginning and experienced developers. To be successful, you should have knowledge and experience
in the following areas:
.INDENT 0.0
.IP \(bu 2
C/C++
.IP \(bu 2
Verilog/SystemVerilog
.IP \(bu 2
RTL simulators such as Synopsys VCS\-MX* or Mentor Graphics ModelSim\-SE* or QuestaSim*
.UNINDENT
.sp
Alternatively, you can create a team that includes developers who specialize in either RTL or software development.
Previous FPGA place and route (PAR) experience is not required to be successful, but PAR experience is also a useful skill.
.SS Introduction
.sp
The ASE provides a consistent transaction\-level hardware interface and software API
that allows you to develop a production\-quality Accelerated Functional Unit (AFU) and host software application.
The ASE supports both the Intel Xeon® Processor with Integrated FPGA and the Intel Acceleration Stack for Intel
Xeon CPU with FPGAs also called the Intel Programmable Acceleration Card (PAC). The figures in this user guide illustrate
the Intel PAC with Arria® 10 GX FPGA. The figures show a local memory that is only available on the PAC.
.sp
To use the ASE Environment you must have source code in a language that RTL simulators can interpret. The following languages are possible:
.INDENT 0.0
.IP \(bu 2
Verilog
.IP \(bu 2
SystemVerilog
.IP \(bu 2
VHDL
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The ASE supports one AFU and one application at a time. The ASE does not support multiple\-slot simulation.
.UNINDENT
.UNINDENT
.sp
[image: Supported Platforms]
[image]

.SS AFU Simulation Environment (ASE) Overview
.sp
ASE is a dual\-process simulator. One process runs an AFU RTL simulation. The other process connects to software that
runs on the RTL AFU simulation. This unified simulation environment reduces AFU hardware and software development time.
The OPAE software distribution includes the ASE.
.sp
[image: Block Diagram]
[image]

.sp
The ASE provides two interfaces:
.INDENT 0.0
.IP \(bu 2
Software: OPAE API implemented in the C programming language.
.IP \(bu 2
Hardware: Core Cache Interface (CCI\-P) specification implemented in SystemVerilog.
.UNINDENT
.sp
Use these interfaces to deploy your IP on the Integrated FPGA Platform or the Intel PAC with Arria 10 GX FPGA.
.SS ASE Capabilities
.INDENT 0.0
.IP \(bu 2
The ASE provides a protocol checker to ensure protocol correctness. The ASE also provides methods to identify potential issues early,
before in\-system deployment.
.IP \(bu 2
The ASE can help identify certain lock conditions and Configuration and Status Registers (CSR) address mapping and pointer
math errors.
.IP \(bu 2
The ASE tracks memory requested from the accelerator. The memory model immediately
flags illegal memory transactions to locations outside of requested memory spaces. Consequently, you can fix incorrect memory
accesses early, during the simulation phase.
.IP \(bu 2
The ASE does not guarantee that you can synthesize an AFU. After you verify the AFU RTL functionality in the ASE,
use the ASE and the Intel Quartus® Prime Pro Edition software iteratively to generate the Accelerator Function (AF).
.IP \(bu 2
The ASE provides a data hazard checker that identifies CCI\-P traffic patterns that may cause Write After Write (WAW),
Read After Write (RAW), and Write After Read (WAR) hazards. Debug these transactions using a waveform viewer
or avoid them by using a relevant \fI\%Memory Properties Factory\fP
(MPF) shim.
.IP \(bu 2
The ASE does not require administrator privileges. After installing all the required tools, you can run the ASE on a plain
vanilla user Linux machine.
.UNINDENT
.SS ASE Limitations
.sp
When using ASE in the application development cycle, consider the following limitations:
.INDENT 0.0
.IP \(bu 2
The ASE is a transaction\-level simulator. It does not model either Intel UPI\- or PCIe\-specific packet structures and protocol layers.
.IP \(bu 2
The ASE does not simulate caching and is not a cache simulator. It cannot reliably simulate cache collisions or
capacity issues.
.IP \(bu 2
Although ASE models some latency parameters, it cannot model real\-time system\-specific latency. It is also not
an accurate timing simulation of the design or latency and bandwidth of the real system. The ASE models enable
you to develop functionally correct accelerators.
.IP \(bu 2
The ASE does not simulate multi\-AFU or multi\-socket configurations.
.UNINDENT
.SS ASE\-Based AFU Design Workflow
.sp
[image: ASE-based AFU Design Workflow]
[image]

.sp
AFU development using the ASE includes the following four stages:
.INDENT 0.0
.IP \(bu 2
Learning/Training: Learn to use ASE and understand the interface specifications and platform. Review sample code to get an
understanding of the CCI\-P specification and OPAE API function calls. Run samples in an ASE simulation.
.IP \(bu 2
Development Phase: Use the ASE to develop AFU RTL and software application in a single workflow. Develop RTL from the specification
or by modifying existing sample RTL. The ASE includes a behavioral model of the FPGA Interface Manager (FIM) IP that
provides immediate feedback on functionality during the development phase. The ASE flags errors in CCI\-P protocols,
transactions, and memory accesses. Consequently, you can fix these errors before moving to the time\-consuming bitstream
generation phase.
.IP \(bu 2
Bitstream Generation: Once AFU RTL and software are functionally correct, open the AFU RTL in the Intel Quartus Prime Pro
Edition software. Run the place and route (PAR) tools for your platform.
.UNINDENT
.sp
Use the Synthesis reports to correct problems in the AFU RTL. Then, return to the development phase and revalidate in ASE.
Bitstream generation can take hours depending on design complexity, area, and so on. After successful bitstream generation,
perform timing analysis to check for timing corners, setup and hold violations, clock closure, and so on. After correcting
failures found during timing analysis, revalidate in the ASE environment. When the AFU is error\-free, generate the Accelerator
Function (AF) bitstream that represents the AFU.
.INDENT 0.0
.IP \(bu 2
In\-system Deployment: Test the AF in system hardware. Use Signal Tap to debug problems. Develop platform\-specific software
optimizations.
.UNINDENT
.sp
[image: Synthesize the AFU Design]
[image]

.sp
The AFU RTL code and OPAE software code you create in the ASE is compatible with the Intel Quartus Prime PAR software if the following two conditions are true:
.INDENT 0.0
.IP \(bu 2
The AFU RTL code is synthesizable.
.IP \(bu 2
The AFU RTL code meets timing.
.UNINDENT
.sp
In the simulation environment, complete the following steps to create an AF bitstream and program the hardware:
.INDENT 0.0
.IP \(bu 2
Compile the AFU RTL in either the Synopsys VCS\-MX or in the Mentor Graphics ModelSim\-SE
or QuestaSim simulators.
.IP \(bu 2
Compile the software application for an ASE\-specific implementation of the OPAE API.
.IP \(bu 2
Synthesize the AFU RTL in the Intel Quartus Prime Pro software to generate a bitstream.
.IP \(bu 2
Program the hardware using this bitstream.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The ASE only operates using the AFU RTL source code. It cannot take the AF bitstream as input.
.UNINDENT
.UNINDENT
.SS System Requirements
.sp
The OPAE software release includes the ASE. The current OPAE ASE release supports both Acceleration Stack for the Intel Xeon Processor
with Integrated FPGA and Acceleration Stack for the Intel PAC card.
.sp
The ASE is available only on 64\-bit Linux operating systems with one of the following simulators:
.INDENT 0.0
.IP \(bu 2
64\-bit Synopsys* RTL Simulator (minimum version VCS\-MX H2013.06\-SP1)
.IP \(bu 2
32 and 64\-bit Mentor Graphics* Modelsim SE Simulator (minimum version 10.5a)
.IP \(bu 2
64\-bit Mentor Graphics* QuestaSim Simulator (minimum version 10.4d)
.UNINDENT
.sp
ASE performance is better on a 64\-bit RTL simulator.
Consult your RTL simulator vendor for Synopsys or Mentor Graphics for specific simulation requirements.
.sp
The ASE uses Inter\-Process Communication (IPC) constructs. Under most circumstances these constructs operate without glitches.
The following Linux locations should exist and be writeable. In most Linux distributions, \fB/dev/shm\fP comes pre\-mounted as a
default option.
.sp
Here are the other ASE requirements:
.INDENT 0.0
.IP \(bu 2
C\-Compiler: gcc 4.8.5 or above
.INDENT 2.0
.IP \(bu 2
Boost Development libraries
.IP \(bu 2
UUID Development libraries
.IP \(bu 2
JSON Development libraries
.IP \(bu 2
Please see the dependencies of the OPAE System library build process
.UNINDENT
.IP \(bu 2
CMake: version 2.8.11 or above
.IP \(bu 2
GLIBC: version 2.19 or above
.IP \(bu 2
Python: version 2.7 or above
.IP \(bu 2
Intel Quartus Prime Pro Edition: The ASE must find the \fB$QUARTUS_HOME/eda/sim_lib/\fP directory. You specify this directory
during project definition in the Intel Quartus Prime Pro Edition software.
.UNINDENT
.sp
The ASE provides the \fBenv_check.sh\fP bash script in the \fB/sw/opae\-x.x.x/ase/scripts\fP directory. Run this script to
verify the your installation.
.sp
Check the RTL simulator product information for supported operating systems, installation notes, and other related information.
The RTL simulator must be able to perform the following functions:
.INDENT 0.0
.IP \(bu 2
Compilation of the SystemVerilog Direct Programming Interface (DPI) constructs
.IP \(bu 2
Compilation of the standard examples that are included in the installation
.IP \(bu 2
Support for SystemC
.UNINDENT
.SS Package Description
.sp
Download the ASE as source or in RPM format.
.sp
The source directory tree is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    OPAE_BASEDIR
        |\-\- ase
        |   |\-\- api
        |   |   \-\- src
        |   |\-\- in
        |   |\-\- rtl
        |   |   \-\- dcp_emif_model
        |   |\-\- scripts
        |   |\-\- sw
        |
        |\-\- cmake
        |\-\- common
        |   |\-\- include
        |   |   |\-\- opae
        |   |   |\-\-safe_string
        |
        |\-\- doc
        |\-\- libopae
        |\-\- libopaecxx
        |\-\- platforms
        |\-\- pyopae
        |\-\- safe_string
        |\-\- samples
        |\-\- scripts
        |\-\- tools

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This directory tree shows the package structure of the ASE distribution. The following directories implement and run the ASE simulator:
.INDENT 0.0
.IP \(bu 2
\fBase\fP: This is the ASE simulator implementation directory. It contains the following subdirectories:
.INDENT 2.0
.IP \(bu 2
\fBapi/src\fP: This directory contains the OPAE Intel ASE implementation as a compiled library. You can link statically
or dynamically to this library.
.IP \(bu 2
\fBrtl\fP: This directory contains the RTL components of the ASE. You can compile this RTL for either platform.
.INDENT 2.0
.IP \(bu 2
\fBdcp_emif_model\fP: This is the local DDR memory model for PAC card. Compile this model for PAC
mode simulations.
.UNINDENT
.IP \(bu 2
\fBscripts\fP: This directory contains several useful scripts. Refer to the \fI\%ASE Scripts\fP
Section for more information.
.IP \(bu 2
\fB sw\fP: This directory contains the software components of the ASE. All simulations require the software components.
The GNU Compiler Collection (GCC) compiles these components.
.UNINDENT
.IP \(bu 2
\fBcommon\fP: This directory contains the OPAE library definitions. It defines various macros for access to an FPGA in
an OPAE context.
.IP \(bu 2
\fBlibopae\fP: This library is the Intel platform\-specific implementation of the OPAE API.
.IP \(bu 2
\fBplatforms\fP: This directory contains scripts and RTL to manage the connection between a platform and the AFU top\-level interface.
.IP \(bu 2
\fBscripts\fP: This directory contains test build scripts.
.IP \(bu 2
\fBtools\fP: This directory contains the FPGA tools including the fpgadiag and fpgaconfig tools.
.UNINDENT
.SS ASE Scripts
.sp
The ASE distribution under the \fBase/scripts\fP includes several scripts. Use these scripts to initialize, set up,
and clean an existing ASE simulation environment.
.SS Simulation Tool Set Up
.sp
Use \fBase/scripts/ase_setup_template.sh\fP as a template script to set up the required tools. This script has many empty
placeholders for site\- and environment\-specific information. Consult your Electronic Design Automation (EDA) tools  administrator,
or the RTL simulator user guides for help setting up the tools.
.SS ASE Environment Check
.sp
This script checks the status of the OS distribution, distro, and available system libraries. This check is a non\-exhaustive.
It looks for only the most important dependencies, such as the GCC version, GLIBC version, and so on.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    $ ./ase/scripts/env_check.sh

.ft P
.fi
.UNINDENT
.UNINDENT
.SS AFU Simulation Using the ASE
.sp
Before configuring the ASE, follow the instructions for building the OPAE SDK and ensure that either the OPAE
installed \fBbin\fP or the OPAE build tree \fBbin\fP directory is on your shell\(aqs \fBPATH\fP\&.
.sp
To simulate an AFU, replicate the ASE source tree and add the AFU\-specific configuration. The OPAE installation includes
several scripts to accomplish this task. The primary script, \fBafu_sim_setup\fP, is in the OPAE \fBbin\fP
directory.
.sp
Refer to the \fI\%ASE Example\fP section below for a sample workload definition and execution flow.
.SS afu_sim_setup
.sp
The \fBafu_sim_setup\fP script reads a file containing a list of RTL sources (<rtl_sources.txt>) and configures a simulation
environment for the specified sources. The \fBafu_sim_setup\fP command copies your base ASE environment to the <target dir>\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    $ afu_sim_setup \-\-sources=<rtl_sources.txt> <target dir>

.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
The only required argument to the \fBafu_sim_setup\fP command is the directory for the new AFU environment. Here are the
optional arguments:
.IP \(bu 2
\fB\-\-help\fP The \fBhelp\fP argument lists all the arguments to \fBafu_sim_setup\fP\&.
.IP \(bu 2
\fB\-\-platform\fP: The \fBplatform\fPargument specifies any platform defined in the platform database, including both
the Integrated FPGA Platform or the Intel PAC. This argument is generally not required when a hardware platform
release is installed. In that case, the OPAE_PLATFORM_ROOT environment variable points to the hardware release,
which defines the platform.
.UNINDENT
.sp
\fBafu_sim_setup\fP is a wrapper for the following scripts. You can also access both of these scripts directly:
.INDENT 0.0
.IP \(bu 2
\fBrtl_src_config\fP: This script transforms the list of RTL sources into simulator configuration files.
.IP \(bu 2
\fBgenerate_ase_environment.py\fP: This script instantiates your simulated platform configuration.
.UNINDENT
.SS rtl_src_config
.sp
The \fB/platforms/scripts/rtl_src_config\fP script maps a simple text file containing a list of RTL source files to an
ASE configuration file for simulation or an Intel Quartus Prime Pro configuration file for synthesis. \fBrtl_src_config\fP also
defines preprocessor variables. Source configuration files may be hierarchical, with one file including another. \fBrtl_src_config\fP
can construct ASE\-based simulation trees or Quartus build trees.
.sp
Run \fBrtl_src_config \-\-help\fP for a list of options and the required command syntax.
.SS generate_ase_environment.py
.sp
The \fB/ase/scripts/generate_ase_environment.py\fP generates platform configuration files. \fBafu_sim_setup\fP invokes it
automatically. A legacy mode in \fBgenerate_ase_environment.py\fP performs a brute\-force check of the specified AFU RTL
directories, attempting to define a compilation. This brute\-force mode is
imperfect and lists every file ending in \fB\&.sv, .vs, .vhd, or .v\fP and directories separated by \fB+\fP\&. It also may fail
when compilation is order\-dependent.
.sp
Run \fBgenerate_ase_environment.py \-\-help\fP for a list of arguments.
.INDENT 0.0
.IP \(bu 2
The script requires a directory path to your RTL AFU.
.IP \(bu 2
\fB\-t\fP: The default for the optional \fB\-t\fP (tool) argument is \fBVCS\fP\&. For Mentor tools, use the \fBQUESTA\fP option.
.IP \(bu 2
\fB\-p\fP: The default for the optional \fB\-p\fP (platform) argument is \fBintg_xeon\fP which stands for the Integrated FPGA
Platform. Use \fBdiscrete\fP for the Intel PAC.
.IP \(bu 2
\fB\-x\fP: The optional exclusions argument lists exclusions for path searches.
.UNINDENT
.sp
The Synopsys and Mentor Graphics RTL simulators generate the following scripts.
.INDENT 0.0
.IP \(bu 2
Synopsys: Creates \fBsynopsys_sim.setup\fP and \fBvcs_run.tcl\fP in the \fBVCS\fP configuration directory.
.IP \(bu 2
Mentor Graphics: Creates \fBvsim_run.tcl\fP in the \fBQUESTA\fP configuration directory.
.UNINDENT
.sp
The run\-time simultation uses the \fB\&.tcl\fP files.
.sp
Details on generated files:
.INDENT 0.0
.IP \(bu 2
\fBvlog_files.list\fP: Lists all the Verilog and SystemVerilog files found in the AFU directory path.
.IP \(bu 2
\fBvhdl_files.list\fP: Lists all the VHDL files found in the AFU directory path.
.IP \(bu 2
\fBase_sources.mk\fP: Ties the above two files into \fBDUT_VLOG_SRC_LIST\fP and \fBDUT_VHD_SRC_LIST\fP Makefile variables.
.INDENT 2.0
.IP \(bu 2
\fBASE_PLATFORM\fP: Sets the platform type to the default type or the type you specify.
.IP \(bu 2
Set additional VCS or QUESTA options using the \fBSNPS_{VLOGAN,VHDLAN,VCS}_OPT\fP or \fBMENT_{VLOG,VCOM,VSIM}_OPT\fP options
in the Makefile. Refer to \fI\%ASE Makefile Variables\fP for more information.
.UNINDENT
.UNINDENT
.sp
The simulation files use absolute paths when possible. To improve portability across users and groups, substitute  environment
variables in the generated files that build and run the simulator.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
You must manually check this file for correctness before using it in the simulation.
.UNINDENT
.UNINDENT
.SS Cleaning the ASE Environment
.sp
Use the ASE cleanup script located in \fBscripts/ipc_clean.py\fP to kill zombie simulation processes and temporary files left
behind by failed simulation processes or crashes.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    $ ./ase/scripts/ipc_clean.py

    ############################################################
    #                                                          #
    #                ASE IPC Cleanup script                    #
    #                                                          #
    ############################################################
    IPC mounts seem to be readable... will attempt cleaning up IPC constructs by user \(aq user_foo \(aq
    Removing .ase_ready file ...
    Type \(aqy\(aq to clean up all zombie ase_simv processes : y
    Going ahead with cleaning up ASE processes opened by  user_foo
    $


.ft P
.fi
.UNINDENT
.UNINDENT
.SS ASE Usage
.sp
The AFU ASE is a server\-client simulation environment. The AFU RTL is the server process. The software application
compiled and linked to the  OPAE ASE library is the client process. Communication between server and client uses named pipes.
The ASE abstracts most of the simulation infrastructure. You do not need to modify it.
.sp
[image: ASE Server-Client Process Flow]
[image]

.INDENT 0.0
.IP \(bu 2
\fBServer Process\fP:
.INDENT 2.0
.IP \(bu 2
The server process interfaces to 3rd\-Party RTL Simulator packages. The server process currently supports Mentor
Modelsim\-SE*  Questasim* and Synopsys CS\-MX* via the SystemVerilog\-DPI library and simulator software interface.
.IP \(bu 2
Named pipes implement communication to the client.  Named pipes also implement control, status and session management.
The server process includes a pipe event monitoring engine.
.IP \(bu 2
SystemVerilog manages the CCI\-P interface. All CCI\-P events are logged and time stamped.
.IP \(bu 2
The server also includes a CCI\-P protocol checker that checks CCI\-P transactions originating in the AFU. This checker
identifies CCI\-P protocol issues, hazards, race conditions, and so on.
.IP \(bu 2
The buffer allocation calls map to POSIX Shared Memory (\fB/dev/shm\fP). The server\-client processes share information
about these buffers using named pipes.
.UNINDENT
.UNINDENT
.sp
\&.. note::
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
The Physical addresses generated in ASE are not realistic and are not replicable in\-system.
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fBClient Process\fP:
.INDENT 2.0
.IP \(bu 2
The client implements an OPAE interface and a library to access the ASE platform functionality including MMIO,
Buffer management, and session control. The features available depend on the platform you specify at build time.
These functions are available using the OPAE API.
.IP \(bu 2
The client process also provides a physical memory model that simulates the RTL AFU access to physical
addresses. The physical memory model simulates address translation from virtual addresses to physical addresses.
.IP \(bu 2
A compiled program compiles and links to the ASE implementation of OPAE library. All OPAE calls route to ASE
instead of the OPAE platform driver.
.UNINDENT
.UNINDENT
.sp
Separate build scripts build the server and client processes.
.INDENT 0.0
.IP \(bu 2
Server: A makefile in the \fBase\fP directory compiles the ASE server process, containing the ASE Software, SystemVerilog
engines and the AFU RTL logic code.
.IP \(bu 2
Client: The main \fBcmake\fP script in the root of the distribution builds the OPAE library implementations for the System
and ASE.  The cmake script installs the library in the  \fBlib\fP directory.
.UNINDENT
.SS AFU Build Instructions
.SS ASE Application (Client) Build Instructions
.sp
Follow these instructions if you are building the OPAE SDK from a source tar file. Otherwise go directly to the Application build step.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In these instructions, the directory \fB/tmp/opae/\fP is the base directory where you install the OPAE API software
distribution. The \fB/tmp\fP prefix may point to any system or user directory.
.sp
The ASE Source directory points to \fB/tmp/opae/ase/\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
To build the OPAE libraries:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    # Change directory to the opae directory
    $ cd /tmp/opae/

    # Check contents
    $ ls
    ase cmake common doc libopae platforms safe_string samples scripts tools AUTHORS CMakeLists.txt COPYING
    README RELEASE_NOTES

    # Create an out\-of\-build directory, and change to it
    $ mkdir mybuild
    $ cd mybuild

    # Configure the software build using cmake (see options)
    # $ cmake <Path to CMakeLists.txt>
    # Install directory, in this example it is <Path  to opae>/myinst/

    $ cmake ../ \-DOPAE_BUILD_SIM=YES \-DCMAKE_INSTALL_PREFIX=/tmp/opae/myinst/
    \-\- The C compiler identification is GNU 4.8.4
    \-\- The CXX compiler identification is GNU 4.8.4
    \-\- Check for working C compiler: /usr/bin/cc
    \-\- Check for working C compiler: /usr/bin/cc \-\- works
    .
    .
    .
    \-\- Configuring done
    \-\- Generating done
    \-\- Build files have been written to: /tmp/opae/mybuild

    # Build and install libraries
    $ make
    $ make install

    # The environment Variable PATH should point to /myinst/bin
    # Check library install paths
    $ cd /tmp/opae/myinst/
    $ ls
    doc  include  lib

    $ ls lib
    libopae\-c\-ase.so  libopae\-c.so  libopae\-c.so.0  libopae\-c.so.0.1.0 ...

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Build the software application for the ASE using \fBlibopae\-c\-ase.so\fP and the \fBgcc\fP command.
You can build the software application using one of the following three methods:
.SS Dynamically Linking libopae\-c\-ase.so
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    # Change directory to <Path to Directory>/opae/samples/
    #   The UUID code requires the \-luuid argument
    #   Linking to the  ASE library requires the  \-lopae\-c\-ase argument
    #
    $ gcc \-g \-o hello_fpga hello_fpga.c \-L /tmp/opae/myinst/lib/ \-I /tmp/opae/myinst/include/ \-luuid \-lpthread \-lopae\-c\-ase \-std=c99

    # When running the application be sure the relevant LD_LIBRARY_PATH variable is set
    $ ./hello_fpga

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Dynamically Linking to the System Library and then Overriding It
.sp
The ASE implementation of the OPAE library simulates system behavior. Consequently, the application may also link dynamically
to the System library, \fBlibopae\-c.so\fP and \fBlibopae\-c\-ase.so\fP, and then override the system library with the
\fBLD_PRELOAD\fP environment.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    # Change directory to <Path to Directory>/opae/samples/
    #   The UUID code requires the \-luuid argument
    #   Linking to the  ASE library requires the  \-lopae\-c\-ase argument
    #
    $ gcc \-g \-o hello_fpga hello_fpga.c \-L /tmp/opae/myinst/lib/ \-I /tmp/opae/myinst/include/ \-luuid \-lpthread \-lopae\-c \-std=c99

    # When running the application be sure the relevant LD_LIBRARY_PATH variable is set
    # You must also set the ASE_WORKDIR environment variable
    $ LD_PRELOAD=libopae\-c\-ase.so ./hello_fpga

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Compiling the libopae\-c\-ase.so Library with the OPAE Software Application
.sp
Use the OPAE ASE library implementation and compile it to the OPAE software application directly in one command using GCC.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    # Compile command
    $ gcc \-g \-o hello_fpga_ase hello_fpga.c /tmp/opae/myinst/lib/libopae\-c\-ase.so \-I /tmp/opae/myinst/include/ \-std=c99 \-luuid

	# When running the application, start the simulator, then set LD_LIBRARY_PATH and ASE_WORKDIR
	$ ./hello_fpga_ase

.ft P
.fi
.UNINDENT
.UNINDENT
.SS ASE Simulator (Server) Build Instructions
.sp
ASE uses a platform differentiation key in the simulator Makefile to enable different platform features and produces a
simulator configuration based on the differentiation key. These keys are set automatically by \fBafu_sim_setup\fP and
\fBgenerate_ase_environment.py\fP\&.
.sp
You must note the following required build configurations:
.sp
| Configuration | Description | Default |
|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-|
| \fBASE_PLATFORM\fP | This is the platform differentiator. It must be set in \fBase_sources.mk\fP to point to the required simulator features. \fBFPGA_PLATFORM_INTG_XEON\fP and \fBFPGA_PLATFORM_DISCRETE\fP are the only legal values. | \fBFPGA_PLATFORM_INTG_XEON\fP |
| \fBSIMULATOR\fP | This must be set in \fBase_sources.mk\fP to point to the correct RTL simulator. \fBVCS\fP and \fBQUESTA\fP are the only legal values. | \fBVCS\fP |
|\fBDUT_VLOG_SRC_LIST\fP, \fBDUT_VHDL_SRC_LIST\fP, and \fBDUT_INCDIR\fP | These options point to AFU Verilog, VHDL and include path settings required for RTL simulators to build the simulation model correctly. | None supplied — You must specify this. |
.sp
For more information on other switches, refer to \fI\%ASE Makefile targets\fP
.sp
Use the \fBscripts/generate_ase_environment.py\fP script to generate the AFU\-specific files for the simulator build.
This script is not infallible and
requires manual inspection of generated configurations to achieve correct results.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Edit \fIase_sources.mk\fP to add AFU RTL\-specific define macros or include paths.
.UNINDENT
.UNINDENT
.sp
You may use the \fI\%Generate ASE Environment\fP script to generate the required AFU \fBase_sources.mk\fP and \fBvlog_files.list\fP files.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    # change to ASE directory
    $ cd /tmp/opae/ase/

    # Use the scripts/generate_ase_environment.py
    $ ./scripts/generate_ase_environment.py \-t VCS \-p discrete <Path to sample RTL>
    .
    .
    .
    # Edit files as needed.

    $ ls
    ase_sources.mk  vcs_run.tcl  synopsys_sim.setup  vlog_files.list  ...

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You may need to check  \fBvlog_files.list\fP and \fBase_sources.mk\fP files for correctness. Now, build the simulator
with a \(aqmake\(aq command.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    $ cd <opae>/ase/
    $ make
    .
    .

    $ ls work/ase_simv
    work/ase_simv

.ft P
.fi
.UNINDENT
.UNINDENT
.SS ASE Runtime Instructions
.sp
The ASE server\-client simulator makes the server before the client. Here are the run\-time options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    $ make sim \e
        [SIMULATOR=<VCS|QUESTA>] \e
        [ASE_CONFIG=<Path to ase.cfg>] \e
        [ASE_SCRIPT=<Path to ase_regress.sh if ASE_MODE=4>]

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Use two terminal windows to start the simulation.
.INDENT 0.0
.IP \(bu 2
Terminal 1: Runs \fBmake sim\fP\&. The ASE initializes and the AFU issues a reset and then waits for incoming transactions.
The software application must wait until the "Ready for Simulation" message displays.
.UNINDENT
.sp
Specify the environment variable \fBASE_WORKDIR\fP Terminal 1.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    # Invoke the simulator
    $ make sim
    SIMULATOR=VCS
    CC=gcc
    #################################################################
    #                                                               #
    #             OPAE Intel(R) Xeon(R) + FPGA Library              #
    #               AFU Simulation Environment (ASE)                #
    #                                                               #
    #################################################################
    ASE platform set to MCP_SKYLAKE mode
    .
    .
    .
    SIM\-SV: Transaction Logger started
    SIM\-SV: Simulator started...
    SIM\-C : +CONFIG /tmp/opae/ase/ase.cfg file found !
    SIM\-C : +SCRIPT /tmp/opae/ase/ase_regress.sh file found !
    SIM\-C : PID of simulator is 41819
    SIM\-C : Reading /tmp/opae/ase/ase.cfg configuration file
    SIM\-C : ASE was started in Mode 1 (Server\-Client without SIMKILL)
            ASE mode                   ... Server\-Client mode without SIMKILL
            Inactivity kill\-switch     ... DISABLED
            Reuse simulation seed      ... ENABLED
            ASE Seed                   ... 1234
            ASE Transaction view       ... ENABLED
            User Clock Frequency       ... 312.500000 MHz, T_uclk = 3200 ps
            Amount of physical memory  ... 128 GB

    .
    .
    .
    SIM\-C : ** ATTENTION : BEFORE running the software application **
        Set env(ASE_WORKDIR) in the terminal where application will run (copy\-and\-paste) =>
        $SHELL   | Run:
        \-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
        bash/zsh | export ASE_WORKDIR=/tmp/opae/ase/work
        tcsh/csh | setenv ASE_WORKDIR /tmp/opae/ase/work
        For any other $SHELL, consult your Linux administrator

        SIM\-C : Ready for simulation...
        SIM\-C : Press CTRL\-C to close simulator...


.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can close Terminal 1 \fBmake sim\fPby issuing a \fBSIGTERM\fP to the relevant \fBase_simv\fP process or by typing  \fBCTRL\-C\fP\&.
.INDENT 0.0
.IP \(bu 2
Terminal: First set the environment variable \fBASE_WORKDIR\fP as specified in Terminal 1. In this example \fBASE_WORKDIR\fP
is set to \fB/tmp/opae/ase/work\fP\&.  Then, start the software application.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    # Set ASE_WORKDIR environment variable
    $ export ASE_WORKDIR=/tmp/opae/ase/work/

    # Run the application
    $ export LD_LIBRARY_PATH=/tmp/opae/myinst/lib/
    $ LD_PRELOAD=libopae\-c\-ase.so ./hello_fpga

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
After the application exits, the simulation is complete. Close the simulator to allow the waveform dump
process to complete. In Terminal 1, type the \fBCTRL\-C\fP command.
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C



    <Simulator running>
    .
    .
    .
    SIM\-C : Ready to run next test
    818602500C0Tx AlmFull toggled from 1 to 0

    818602500C1Tx AlmFull toggled from 1 to 0

    <CTRL\-C Key hit>

    ^CSIM\-C : Closing message queue and unlinking...
    SIM\-C : Unlinking Shared memory regions....
    SIM\-C : Session code file removed
    SIM\-C : Removing message queues and buffer handles ...
    SIM\-C : Cleaning session files...
    SIM\-C : Simulation generated log files
        Transactions file       | $ASE_WORKDIR/ccip_transactions.tsv
        Workspaces info         | $ASE_WORKDIR/workspace_info.log
        ASE seed                | $ASE_WORKDIR/ase_seed.txt

    SIM\-C : Tests run     => 1
    SIM\-C : Sending kill command...
    SIM\-SV: Simulation kill command received...

    Transaction count |       VA      VL0      VH0      VH1 |    MCL\-1    MCL\-2    MCL\-4
    ========================================================================================
    MMIOWrReq           9 |
    MMIORdReq           2 |
    MMIORdRsp           2 |
    UMsgHint            0 |
    UMsgData            0 |
    RdReq           16384 |        0        0    16384        0 |    16384        0        0
    RdResp          16384 |        0        0    16384        0 |
    WrReq           16385 |        0        0    16385        0 |    16385        0        0
    WrResp          16385 |        0        0    16385        0 |    16385        0        0
    WrFence             1 |        0        0        1        0 |
    WrFenRsp            1 |        0        0        1        0 |

    $finish called from file "/tmp/opae/ase/rtl/ccip_emulator.sv", line 2657.
    $finish at simulation time           1514962500
    V C S   S i m u l a t i o n   R e p o r t
    Time: 1514962500 ps
    CPU Time:    142.500 seconds;       Data structure size:   1.1Mb
    Tue Jun 20 13:29:13 2017

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Upon completion, the simulation generates the following files:
.INDENT 0.0
.IP \(bu 2
Waveform dump: \fBmake wave\fP opens the waveform for the selected tool.
.INDENT 2.0
.IP \(bu 2
\fBinter.vpd\fP: VCS Waveform file
.IP \(bu 2
\fBvsim.wlf\fP: Mentor/Questa waveform file.
.UNINDENT
.IP \(bu 2
\fB$ASE_WORKDIR/ccip_transactions.tsv\fP: CCI\-P Events log listing all events observed on the CCI\-P interface. The timestamps
indicate the corresponding time interval in the waveform dump VPD file.
.IP \(bu 2
\fB$ASE_WORKDIR/workspace_info.log\fP: Information about buffers the simulation opened.
.IP \(bu 2
\fB$ASE_WORKDIR/ase_seed.txt\fP: Information about the simulation seed.
.IP \(bu 2
\fB$ASE_WORKDIR/ccip_warnings_and_errors.txt\fP: Information about CCI\-P warnings and errors.
.UNINDENT
.SS Recommendations
.INDENT 0.0
.IP \(bu 2
The ASE \fBccip_logger.sv\fP module logs CCI\-P events for designs that use the CCI\-P protocol. This module allows
you to compare transactions and traffic flow through the CCI\-P interfaces.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Use a different file name for each instantiation of the of the \fBccip_logger\fP\&.
.UNINDENT
.UNINDENT
.sp
[image: ASE CCI-P Logger Reuse]
[image]

.INDENT 0.0
.IP \(bu 2
The ASE shutdowns simulations gracefully,  closing all mutexes, locks, POSIX structures safely before exiting via the
\fB$finish\fP statement in SystemVerilog. If your AFU design uses \fB$error\fP or \fB$finish\fP to identify error conditions
while simulating, consider using the handle \fBstart_simkill_countdown()\fP instead. \fBstart_simkill_countdown()\fP calls
\fB$finish\fP after completing the steps for a graceful shutdown.
.IP \(bu 2
You can script ASE simulations. When the simulator is ready for use, the simulation writes a lock file,
\fB$ASE_WORKDIR/.ase_ready\fP, to the work directory.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    # Start Simulator in background
    make sim &

    # Wait for simulator readiness
    # When .ase_ready is available in the $ASE_WORKDIR, the ASE is ready for simulation
    while [ ! \-f $ASE_WORKDIR/.ase_ready.pid ]
    do
        sleep 1
    done

    # Start application
    cd $PATH_TO_APPLICATION

    # Export ASE_WORKDIR variable
    export ASE_WORKDIR={Path to simulator mentioned in ASE green printout}
    ./Application

.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
To reduce simulation time, make the following changes to the default simulation settings:
.INDENT 2.0
.IP \(bu 2
Turn OFF wave dumps: Check your RTL vendor\(aqs recommendation on switching off wave form dumps. In some cases, is possible
to generate wave dumps for specific module hierarchies.
.IP \(bu 2
Turn OFF display messages by setting  \fBENABLE_CL_VIEW = 0\fP in  \fBase.cfg\fP\&.
.UNINDENT
.IP \(bu 2
To generate random CCI\-P transactions for every run, modify the ASE latency model, \fB$ASE_SRCDIR/rtl/platform.vh\fP\&.
The \fB*_LATRANGE\fP constraint defines a min/max pair:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    \(gadefine X_LATRANGE     min, max

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBmin\fP and \fBmax\fP values are the minimum and maximum cycle counts for responses returning to the AFU. Simulation
assigns transactions a random latency in the (min, max) range. The larger the difference between (min, max), the larger the
standard deviation of latency for a given type of transaction. You can specify different (min, max) values for different
transaction types.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The latency values specified for simulation are for testing only. They may not accurately represent the real
latencies of your system hardware.
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    /*
     * Latency model
     * Coded as a Min,Max tuple
     * \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
     * RDLINE_LATRANGE : ReadLine turnaround time
     * WRLINE_LATRANGE : WriteLine turnaround time
     * UMSG_LATRANGE   : UMsg latency
     * INTR_LATRANGE   : Interrupt turnaround time
     *
     * LAT_UNDEFINED   : Undefined latency
     *
     */
    \(gadefine MMIO_LATENCY                15
    \(gadefine RDLINE_S_LATRANGE          20,118
    \(gadefine RDLINE_I_LATRANGE          20,118
    \(gadefine WRLINE_M_LATRANGE          20,118
    \(gadefine WRLINE_I_LATRANGE          20,118
    \(gadefine UMSG_START2HINT_LATRANGE   39,41
    \(gadefine UMSG_HINT2DATA_LATRANGE    41,45
    \(gadefine UMSG_START2DATA_LATRANGE   82,85
    \(gadefine INTR_LATRANGE              10,15

    \(gadefine LAT_UNDEFINED              300

    \(gadefine RDWR_VL_LATRANGE           20,118
    \(gadefine RDWR_VH_LATRANGE           140,180

    \(gadefine ASE_MAX_LATENCY            300

.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
The ASE includes a CCI\-P protocol checker, \fB$ASE_SRCDIR/rtl/ccip_checker.sv\fP\&. Use this module to verify CCI\-P compliance.
The checker sniffs transactions, conditions and header settings and flags warnings or errors. Identify multiple issue
classes in the \fBhw/ccip_sniffer.sv\fP\&. The ASE logs all warnings and errors in \fB$ASE_WORKDIR/ccip_warnings_and_errors.txt\fP\&.
.UNINDENT
.sp
[image: ASE Error Example]
[image]

.INDENT 0.0
.IP \(bu 2
Memory errors in transactions: Memory errors have the highest severity. The simulation stops immediately. The ASE logs
memory errors, including timestamps, in  \fB$ASE_WORKDIR/ase_memory_error.log\fP\&.
.IP \(bu 2
Protocol warnings: Warnings do not stop the simulation. The ASE logs warnings in \fB$ASE_WORKDIR/ccip_warning_and_errors.txt\fP\&.
.IP \(bu 2
The ASE may also log memory hazards (RAW, WAR and WAW hazards).
.UNINDENT
.SS ASE Example
.sp
A tutorial for CCI\-P systems is available in a separate \fI\%Basic Building Blocks repository\fP
in the \fI\%samples/tutorial\fP tree. The first example,
\fI\%01_hello_world\fP follows the
\fBafu_sim_setup\fP flow described above. Start with the tutorial\(aqs
\fI\%README\fP file for configuration and execution
instructions. The example defines a set of sources and walks through the process of creating an ASE tree, running the
simulator and connecting it to a host program.
.SS Operation Reference
.SS ASE Simulator Makefile Switches
.sp
The ASE Makefile template comprises many targets and switches. Build your own compilation script for more complex simulations.
.sp
For a complete listing including the versions supported, see \fI\%System Requirements\fP section.
.SS ASE Makefile Build Flow
.sp
Complete the following steps to compile ASE Simulator:
.INDENT 0.0
.IP \(bu 2
Compile Software objects of ASE into a library file
*First compile the Software components located in the \fBase/sw/\fP directory into a software library.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Define \fBSIM_SIDE\fP as a compilation macro when compiling the ASE simulator objects. The \fBSIM_SIDE\fP
switch is for simulation software, not the OPAE ASE software library.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Compile The ASE SystemVerilog files located in the \fBase/rtl/\fP directory.
Compile ASE RTL the platform components for the Integrated FPGA Platform or the Intel PAC into the
simulation databases. For the PAC, compile the embedded memory interface (EMIF) Memory controller
model into the ASE environment. If the simulation requires the Intel FPGA Gate libraries, compile
the models into the ASE environment.
.IP \(bu 2
Compile AFU components into the ASE environment.
Use the RTL simulator software tools to compile the AFU components. Use Synopsys or Mentor utilities to compile
VHDL or SystemVerilog components.
.UNINDENT
.SS ASE Makefile Targets
.sp
| Target             | Description |
|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-|
| \fBall\fP          | Default build target, builds a simulator in Synopsys VCS\-MX |
| \fBheader\fP       | Print version and preamble |
| \fBcheck\fP        | Environment check |
| \fBsw_build\fP     | Build \fBase/sw/\fP components into a software library. The \fBSIM_SIDE\fP switch builds the simulator software components |
| \fBhelp\fP         | Print help information |
| \fBvcs_build\fP    | Synopsys VCS\-MX template build flow |
| \fBquesta_build\fP | Mentor Graphics Modelsim\-SE/QuestaSim template build flow |
| \fBsim\fP          | Start the ASE Simulator |
| \fBwave\fP         | Open selected RTL waveform viewer |
| \fBclean\fP        | Clean build, simulation, and log files |
| \fBdistclean\fP    | Clean distribution \- removes the AFU configuration files |
.SS ASE Makefile Variables
.sp
| Makefile target    | Description | Default value |
|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
| \fBVCS_HOME\fP           | Synopsys VCS\-MX installation path | Installation tool specific |
| \fBMTI_HOME\fP           | Mentor installation path | Installation tool  specific |
| \fBQUARTUS_HOME\fP       | Intel Quartus Prime Pro installation path | Installation tool  specific |
| \fBASE_PLATFORM\fP       | Platform selection switch:  Specify either tightly\-coupled FPGA or programmable FPGA acceleration card using \fBFPGA_PLATFORM_INTG_XEON\fP and \fBFPGA_PLATFORM_DISCRETE\fP, respectively | \fBFPGA_PLATFORM_INTG_XEON\fP |
| \fBSIMULATOR\fP          | Simulator Key to environment Defined values \fBVCS\fP or \fBQUESTA\fP | \fBVCS\fP |
| \fBASE_SRCDIR\fP         | ASE source location | Current source path |
| \fBASE_WORKDIR\fP        | Location where ASE runs, usually \fB$ASE_SRCDIR/work\fP | Environment\-specific execution path |
| \fBWORK\fP               | Simulation library compilation location | \fBwork\fP |
| \fBASE_DISABLE_LOGGER\fP | Switch to disable logger build | \fB0\fP |
| \fBASE_DISABLE_CHECKER\fP| Switch to disable checker build WARNING: Disabling this checker may have side effects on protocol correctness | \fB0\fP |
| \fBGLS_SIM\fP            | Enable gate simulation build | \fB1\fP |
| \fBGLS_VERILOG_OPT\fP    | Libraries that enable Intel gate simulation | Quartus EDA simulation library paths|
| \fBASE_CONFIG\fP         | ASE Run\-time configuration file (described \fI\%here\fP) | \fB$ASE_SRCDIR/ase.cfg\fP |
| \fBASE_SCRIPT\fP         | ASE Regression script path | \fB$ASE_SRCDIR/ase_regress.sh\fP |
| \fBTIMESCALE\fP          | Simulator timescale | \fB1ps/1ps\fP |
| \fBASEHW_FILE_LIST\fP    | ASE RTL File list | Refer to  \fBase/Makefile\fP |
| \fBASE_MEM_FILE_LIST\fP  | ASE RTL file list for programmable FPGA acceleration card mode memory | Refer to  \fBase/Makefile\fP |
| \fBASE_INCDIR\fP         | ASE Include directory paths | Refer to  \fBase/Makefile\fP |
| \fBASE_TOP\fP            | ASE top level entity (must not be changed) | \fBase_top\fP |
| \fBCC_OPT\fP             | ASE Software Library compiler build options| \fB\-g \-m64 \-fPIC \-D SIM_SIDE=1 \-I $(ASE_SRCDIR)/sw/ \-D SIMULATOR=VCS \-D $(ASE_PLATFORM) \-Wall \-I $(VCS_HOME)/include/ \fP |
| \fBASE_LD_SWITCHES\fP    | ASE Software Linker switches | \fB\-lrt \-lpthread \-lstdc++ \-luuid\fP |
| \fBSNPS_VHDLAN_OPT\fP    | Synopsys VCS\-MX VHDL compile options (add extra options to \fBase_sources.mk\fP) | Refer to  \fBase/Makefile\fP |
| \fBSNPS_VLOGAN_OPT\fP    | Synopsys VCS\-MX SystemVerilog compile options (add extra options to \fBase_sources.mk\fP) | Refer to  \fBase/Makefile\fP |
| \fBSNPS_VCS_OPT\fP       | Synopsys VCS\-MX options for building simulator executable (add extra options to \fBase_sources.mk\fP) | Refer to  \fBase/Makefile\fP |
| \fBSNPS_SIM_OPT\fP       | Synopsys VCS\-MX Simulation options (add extra options may to  \fBase_sources.mk\fP) | Refer to  \fBase/Makefile\fP |
| \fBMENT_VCOM_OPT\fP      | Mentor Modelsim\-SE/Questasim VHDL compile options  (add extra options to \fBase_sources.mk\fP) | Refer to  \fBase/Makefile\fP |
| \fBMENT_VLOG_OPT\fP      | Mentor Modelsim\-SE/Questasim {System}Verilog compile options  (add extra options to \fBase_sources.mk\fP) | Refer to \fBase/Makefile\fP |
| \fBMENT_VSIM_OPT\fP      | Mentor Modelsim\-SE/Questasim VHDL simulation options  (add extra options to \fBase_sources.mk\fP) | Refer to  \fBase/Makefile\fP |
| \fBDUT_VLOG_SRC_LIST\fP  | Points to a text file listing AFU {System}Verilog files (usually \fBvlog_files.list\fP) | User generated |
| \fBDUT_VHDL_SRC_LIST\fP  | Points to a text file listing AFU VHDL files (usually \fBvhdl_files.list\fP | User generated |
| \fBDUT_INCDIR\fP         | Lists AFU include directories separated by a \(aq+\(aq (usually in \fBase_sources.mk\fP) | User generated |
.SS ASE Runtime Configuration Options
.sp
The ASE configuration file configures simulator behavior. An example configuration script is available at \fBase/ase.cfg\fP
.sp
| Switch Name              | Default                            | Description |
|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-|
| \fBASE_MODE\fP               | 1                                  | ASE mode has the following valid values: 1 : Standard Server\-Client Mode2 : Simulator stops after \fBASE_TIMEOUT\fP clocks3 : Software shuts down simulator when client application releases session 4 : Regression mode invoked by script>=5 : Ignored (revert to \fBASE_MODE=1\fP) |
| \fBASE_TIMEOUT\fP            | 50000 (only if \fBASE_MODE=2\fP)        | Watchdog timer shuts down simulator after \fBASE_TIMEOUT\fP clocks of CCI\-P interface inactivity. |
| \fBASE_NUM_TESTS\fP          | 500 (only if \fBASE_MODE=4\fP)          | Number of tests in regression mode. If incorrectly set,  the simulator may exit pre\-maturely or stall waiting for tests to get started. |
| \fBENABLE_REUSE_D\fP      | 1                                  | When set to 1, reuses the simulation seed, so that CCI\-P transactions replay with the previous addresses. When set to 0, obtains a new seed. |
| \fBASE_SEED\fP                | 1234 (only if \fBENABLE_REUSE_SEED=1\fP) | ASE seed setting, enabled when \fBENABLE_REUSE_SEED\fP is set to 1, otherwise the simulations uses a different seed. At the end of the simulation, the ASE writes the current seed to  \fB$ASE_WORKDIR/ase_seed.txt\fP\&. |
| \fBENABLE_CL_VIEW\fP         | 1                                  | The ASE prints all CCI\-P transactions. On long simulation runs, setting \fBENABLE_CL_VIEW\fP to 0 may reduce simulation time. |
| \fBPHYS_MEMORY_AVAILABLE_GB\fP | 32                                 | Restricts ASE address generation the specified memory range. |
.SS Logging Verbosity Control
.sp
ASE provides the following three levels for logging message verbosity. By default, these messages print to \fBstdout\fP:
.INDENT 0.0
.IP \(bu 2
ASE_INFO: Prints mandatory information messages required to specify operation.
.IP \(bu 2
ASE_ERR: Prints error messages during operation.
.IP \(bu 2
ASE_MSG: Prints general messages indicating check points in the ASE. Suppress these messages by setting the environment
variable \fBASE_LOG\fP to \fB0\fP\&.
.UNINDENT
.sp
The following command  suppresses the ASE_MSG category:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

    $ ASE_LOG=0 LD_PRELOAD=libopae\-c\-ase ./hello_fpga

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You cannot suppress warnings and errors.
.SS Troubleshooting and Error Reference
.sp
The following list of ASE errors and warnings is not comprehensive:
.sp
| Observation               | Problem           | Next Steps           |
|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
| Either all transactions are not seen or simulation ends earlier than expected. | ASE Simulation inactivity is too short for the application use\-case to be successfully simulated in the ASE. | If using \fBASE_MODE=2\fP (Daemon with timeout), in the \fBase.cfg\fP file, increase the \fBASE_TIMEOUT\fP setting or  disable \fBASE_TIMEOUT\fP\&. |
| ASE simulation build error \- compilation, or linking failed | GCC version might be too old. | In the \fBase\fP directory try the following command   \fB$ make sw_build\fP ASE builds correctly with GCC 4.8.5 or higher. Use the \fBase/scripts/env_check.sh\fP script to identify issues. |
| Synopsys VCS\-MX dumped stack while compiling or running | Possible corruption of compiled objects or problems with incremental compilation. | Clean the ASE environment using \fB$ make clean\fP  If this command fails, clean the distribution with \fB$ ./distclean.sh\fPthen rebuild the simulation. |
| ERROR: Too many open files | Past ASE simulation runs did not close cleanly and may have left behind open IPC instances. | Use the  \fB$ASE_SRCDIR/scripts/ipc_clean.py\fP script to clean IPC instances. Check if the \fI\%System Requirements\fP have been met. If problems continue, increase resource limits for your Linux distribution. |
| \fB $ASE_WORKDIR\fP environment variable has not been set up | Application cannot find a valid simulation session | Follow the steps printed when the ASE simulation starts. These instructions are in green text. |
| \fB .ase_timestamp\fP cannot be opened at \fB<DIRECTORY>\fP | Simulator may not have been started yet. Note that when started, the simulator prints: Ready for Simulation\fB$ASE_WORKDIR\fP may not set up correctly. | Check the ASE_WORKDIR  environment variable. \fB$ echo $ASE_WORKDIR \fP Wait for simulator to print: \fBReady for Simulation\fP |
| \fBase_sources.mk: No such file or directory\fP | ASE Environment has not been generated. | Generate an AFU RTL listing (in \fBvlog_files.list\fP and \fB ase_sources.mk\fP) configuration.  You can use \fBase/scripts/generate_ase_environment.py\fPto generate these files. |
| An ASE instance is probably still running in current directory. | An ASE simulation is already running in the \fB$ASE_WORKDIR\fP directory. | If the simulation process is unusable or unreachable, use the \fBase/scripts/ipc_clean.py\fP script to clean the simulation temporary files using: \fB$ make clean\fP\&.  Then rebuild the simulator. |
.SS Revision History
.sp
| Document Version |  Intel Acceleration Stack Version  | Changes  |
| \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-|
|2018.04.16 | 1.1 Alpha. (Supported with Intel Quartus Prime Pro Edition 17.1.1.) | Made the following changes:  * Added \fBafu_sim_setup\fP script which reads a file containing a list of RTL sources and constructs an ASE tree to compile and simulate.  * Added \fB/platforms/scripts/rtl_src_config\fP script which maps a simple text file containing a list of RTL source files to an ASE configuration.  * Updated figures to show the hardware available in the Intel PAC with Arria® 10 GX FPGA. |
.SH OPAE PYTHON BINDINGS
.sp
OPAE (Open Programmable Acceleration Engine) now includes Python bindings for
interacting with FPGA resources. The OPAE Python API is built on top of the
OPAE C++ Core API and its object model. Because of this, developing OPAE
applications in Python is very similar to developing OPAE applications in C++
which significantly reduces the learning curve required to adapt to the Python API.
While the object model remains the same, some static factory functions in the
OPAE C++ Core API have been moved to module level methods in the OPAE Python API
with the exception of the properties class. The goal of the OPAE Python API is
to enable fast prototyping, test automation, infrastructure managment, and an
easy to use framework for FPGA resource interactions that don\(aqt rely on software
algorithms with a high runtime complexity.
.sp
Currently, the only Python package that is part of OPAE is \fBopae.fpga\fP
.SS Implementation
.sp
The OPAE Python API is implemented by creating a Python extension using \fBpybind11 <http://pybind11.readthedocs.io/en/stable>\fP_\&.
This extension is created by using the pybind11 API which relies mostly on
macros and compile time introspection to define the module initialization point
as well as type converters between OPAE C++ Core types and OPAE Python types.
.SS Benefits
.sp
The major benefits of using pybind11 for developing the OPAE Python API
include, but are not limited to, the following features of pybind11:
.INDENT 0.0
.IP \(bu 2
Uses C++ 11 standard library although it can use C++ 14 or C++17.
.IP \(bu 2
Automatic conversions of shared_ptr types
.IP \(bu 2
Built\-in support for numpy and Eigen numerical libraries
.IP \(bu 2
Interoperable with the Python C API
.UNINDENT
.SS Runtime Requirements
.sp
Because opae.fpga is built on top of the opae\-cxx\-core API, it does require
that the runtime libraries for both opae\-cxx\-core and opae\-c be installed on
the system (as well as any other libraries they depend on). Those libraries can
be installed using the opae\-libs package (from either RPM or DEB format \-
depending on your Linux distribution).
.SS Installation
.SS Python Wheels
.sp
The preferred method of installation is to use a binary wheel package for your
version of Python.
.sp
The following table lists example names for different Python versions and
platforms.
.sp
| Python Version | Python ABI      | Linux Platform | Package Name |
|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
| 2.7 | CPython w/ UCS4 | x86_64 | opae.fpga.\-cp27\-cp27mu\-linux_x86_64.whl |
| 3.4 | CPython w/ UCS4 | x86_64 | opae.fpga.\-cp34\-cp34mu\-linux_x86_64.whl |
| 3.6 | CPython w/ UCS4 | x86_64 | opae.fpga.\-cp36\-cp36mu\-linux_x86_64.whl |
.sp
opae.fpga is currently not available in the Python Package Index but once it
does become available, one should be able to install using pip by simply typing
the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> pip install \-\-user opae.fpga
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Installing From Source
.sp
In addition to the runtime libraries mentioned above, installing from source
does require that the OPAE header files be installed as well as those header
files for pybind11. The former can be installed with the opae\-devel package and
the latter can be installed by installing pybind11 Python module.
.SS Example Installation
.sp
The following example shows how to build from source by installing the
prerequisites before running the setup.py file.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>sudo yum install opae\-libs\-<release>.x86_64.rpm
>sudo yum install opae\-devel\-<release>.x86_64.rpm
>pip install \-\-user pybind11
>pip install \-\-user opae.fpga\-<release>.tar.gz
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fINOTE\fP: The \fBpip\fP examples above use the \fB\-\-user\fP flag to avoid requiring root
permissions. Those packages will be installed in the user\(aqs \fBsite\-packages\fP
directory found in the user\(aqs \fB\&.local\fP directory.
.SS Example Scripts
.sp
The following example is an implementation of the sample, hello_fpga.c, which
is designed to configure the NLB0 diagnostic accelerator for a simple loopback.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import time
from opae import fpga

NLB0 = "d8424dc4\-a4a3\-c413\-f89e\-433683f9040b"
CTL = 0x138
CFG = 0x140
NUM_LINES = 0x130
SRC_ADDR = 0x0120
DST_ADDR = 0x0128
DSM_ADDR = 0x0110
DSM_STATUS = 0x40

def cl_align(addr):
    return addr >> 6

tokens = fpga.enumerate(type=fpga.ACCELERATOR, guid=NLB0)
assert tokens, "Could not enumerate accelerator: {}".format(NlB0)

with fpga.open(tokens[0], fpga.OPEN_SHARED) as handle:
    src = fpga.allocate_shared_buffer(handle, 4096)
    dst = fpga.allocate_shared_buffer(handle, 4096)
    dsm = fpga.allocate_shared_buffer(handle, 4096)
    handle.write_csr32(CTL, 0)
    handle.write_csr32(CTL, 1)
    handle.write_csr64(DSM_ADDR, dsm.io_address())
    handle.write_csr64(SRC_ADDR, cl_align(src.io_address())) # cacheline\-aligned
    handle.write_csr64(DST_ADDR, cl_align(dst.io_address())) # cacheline\-aligned
    handle.write_csr32(CFG, 0x42000)
    handle.write_csr32(NUM_LINES, 4096/64)
    handle.write_csr32(CTL, 3)
    while dsm[DSM_STATUS] & 0x1 == 0:
        time.sleep(0.001)
    handle.write_csr32(CTL, 7)

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This example shows how one might reprogram (Partial Reconfiguration) an
accelerator on a given bus, 0x5e, using a bitstream file, m0.gbs.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from opae import fpga

BUS = 0x5e
GBS = \(aqm0.gbs\(aq
tokens = fpga.enumerate(type=fpga.DEVICE, bus=BUS)
assert tokens, "Could not enumerate device on bus: {}".format(BUS)
with open(GBS, \(aqrb\(aq) as fd, fpga.open(tokens[0]) as device:
    device.reconfigure(0, fd)
.ft P
.fi
.UNINDENT
.UNINDENT
.SH BUILDING OPAE SDK ARTIFACTS
.SS Steps
.INDENT 0.0
.IP \(bu 2
Fetch the OPAE SDK source tree
.IP \(bu 2
Configure the OPAE SDK CMake project
.IP \(bu 2
Build OPAE SDK targets
.UNINDENT
.sp
The example below lists commands that can be used to fetch and build OPAE SDK.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# fetch the source
git clone https://github.com/OPAE/opae\-sdk.git
cd opae\-sdk
# configure CMake
cmake ..
# build
make


.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For a list of targets that can be built, type \fBmake help\fP from the build
directory.
.sp
CMake options that may be set during the configuration include the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
| cmake flag                 | Optional or Mandatory | Purpose                             | Valid values                          | Default value  |
|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
| \-DCMAKE_BUILD_TYPE         | Optional              | Set compiler flags                  | Debug/Release/Coverage/RelWithDebInfo | RelWithDebInfo |
| \-DOPAE_BUILD_LEGACY        | Optional              | Enable/disable opae\-legacy.git      | ON/OFF                                | OFF            |
| \-DOPAE_BUILD_SPHINX_DOC    | Optional              | Enable/disable documentation build  | ON/OFF                                | OFF            |
| \-DOPAE_BUILD_TESTS         | Optional              | Enable/disable building unit tests  | ON/OFF                                | OFF            |
| \-DOPAE_INSTALL_RPATH       | Optional              | Enable/disable rpath for install    | ON/OFF                                | OFF            |
| \-DOPAE_BUILD_LIBOPAE_CXX   | Optional              | Enable/disable OPAE C++ bindings    | ON/OFF                                | ON             | 
| \-DOPAE_BUILD_LIBOPAE_PY    | Optional              | Enable/disable OPAE Python bindings | ON/OFF                                | ON             |
| \-DOPAE_BUILD_PYTHON_DIST   | Optional              | Enable/disable Python Distribution  | ON/OFF                                | OFF            |
| \-DOPAE_ENABLE_MOCK         | Optional              | Enable/disable mocks for unit tests | ON/OFF                                | OFF            |
| \-DOPAE_BUILD_SIM           | Optional              | Enable/disable opae\-sim.git         | ON/OFF                                | OFF            |

.ft P
.fi
.UNINDENT
.UNINDENT
.SH OPAE C API REFERENCE
.sp
The reference documentation for the OPAE C API is grouped into the following
sections:
.INDENT 0.0
.IP \(bu 2
\fI\%Types\fP
.INDENT 2.0
.IP \(bu 2
\fI\%types.h\fP
.IP \(bu 2
\fI\%types_enum.h\fP
.UNINDENT
.IP \(bu 2
\fI\%Enumeration API\fP
.INDENT 2.0
.IP \(bu 2
\fI\%enum.h\fP
.IP \(bu 2
\fI\%properties.h\fP
.UNINDENT
.IP \(bu 2
\fI\%Access API\fP
.INDENT 2.0
.IP \(bu 2
\fI\%access.h\fP
.UNINDENT
.IP \(bu 2
\fI\%Event API\fP
.INDENT 2.0
.IP \(bu 2
\fI\%event.h\fP
.UNINDENT
.IP \(bu 2
\fI\%MMIO and Shared Memory APIs\fP
.INDENT 2.0
.IP \(bu 2
\fI\%mmio.h\fP
.IP \(bu 2
\fI\%buffer.h\fP
.IP \(bu 2
\fI\%umsg.h\fP
.UNINDENT
.IP \(bu 2
\fI\%Management API\fP
.INDENT 2.0
.IP \(bu 2
\fI\%manage.h\fP
.UNINDENT
.IP \(bu 2
\fI\%Metrics API\fP
.INDENT 2.0
.IP \(bu 2
\fI\%metrics.h\fP
.UNINDENT
.IP \(bu 2
\fI\%SysObject\fP
.INDENT 2.0
.IP \(bu 2
\fI\%sysobject.h\fP
.UNINDENT
.IP \(bu 2
\fI\%Utilities\fP
.INDENT 2.0
.IP \(bu 2
\fI\%utils.h\fP
.UNINDENT
.IP \(bu 2
\fI\%Samples\fP
.INDENT 2.0
.IP \(bu 2
\fI\%hello_fpga.c\fP
.IP \(bu 2
\fI\%hello_events.c\fP
.UNINDENT
.UNINDENT
.SS Types
.sp
The OPAE C API defines a number of types; most prominent are the types
\fIfpga_token\fP, \fIfpga_handle\fP, and \fIfpga_properties\fP\&. All regular types are
defined in [types.h](#types\-h), while the values of enumeration types are
defined in [types_enum.h](#types\-enum\-h).
.SS types.h
.sp
Type definitions for FPGA API. 
.sp
OPAE uses the three opaque types fpga_properties, fpga_token, and fpga_handle to create a hierarchy of objects that can be used to enumerate, reference, acquire, and query FPGA resources. This object model is designed to be extensible to account for different FPGA architectures and platforms.
.sp
Defines
.INDENT 0.0
.TP
.B FPGA_ERROR_NAME_MAX 
Information about an error register
.sp
This data structure captures information about an error register exposed by an accelerator resource. The error API provides functions to retrieve these information structures from a particular resource. 
.UNINDENT
.INDENT 0.0
.TP
.B FPGA_METRIC_STR_SIZE 
FPGA Metric string size 
.UNINDENT
.sp
Typedefs
.INDENT 0.0
.TP
.B typedef void *fpga_properties 
Object for expressing FPGA resource properties
.sp
\fBfpga_properties\fP objects encapsulate all enumerable information about an FPGA resources. They can be used for two purposes: selective enumeration (discovery) and querying information about existing resources.
.sp
For selective enumeration, usually an empty \fBfpga_properties\fP object is created (using fpgaGetProperties()) and then populated with the desired criteria for enumeration. An array of \fBfpga_properties\fP can then be passed to fpgaEnumerate(), which will return a list of \fBfpga_token\fP objects matching these criteria.
.sp
For querying properties of existing FPGA resources, fpgaGetProperties() can also take an \fBfpga_token\fP and will return an \fBfpga_properties\fP object populated with information about the resource referenced by that token.
.sp
After use, \fBfpga_properties\fP objects should be destroyed using fpga_destroyProperties() to free backing memory used by the \fBfpga_properties\fP object. 
.UNINDENT
.INDENT 0.0
.TP
.B typedef void *fpga_token 
Token for referencing FPGA resources
.sp
An \fBfpga_token\fP serves as a reference to a specific FPGA resource present in the system. Holding an \fBfpga_token\fP does not constitute ownership of the FPGA resource \- it merely allows the user to query further information about a resource, or to use fpgaOpen() to acquire ownership.
.sp
\fBfpga_token\fPs are usually returned by fpgaEnumerate() or fpgaPropertiesGetParent(), and used by fpgaOpen() to acquire ownership and yield a handle to the resource. Some API calls also take \fBfpga_token\fPs as arguments if they don\(aqt require ownership of the resource in question. 
.UNINDENT
.INDENT 0.0
.TP
.B typedef void *fpga_handle 
Handle to an FPGA resource
.sp
A valid \fBfpga_handle\fP object, as populated by fpgaOpen(), denotes ownership of an FPGA resource. Note that ownership can be exclusive or shared, depending on the flags used in fpgaOpen()\&. Ownership can be released by calling fpgaClose(), which will render the underlying handle invalid.
.sp
Many OPAE C API functions require a valid token (which is synonymous with ownership of the resource). 
.UNINDENT
.INDENT 0.0
.TP
.B typedef uint8_t fpga_guid[16] 
Globally unique identifier (GUID)
.sp
GUIDs are used widely within OPAE for helping identify FPGA resources. For example, every FPGA resource has a \fBguid\fP property, which can be (and in the case of FPGA_ACCELERATOR resource primarily is) used for enumerating a resource of a specific type.
.sp
\fBfpga_guid\fP is compatible with libuuid\(aqs uuid_t, so users can use libuuid functions like uuid_parse() to create and work with GUIDs. 
.UNINDENT
.INDENT 0.0
.TP
.B typedef void *fpga_event_handle 
Handle to an event object
.sp
OPAE provides an interface to asynchronous events that can be generated by different FPGA resources. The event API provides functions to register for these events; associated with every event a process has registered for is an \fBfpga_event_handle\fP, which encapsulates the OS\-specific data structure for event objects.
.sp
After use, \fBfpga_event_handle\fP objects should be destroyed using fpgaDestroyEventHandle() to free backing memory used by the \fBfpga_event_handle\fP object. 
.UNINDENT
.INDENT 0.0
.TP
.B typedef void *fpga_object 
Object pertaining to an FPGA resource as identified by a unique name
.sp
An \fBfpga_object\fP represents either a device attribute or a container of attributes. Similar to filesystems, a \(aq/\(aq may be used to seperate objects in an object hierarchy. Once on object is acquired, it may be used to read or write data in a resource attribute or to query sub\-objects if the object is a container object. The data in an object is buffered and will be kept around until the object is destroyed. Additionally, the data in an attribute can by synchronized from the owning resource using the FPGA_OBJECT_SYNC flag during read operations. The name identifying the object is unique with respect to the resource that owns it. A parent resource may be identified by an \fBfpga_token\fP object, by an \fBfpga_handle\fP object, or another \fBfpga_object\fP object. If a handle object is used when opening the object, then the object is opened with read\-write access. Otherwise, the object is read\-only. 
.UNINDENT
.INDENT 0.0
.TP
.B struct fpga_version 
\fI#include <opae/types.h>\fP
.sp
Semantic version
.sp
Data structure for expressing version identifiers following the semantic versioning scheme. Used in various properties for tracking component versions. 
.sp
Public Members
.INDENT 7.0
.TP
.B uint8_t major 
Major version 
.UNINDENT
.INDENT 7.0
.TP
.B uint8_t minor 
Minor version 
.UNINDENT
.INDENT 7.0
.TP
.B uint16_t patch 
Revision or patchlevel 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B struct fpga_error_info 
\fI#include <opae/types.h>\fP
.sp
Public Members
.INDENT 7.0
.TP
.B char name[64] 
.UNINDENT
.INDENT 7.0
.TP
.B bool can_clear 
name of the error 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B union metric_value 
\fI#include <opae/types.h>\fP
.sp
Metric value union 
.sp
Public Members
.INDENT 7.0
.TP
.B uint64_t ivalue 
.UNINDENT
.INDENT 7.0
.TP
.B double dvalue 
.UNINDENT
.INDENT 7.0
.TP
.B float fvalue 
.UNINDENT
.INDENT 7.0
.TP
.B bool bvalue 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B struct fpga_metric_info 
\fI#include <opae/types.h>\fP
.sp
Metric info struct 
.sp
Public Members
.INDENT 7.0
.TP
.B uint64_t metric_num 
.UNINDENT
.INDENT 7.0
.TP
.B fpga_guid metric_guid 
.UNINDENT
.INDENT 7.0
.TP
.B char qualifier_name[256] 
.UNINDENT
.INDENT 7.0
.TP
.B char group_name[256] 
.UNINDENT
.INDENT 7.0
.TP
.B char metric_name[256] 
.UNINDENT
.INDENT 7.0
.TP
.B char metric_units[256] 
.UNINDENT
.INDENT 7.0
.TP
.B enum fpga_metric_datatype metric_datatype 
.UNINDENT
.INDENT 7.0
.TP
.B enum fpga_metric_type metric_type 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B struct fpga_metric 
\fI#include <opae/types.h>\fP
.sp
Metric struct 
.sp
Public Members
.INDENT 7.0
.TP
.B uint64_t metric_num 
.UNINDENT
.INDENT 7.0
.TP
.B metric_value value 
.UNINDENT
.INDENT 7.0
.TP
.B bool isvalid 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B struct threshold 
\fI#include <opae/types.h>\fP
.sp
Threshold struct 
.sp
Public Members
.INDENT 7.0
.TP
.B char threshold_name[256] 
.UNINDENT
.INDENT 7.0
.TP
.B uint32_t is_valid 
.UNINDENT
.INDENT 7.0
.TP
.B double value 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B struct metric_threshold 
\fI#include <opae/types.h>\fP
.sp
Public Members
.INDENT 7.0
.TP
.B char metric_name[256] 
.UNINDENT
.INDENT 7.0
.TP
.B threshold upper_nr_threshold 
.UNINDENT
.INDENT 7.0
.TP
.B threshold upper_c_threshold 
.UNINDENT
.INDENT 7.0
.TP
.B threshold upper_nc_threshold 
.UNINDENT
.INDENT 7.0
.TP
.B threshold lower_nr_threshold 
.UNINDENT
.INDENT 7.0
.TP
.B threshold lower_c_threshold 
.UNINDENT
.INDENT 7.0
.TP
.B threshold lower_nc_threshold 
.UNINDENT
.INDENT 7.0
.TP
.B threshold hysteresis 
.UNINDENT
.UNINDENT
.SS types_enum.h
.sp
Definitions of enumerated types for the OPAE C API. 
.sp
This file defines return and error codes, event and object types, states, and flags as used or reported by OPAE C API functions. 
.sp
Enums
.INDENT 0.0
.TP
.B enum fpga_result 
OPAE C API function return codes
.sp
Every public API function exported by the OPAE C library will return one of these codes. Usually, FPGA_OK denotes successful completion of the requested operation, while any return code \fIother\fP than FPGA_OK indicates an error or other deviation from the expected behavior. Users of the OPAE C API should always check the return codes of the APIs they call, and not use output parameters of functions that did not execute successfully.
.sp
The fpgaErrStr() function converts error codes into printable messages.
.sp
OPAE also has a logging mechanism that allows a developer to get more information about why a particular call failed with a specific message. If enabled, any function that returns an error code different from FPGA_OK will also print out a message with further details. This mechanism can be enabled by setting the environment variable \fBLIBOPAE_LOG\fP to 1 before running the respective application. 
.sp
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator FPGA_OK 
Operation completed successfully 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_INVALID_PARAM 
Invalid parameter supplied 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_BUSY 
Resource is busy 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_EXCEPTION 
An exception occurred 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_NOT_FOUND 
A required resource was not found 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_NO_MEMORY 
Not enough memory to complete operation 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_NOT_SUPPORTED 
Requested operation is not supported 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_NO_DRIVER 
Driver is not loaded 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_NO_DAEMON 
FPGA Daemon (fpgad) is not running 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_NO_ACCESS 
Insufficient privileges or permissions 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_RECONF_ERROR 
Error while reconfiguring FPGA 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enum fpga_event_type 
FPGA events
.sp
OPAE currently defines the following event types that applications can register for. Note that not all FPGA resources and target platforms may support all event types. 
.sp
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator FPGA_EVENT_INTERRUPT 
Interrupt generated by an accelerator 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_EVENT_ERROR 
Infrastructure error event 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_EVENT_POWER_THERMAL 
Infrastructure thermal event 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enum fpga_accelerator_state 
accelerator state 
.sp
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator FPGA_ACCELERATOR_ASSIGNED 
accelerator is opened exclusively by another process 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_ACCELERATOR_UNASSIGNED 
accelerator is free to be opened 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enum fpga_objtype 
OPAE FPGA resources (objects)
.sp
These are the FPGA resources currently supported by the OPAE object model. 
.sp
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator FPGA_DEVICE 
FPGA_DEVICE objects represent FPGA devices and their management functionality. These objects can be opened (typically requires a certain privilege level or access permissions) and used for management functions like fpgaReconfigreSlot(). 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_ACCELERATOR 
FPGA_ACCELERATOR objects represent allocatable units for accessing accelerated functions on the FPGA. They are frequently opened for interacting via control registers (MMIO), shared memory, or other, possibly platform\-specific functions. 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enum fpga_buffer_flags 
Buffer flags
.sp
These flags can be passed to the fpgaPrepareBuffer() function. 
.sp
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator FPGA_BUF_PREALLOCATED 
Use existing buffer 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_BUF_QUIET 
Suppress error messages 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_BUF_READ_ONLY 
Buffer is read\-only 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enum fpga_open_flags 
Open flags
.sp
These flags can be passed to the fpgaOpen() function. 
.sp
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator FPGA_OPEN_SHARED 
Open FPGA resource for shared access 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enum fpga_reconf_flags 
Reconfiguration flags
.sp
These flags can be passed to the fpgaReconfigureSlot() function. 
.sp
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator FPGA_RECONF_FORCE 
Reconfigure the slot without checking if it is in use 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_RECONF_SKIP_USRCLK 
Don\(aqt configure AFU user clocks as part of PR 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enum fpga_sysobject_flags 
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator FPGA_OBJECT_SYNC 
Synchronize data from driver 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_OBJECT_GLOB 
Treat names as glob expressions 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_OBJECT_RAW 
Read or write object data as raw bytes 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_OBJECT_RECURSE_ONE 
Create subobjects one level down from containers 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_OBJECT_RECURSE_ALL 
Create subobjects all levels from from containers 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enum fpga_sysobject_type 
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator FPGA_OBJECT_CONTAINER 
Represents a group of objects 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_OBJECT_ATTRIBUTE 
An object with an attribute value that can be read/written 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enum fpga_metric_type 
fpga metrics types opae defines power,thermal, performance counter and afu metric types 
.sp
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator FPGA_METRIC_TYPE_POWER 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_METRIC_TYPE_THERMAL 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_METRIC_TYPE_PERFORMANCE_CTR 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_METRIC_TYPE_AFU 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_METRIC_TYPE_UNKNOWN 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B enum fpga_metric_datatype 
Metrics data type 
.sp
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator FPGA_METRIC_DATATYPE_INT 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_METRIC_DATATYPE_FLOAT 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_METRIC_DATATYPE_DOUBLE 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_METRIC_DATATYPE_BOOL 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator FPGA_METRIC_DATATYPE_UNKNOWN 
.UNINDENT
.UNINDENT
.SS Enumeration API
.sp
The OPAE enumeration API allows selective discovery of FPGA resources. When
enumerating resources, a list of filter criteria can be passed to the
respective function to select a subset of all resources in the system. The
fpgaEnumerate() function itself then returns a list of fpga_tokens denoting
resources, which can be used in subsequent API calls.
.sp
Filter criteria are specified using one or more fpga_properties object. These
objects need to be created using fpgaGetProperties() (defined in
<opae/properties/h>) before being passed to fpgaEnumerate(). Individual
attributes of an fpga_properties object are set using specific accessors,
which are also defined in <opae/properties.h>.
.SS enum.h
.sp
APIs for resource enumeration and managing tokens. 
.sp
These APIs are the first step for any application using OPAE to discover resources that are present on the system. They allow selective enumeration (i.e. getting a list of resources that match a given list of criteria) and methods to manage the lifecycle of tokens generated by fpgaEnumerate()\&. 
.sp
Functions
.INDENT 0.0
.TP
.B fpga_result fpgaEnumerate(const fpga_properties *\fIfilters\fP, uint32_t \fInum_filters\fP, fpga_token *\fItokens\fP, uint32_t \fImax_tokens\fP, uint32_t *\fInum_matches\fP) 
Enumerate FPGA resources present in the system
.sp
This call allows the user to query the system for FPGA resources that match a certain set of criteria, e.g. all accelerators that are assigned to a host interface and available, all FPGAs of a specific type, etc.
.sp
fpgaEnumerate() will create a number of \fBfpga_token\fPs to represent the matching resources and populate the array \fBtokens\fP with these tokens. The \fBmax_tokens\fP argument can be used to limit the number of tokens allocated/returned by fpgaEnumerate(); i.e., the number of tokens in the returned \fBtokens\fP array will be either \fBmax_tokens\fP or \fBnum_matches\fP (the number of resources matching the filter), whichever is smaller. Use fpgaDestroyToken() to destroy tokens that are no longer needed.
.sp
To query the number of matches for a particular set of filters (e.g. to allocate a \fBtokens\fP array of the appropriate size), call fpgaEnumerate() with the parameter \fBtokens\fP set to NULL; this will only return the number of matches in \fBnum_matches\fP\&.
.sp
.INDENT 7.0
.TP
\fBNote\fP
fpgaEnumerate() will allocate memory for the created tokens returned in \fBtokens\fP\&. It is the responsibility of the using application to free this memory after use by calling fpgaDestroyToken() for each of the returned tokens.
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if invalid pointers or objects are passed into the function. FPGA_NO_DRIVER if OPAE can\(aqt find the respective enumeration data structures usually provided by the driver. FPGA_NO_MEMORY if there was not enough memory to create tokens. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] filters\fP: Array of \fBfpga_properties\fP objects describing the properties of the objects that should be returned. A resource is considered matching if its properties match any one of the supplied filters. To match all FPGA resources, pass an empty filters object (one without any filter criteria set) or pass a NULL filters parameter with num_filters set to 0. 
.IP \(bu 2
\fB[in] num_filters\fP: Number of entries in the \fBfilters\fP array, or 0 to match all FPGA resources when \fBfilters\fP is NULL. 
.IP \(bu 2
\fB[out] tokens\fP: Pointer to an array of fpga_token variables to be populated. If NULL is supplied, fpgaEnumerate() will not create any tokens, but it will return the number of possible matches in \fBnum_match\fP\&. 
.IP \(bu 2
\fB[in] max_tokens\fP: Maximum number of tokens that fpgaEnumerate() shall return (length of \fBtokens\fP array). There may be more or fewer matches than this number; \fBnum_matches\fP is set to the number of actual matches. 
.IP \(bu 2
\fB[out] num_matches\fP: Number of resources matching the \fBfilter\fP criteria. This number can be higher than the number of tokens returned in the \fBtokens\fP array (depending on the value of \fBmax_tokens\fP). 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaCloneToken(fpga_token \fIsrc\fP, fpga_token *\fIdst\fP) 
Clone a fpga_token object
.sp
Creates a copy of an fpga_token object.
.sp
.INDENT 7.0
.TP
\fBNote\fP
This call creates a new token object and allocates memory for it. It is the responsibility of the using application to free this memory after use by calling fpgaDestroyToken() for the cloned token.
.TP
\fBReturn\fP
FPGA_OK on success 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] src\fP: fpga_token object to copy 
.IP \(bu 2
\fB[out] dst\fP: New fpga_token object cloned from \(aqsrc\(aq 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaDestroyToken(fpga_token *\fItoken\fP) 
Destroy a Token
.sp
This function destroys a token created by fpgaEnumerate() and frees the associated memory.
.sp
.INDENT 7.0
.TP
\fBNote\fP
fpgaDestroyToken() requires the address of an fpga_token as previously created by fpgaEnumerate() or fpgaCloneToken()\&. Passing any other value results in undefined behavior.
.TP
\fBReturn\fP
FPGA_OK on success 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] token\fP: fpga_token to destroy 
.UNINDENT
.UNINDENT

.UNINDENT
.SS properties.h
.sp
Functions for examining and manipulating \fBfpga_properties\fP objects. 
.sp
In OPAE, \fBfpga_properties\fP objects are used both for obtaining information about resources and for selectively enumerating resources based on their properties. This file provides accessor functions (get/set) to allow reading and writing individual items of an \fBfpga_properties\fP object. Generally, not all object types supported by OPAE carry all properties. If you call a property accessor method on a \fBfpga_properties\fP object that does not support this particular property, it will return FPGA_INVALID_PARAM.
.sp
Functions
.INDENT 0.0
.TP
.B fpga_result fpgaGetPropertiesFromHandle(fpga_handle \fIhandle\fP, fpga_properties *\fIprop\fP) 
Create a fpga_properties object
.sp
Initializes the memory pointed at by \fBprop\fP to represent a properties object, and populates it with the properties of the resource referred to by \fBhandle\fP\&. Individual properties can then be queried using fpgaPropertiesGet*() accessor functions.
.sp
.INDENT 7.0
.TP
\fBNote\fP
fpgaGetPropertiesFromHandle() will allocate memory for the created properties object returned in \fBprop\fP\&. It is the responsibility of the caller to free this memory after use by calling fpgaDestroyProperties()\&.
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_NO_MEMORY if no memory could be allocated to create the \fBfpga_properties\fP object. FPGA_EXCEPTION if an exception happend while initializing the \fBfpga_properties\fP object. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Open handle to get properties for. 
.IP \(bu 2
\fB[out] prop\fP: Pointer to a variable of type fpga_properties 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaGetProperties(fpga_token \fItoken\fP, fpga_properties *\fIprop\fP) 
Create a fpga_properties object
.sp
Initializes the memory pointed at by \fBprop\fP to represent a properties object, and populates it with the properties of the resource referred to by \fBtoken\fP\&. Individual properties can then be queried using fpgaPropertiesGet*() accessor functions.
.sp
If \fBtoken\fP is NULL, an "empty" properties object is created to be used as a filter for fpgaEnumerate()\&. All individual fields are set to \fBdon\fPt care\(ga, which implies that the fpga_properties object would match all FPGA resources if used for an fpgaEnumerate() query. The matching criteria can be further refined by using fpgaSet* functions on the properties object, or the object can be populated with the actual properties of a resource by using fpgaUpdateProperties()\&.
.sp
.INDENT 7.0
.TP
\fBNote\fP
fpgaGetProperties() will allocate memory for the created properties object returned in \fBprop\fP\&. It is the responsibility of the caller to free this memory after use by calling fpgaDestroyProperties()\&.
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_NO_MEMORY if no memory could be allocated to create the \fBfpga_properties\fP object. FPGA_EXCEPTION if an exception happend while initializing the \fBfpga_properties\fP object. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] token\fP: Token to get properties for. Can be NULL, which will create an empty properties object to be used as a filter for fpgaEnumerate()\&. 
.IP \(bu 2
\fB[out] prop\fP: Pointer to a variable of type fpga_properties 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaUpdateProperties(fpga_token \fItoken\fP, fpga_properties \fIprop\fP) 
Update a fpga_properties object
.sp
Populates the properties object \(aqprop\(aq with properties of the resource referred to by \(aqtoken\(aq. Unlike fpgaGetProperties(), this call will not create a new properties object or allocate memory for it, but use a previously created properties object.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if \fBtoken\fP or \fBprop\fP are not valid objects. FPGA_NOT_FOUND if the resource referred to by \fBtoken\fP was not found. FPGA_NO_DRIVER if not driver is loaded. FPGA_EXCEPTION if an internal exception occured when trying to update \fBprop\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] token\fP: Token to retrieve properties for 
.IP \(bu 2
\fB[in] prop\fP: fpga_properties object to update 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaClearProperties(fpga_properties \fIprop\fP) 
Clear a fpga_properties object
.sp
Sets all fields of the properties object pointed at by \(aqprop\(aq to \(aqdon\(aqt care\(aq, which implies that the fpga_properties object would match all FPGA resources if used for an fpgaEnumerate() query. The matching criteria can be further refined by using fpgaSet* functions on the properties object.
.sp
Instead of creating a new fpga_properties object every time, this function can be used to re\-use fpga_properties objects from previous queries.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if \fBprop\fP is not a valid object. FPGA_EXCEPTION if an * internal exception occured when trying to access \fBprop\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: fpga_properties object to clear 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaCloneProperties(fpga_properties \fIsrc\fP, fpga_properties *\fIdst\fP) 
Clone a fpga_properties object
.sp
Creates a copy of an fpga_properties object.
.sp
.INDENT 7.0
.TP
\fBNote\fP
This call creates a new properties object and allocates memory for it. Both the \(aqsrc\(aq and the newly created \(aqdst\(aq objects will eventually need to be destroyed using fpgaDestroyProperties()\&.
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if \fBsrc\fP is not a valid object, or if \fBdst\fP is NULL. FPGA_NO_MEMORY if there was not enough memory to allocate an \fBfpga_properties\fP object for \fBdst\fP\&. FPGA_EXCEPTION if an internal exception occurred either accessing \fBsrc\fP or updating \fBdst\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] src\fP: fpga_properties object to copy 
.IP \(bu 2
\fB[out] dst\fP: New fpga_properties object cloned from \(aqsrc\(aq 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaDestroyProperties(fpga_properties *\fIprop\fP) 
Destroy a fpga_properties object
.sp
Destroys an existing fpga_properties object that the caller has previously created using fpgaGetProperties() or fpgaCloneProperties()\&.
.sp
.INDENT 7.0
.TP
\fBNote\fP
fpgaDestroyProperties() requires the address of an fpga_properties object, similar to fpgaGetPropertiesFromHandle(), fpgaGetProperties(), and fpgaCloneProperties()\&. Passing any other value results in undefined behavior.
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM is \fBprop\fP is not a valid object. FPGA_EXCEPTION if an internal exception occurrred while trying to access \fBprop\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[inout] prop\fP: Pointer to the fpga_properties object to destroy 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetParent(const fpga_properties \fIprop\fP, fpga_token *\fIparent\fP) 
Get the token of the parent object
.sp
Returns the token of the parent of the queried resource in \(aq*parent\(aq.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_NOT_FOUND if resource does not have a parent (e.g. an FPGA_DEVICE resource does not have parents). Also see "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[out] parent\fP: Pointer to a token variable of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetParent(fpga_properties \fIprop\fP, fpga_token \fIparent\fP) 
Set the token of the parent object
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify 
.IP \(bu 2
\fB[out] parent\fP: Pointer to a token variable of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetObjectType(const fpga_properties \fIprop\fP, fpga_objtype *\fIobjtype\fP) 
Get the object type of a resource
.sp
Returns the object type of the queried resource.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[out] objtype\fP: Pointer to an object type variable of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetObjectType(fpga_properties \fIprop\fP, fpga_objtype \fIobjtype\fP) 
Set the object type of a resource
.sp
Sets the object type of the resource. * Currently supported object types are FPGA_DEVICE and FPGA_ACCELERATOR.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify 
.IP \(bu 2
\fB[out] objtype\fP: Object type of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetSegment(const fpga_properties \fIprop\fP, uint16_t *\fIsegment\fP) 
Get the PCI segment number of a resource
.sp
Returns the segment number of the queried resource.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[out] segment\fP: Pointer to a PCI segment variable of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetSegment(fpga_properties \fIprop\fP, uint16_t \fIsegment\fP) 
Set the PCI segment number of a resource
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify 
.IP \(bu 2
\fB[in] segment\fP: PCI segment number of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetBus(const fpga_properties \fIprop\fP, uint8_t *\fIbus\fP) 
Get the PCI bus number of a resource
.sp
Returns the bus number the queried resource.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[out] bus\fP: Pointer to a PCI bus variable of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetBus(fpga_properties \fIprop\fP, uint8_t \fIbus\fP) 
Set the PCI bus number of a resource
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify 
.IP \(bu 2
\fB[in] bus\fP: PCI bus number of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetDevice(const fpga_properties \fIprop\fP, uint8_t *\fIdevice\fP) 
Get the PCI device number of a resource
.sp
Returns the device number the queried resource.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[out] device\fP: Pointer to a PCI device variable of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetDevice(fpga_properties \fIprop\fP, uint8_t \fIdevice\fP) 
Set the PCI device number of a resource
.sp
Enforces the limitation on the number of devices as specified in the PCI spec.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify 
.IP \(bu 2
\fB[in] device\fP: PCI device number of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetFunction(const fpga_properties \fIprop\fP, uint8_t *\fIfunction\fP) 
Get the PCI function number of a resource
.sp
Returns the function number the queried resource.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[out] function\fP: Pointer to PCI function variable of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetFunction(fpga_properties \fIprop\fP, uint8_t \fIfunction\fP) 
Set the PCI function number of a resource
.sp
Enforces the limitation on the number of functions as specified in the PCI spec.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify 
.IP \(bu 2
\fB[in] function\fP: PCI function number of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetSocketID(const fpga_properties \fIprop\fP, uint8_t *\fIsocket_id\fP) 
Get the socket id of a resource
.sp
Returns the socket id of the queried resource.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[out] socket_id\fP: Pointer to a socket id variable of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetSocketID(fpga_properties \fIprop\fP, uint8_t \fIsocket_id\fP) 
Set the socket id of the resource
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify 
.IP \(bu 2
\fB[in] socket_id\fP: Socket id of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetDeviceID(const fpga_properties \fIprop\fP, uint16_t *\fIdevice_id\fP) 
Get the device id of the resource
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[out] device_id\fP: Pointer to a device id variable of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetDeviceID(fpga_properties \fIprop\fP, uint16_t \fIdevice_id\fP) 
Set the device id of the resource
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify 
.IP \(bu 2
\fB[in] device_id\fP: Device id of the resource \(aqprop\(aq is associated with 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetNumSlots(const fpga_properties \fIprop\fP, uint32_t *\fInum_slots\fP) 
Get the number of slots of an FPGA resource property
.sp
Returns the number of slots present in an FPGA.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[out] num_slots\fP: Pointer to number of slots variable of the FPGA 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetNumSlots(fpga_properties \fIprop\fP, uint32_t \fInum_slots\fP) 
Set the number of slots of an FPGA resource property
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[in] num_slots\fP: Number of slots of the FPGA 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetBBSID(const fpga_properties \fIprop\fP, uint64_t *\fIbbs_id\fP) 
Get the BBS ID of an FPGA resource property
.sp
Returns the blue bitstream id of an FPGA.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[out] bbs_id\fP: Pointer to a bbs id variable of the FPGA 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetBBSID(fpga_properties \fIprop\fP, uint64_t \fIbbs_id\fP) 
Set the BBS ID of an FPGA resource property
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[in] bbs_id\fP: Blue bitstream id of the FPGA resource 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetBBSVersion(const fpga_properties \fIprop\fP, fpga_version *\fIbbs_version\fP) 
Get the BBS Version of an FPGA resource property
.sp
Returns the blue bitstream version of an FPGA.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[out] bbs_version\fP: Pointer to a bbs version variable of the FPGA 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetBBSVersion(fpga_properties \fIprop\fP, fpga_version \fIversion\fP) 
Set the BBS Version of an FPGA resource property
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[in] version\fP: Blue bitstream version of the FPGA resource 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetVendorID(const fpga_properties \fIprop\fP, uint16_t *\fIvendor_id\fP) 
Get the vendor id of an FPGA resource property
.sp
Returns the vendor id of an FPGA.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&.
.TP
\fBNote\fP
This API is not currently supported. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[out] vendor_id\fP: Pointer to a vendor id variable of the FPGA 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetVendorID(fpga_properties \fIprop\fP, uint16_t \fIvendor_id\fP) 
Set the vendor id of an FPGA resource property
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&.
.TP
\fBNote\fP
This API is not currently supported. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[in] vendor_id\fP: Vendor id of the FPGA resource 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetModel(const fpga_properties \fIprop\fP, char *\fImodel\fP) 
Get the model of an FPGA resource property
.sp
Returns the model of an FPGA.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&.
.TP
\fBNote\fP
This API is not currently supported. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[in] model\fP: Model of the FPGA resource (string of minimum FPGA_MODEL_LENGTH length 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetModel(fpga_properties \fIprop\fP, char *\fImodel\fP) 
Set the model of an FPGA resource property
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&.
.TP
\fBNote\fP
This API is not currently supported. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[in] model\fP: Model of the FPGA resource (string of maximum FPGA_MODEL_LENGTH length 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetLocalMemorySize(const fpga_properties \fIprop\fP, uint64_t *\fIlms\fP) 
Get the local memory size of an FPGA resource property
.sp
Returns the local memory size of an FPGA.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&.
.TP
\fBNote\fP
This API is not currently supported. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[out] lms\fP: Pointer to a memory size variable of the FPGA 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetLocalMemorySize(fpga_properties \fIprop\fP, uint64_t \fIlms\fP) 
Set the local memory size of an FPGA resource property
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&.
.TP
\fBNote\fP
This API is not currently supported. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[in] lms\fP: Local memory size of the FPGA resource 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetCapabilities(const fpga_properties \fIprop\fP, uint64_t *\fIcapabilities\fP) 
Get the capabilities FPGA resource property
.sp
Returns the capabilities of an FPGA. Capabilities is a bitfield value
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&.
.TP
\fBNote\fP
This API is not currently supported. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[out] capabilities\fP: Pointer to a capabilities variable of the FPGA 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetCapabilities(fpga_properties \fIprop\fP, uint64_t \fIcapabilities\fP) 
Set the capabilities of an FPGA resource property
.sp
Capabilities is a bitfield value
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_DEVICE. See also "Accessor Return Values" in \fI\%properties.h\fP\&.
.TP
\fBNote\fP
This API is not currently supported. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify \- must be of type FPGA_DEVICE 
.IP \(bu 2
\fB[in] capabilities\fP: Capabilities of the FPGA resource 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetGUID(const fpga_properties \fIprop\fP, fpga_guid *\fIguid\fP) 
Get the GUID of a resource
.sp
Returns the GUID of an FPGA or accelerator object.
.sp
For an accelerator, the GUID uniquely identifies a specific accelerator context type, i.e. different accelerators will have different GUIDs. For an FPGA, the GUID is used to identify a certain instance of an FPGA, e.g. to determine whether a given bitstream would be compatible.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[out] guid\fP: Pointer to a GUID of the slot variable 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetGUID(fpga_properties \fIprop\fP, fpga_guid \fIguid\fP) 
Set the GUID of a resource
.sp
Sets the GUID of an FPGA or accelerator object.
.sp
For an accelerator, the GUID uniquely identifies a specific accelerator context type, i.e. different accelerators will have different GUIDs. For an FPGA, the GUID is used to identify a certain instance of an FPGA, e.g. to determine whether a given bitstream would be compatible.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify 
.IP \(bu 2
\fB[out] guid\fP: Pointer to a GUID of the slot variable 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetNumMMIO(const fpga_properties \fIprop\fP, uint32_t *\fImmio_spaces\fP) 
Get the number of mmio spaces
.sp
Returns the number of mmio spaces of an AFU properties structure.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_ACCELERATOR. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query \- must be of type FPGA_ACCELERATOR 
.IP \(bu 2
\fB[out] mmio_spaces\fP: Pointer to a variable for number of mmio spaces 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetNumMMIO(fpga_properties \fIprop\fP, uint32_t \fImmio_spaces\fP) 
Set the number of mmio spaces
.sp
Sets the number of mmio spaces of an AFU properties structure.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_ACCELERATOR. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify \- must be of type FPGA_ACCELERATOR 
.IP \(bu 2
\fB[in] mmio_spaces\fP: Number of MMIO spaces of the accelerator 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetNumInterrupts(const fpga_properties \fIprop\fP, uint32_t *\fInum_interrupts\fP) 
Get the number of interrupts
.sp
Returns the number of interrupts of an accelerator properties structure.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_ACCELERATOR. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query \- must be of type FPGA_ACCELERATOR 
.IP \(bu 2
\fB[out] num_interrupts\fP: Pointer to a variable for number of interrupts 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetNumInterrupts(fpga_properties \fIprop\fP, uint32_t \fInum_interrupts\fP) 
Set the number of interrupts
.sp
Sets the number of interrupts of an accelerator properties structure.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_ACCELERATOR. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify \- must be of type FPGA_ACCELERATOR 
.IP \(bu 2
\fB[in] num_interrupts\fP: Number of interrupts of the accelerator 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetAcceleratorState(const fpga_properties \fIprop\fP, fpga_accelerator_state *\fIstate\fP) 
Get the state of a accelerator resource property
.sp
Returns the accelerator state of a accelerator.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_ACCELERATOR. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query \- must be of type FPGA_ACCELERATOR 
.IP \(bu 2
\fB[out] state\fP: Pointer to a accelerator state variable of the accelerator 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetAcceleratorState(fpga_properties \fIprop\fP, fpga_accelerator_state \fIstate\fP) 
Set the state of an accelerator resource property
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_INVALID_PARAM if object type is not FPGA_ACCELERATOR. See also "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to modify \- must be of type FPGA_ACCELERATOR 
.IP \(bu 2
\fB[in] state\fP: accelerator state of the accelerator resource 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetObjectID(const fpga_properties \fIprop\fP, uint64_t *\fIobject_id\fP) 
Get the object ID of a resource
.sp
Returns the object ID of a resource. The object ID is a 64 bit identifier that is unique within a single node or system. It represents a similar concept as the token, but can be used across processes (e.g. passed on the command line).
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[out] object_id\fP: Pointer to a 64bit memory location to store the object ID in 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetObjectID(const fpga_properties \fIprop\fP, uint64_t \fIobject_id\fP) 
Set the object ID of a resource
.sp
Sets the object ID of a resource. The object ID is a 64 bit identifier that is unique within a single node or system. It represents a similar concept as the token, but can be used across processes (e.g. passed on the command line).
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[in] object_id\fP: A 64bit value to use as the object ID 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesGetNumErrors(const fpga_properties \fIprop\fP, uint32_t *\fInum_errors\fP) 
Get the number of errors that can be reported by a resource
.sp
Returns the number of error registers understood by a resource.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[out] num_errors\fP: Pointer to a 32 bit memory location to store the number of supported errors in 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaPropertiesSetNumErrors(const fpga_properties \fIprop\fP, uint32_t \fInum_errors\fP) 
Set the number of error registers
.sp
Set the number of error registers understood by a resource to enumerate.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
See "Accessor Return Values" in \fI\%properties.h\fP\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] prop\fP: Properties object to query 
.IP \(bu 2
\fB[in] num_errors\fP: Number of errors 
.UNINDENT
.UNINDENT

.UNINDENT
.SS Access API
.sp
The access API provides functions for opening and closing FPGA resources.
Opening a resource yields an fpga_handle, which denotes ownership and can be
used in subsequent API calls to interact with a specific resource. Ownership
can be exclusive or shared.
.SS access.h
.sp
Functions to acquire, release, and reset OPAE FPGA resources. 
.sp
Functions
.INDENT 0.0
.TP
.B fpga_result fpgaOpen(fpga_token \fItoken\fP, fpga_handle *\fIhandle\fP, int \fIflags\fP) 
Open an FPGA object
.sp
Acquires ownership of the FPGA resource referred to by \(aqtoken\(aq.
.sp
Most often this will be used to open an accelerator object to directly interact with an accelerator function, or to open an FPGA object to perform management functions.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_NOT_FOUND if the resource for \(aqtoken\(aq could not be found. FPGA_INVALID_PARAM if \(aqtoken\(aq does not refer to a resource that can be opened, or if either argument is NULL or invalid. FPGA_EXCEPTION if an internal exception occurred while creating the handle. FPGA_NO_DRIVER if the driver is not loaded. FPGA_BUSY if trying to open a resource that has already been opened in exclusive mode. FPGA_NO_ACCESS if the current process\(aq privileges are not sufficient to open the resource. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] token\fP: Pointer to token identifying resource to acquire ownership of 
.IP \(bu 2
\fB[out] handle\fP: Pointer to preallocated memory to place a handle in. This handle will be used in subsequent API calls. 
.IP \(bu 2
\fB[in] flags\fP: One of the following flags:.INDENT 2.0
.IP \(bu 2
FPGA_OPEN_SHARED allows the resource to be opened multiple times (not supported in ASE) Shared resources (including buffers) are released when all associated handles have been closed (either explicitly with fpgaClose() or by process termination). 
.UNINDENT

.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaClose(fpga_handle \fIhandle\fP) 
Close a previously opened FPGA object
.sp
Relinquishes ownership of a previously fpgaOpen()ed resource. This enables others to acquire ownership if the resource was opened exclusively. Also deallocates / unmaps MMIO and UMsg memory areas.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if handle does not refer to an acquired resource, or if handle is NULL. FPGA_EXCEPTION if an internal error occurred while accessing the handle. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened FPGA object 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaReset(fpga_handle \fIhandle\fP) 
Reset an FPGA object
.sp
Performs an accelerator reset.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if handle does not refer to an acquired resource or to a resource that cannot be reset. FPGA_EXCEPTION if an internal error occurred while trying to access the handle or resetting the resource. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened FPGA object 
.UNINDENT
.UNINDENT

.UNINDENT
.SS Event API
.sp
The event API provides functions and types for handling asynchronous events
such as errors or accelerator interrupts.
.sp
To natively support asynchronous event, the driver for the FPGA platform
needs to support events natively (in which case the OPAE C library will
register the event directly with the driver). For some platforms that do not
support interrupt\-driven event delivery, you need to run the FPGA Daemon
(fpgad) to enable asynchronous OPAE events. fpgad will act as a proxy for the
application and deliver asynchronous notifications for registered events.
.SS event.h
.sp
Functions for registering events and managing the lifecycle for \fBfpga_event_handle\fPs. 
.sp
OPAE provides an interface to asynchronous events that can be generated by different FPGA resources. The event API provides functions to register for these events; associated with every event a process has registered for is an fpga_event_handle, which encapsulates the OS\-specific data structure for event objects. On Linux, an fpga_event_handle can be used as a file descriptor and passed to select(), poll(), epoll() and similar functions to wait for asynchronous events. 
.sp
Functions
.INDENT 0.0
.TP
.B fpga_result fpgaCreateEventHandle(fpga_event_handle *\fIevent_handle\fP) 
Initialize an event_handle
.sp
Platform independent way to initialize an event_handle used for notifications from the driver to application. For Linux, this function creates an eventfd and returns the eventfd file descriptor in \fB*event_handle\fP\&.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if \fBevent_handle\fP is NULL. FPGA_NOT_SUPPORTED if platform does not support events. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[out] event_handle\fP: Pointer to event handle variable.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaDestroyEventHandle(fpga_event_handle *\fIevent_handle\fP) 
Destroy an event_handle
.sp
Destroy handle and free resources. On Linux this corresponds to closing the file descriptor pointed to by handle
.sp
.INDENT 7.0
.TP
\fBNote\fP
fpgaDestroyEventHandle() requires the address of an event_handle as created by fpgaCreateEventHandle()\&. Passing any other value results in undefined behavior.
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if \fBevent_handle\fP is NULL. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] event_handle\fP: Pointer to handle to be destroyed
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaGetOSObjectFromEventHandle(const fpga_event_handle \fIeh\fP, int *\fIfd\fP) 
Get OS object from event handle
.sp
Check validity of event handle, and get the OS object used to subscribe and unsubscribe to events. On Linux, the object corresponds to a file descriptor.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if \fBevent_handle\fP is invalid. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] eh\fP: Event handle to get the descriptor value from 
.IP \(bu 2
\fB[out] fd\fP: integer to store the descriptor value
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaRegisterEvent(fpga_handle \fIhandle\fP, fpga_event_type \fIevent_type\fP, fpga_event_handle \fIevent_handle\fP, uint32_t \fIflags\fP) 
Register an FPGA event
.sp
This function tells the driver that the caller is interested in notification for the event specified by the type and flags pair.
.sp
The event_handle points to an OS specific mechanism for event notification. An event_handle is associated with only a single event.
.sp
In case of user interrupts, the flags parameter will be used to specify the vector ID. The value of the flags parameter indicates the vector ID, no bit encoding is used.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if handle does not refer to a resource supporting the requested event, or if event_handle is not valid. FPGA_EXCEPTION if an internal exception occurred while accessing the handle or the event_handle. On Linux: FPGA_NO_DAEMON if the driver does not support the requested event and there is no FPGA Daemon (fpgad) running to proxy it. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened FPGA resource. 
.IP \(bu 2
\fB[in] event_type\fP: Type of event 
.IP \(bu 2
\fB[in] event_handle\fP: Handle to previously opened resource for event notification. 
.IP \(bu 2
\fB[in] flags\fP: Optional argument for specifying additional information about event. For example irq number for interrupt events. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaUnregisterEvent(fpga_handle \fIhandle\fP, fpga_event_type \fIevent_type\fP, fpga_event_handle \fIevent_handle\fP) 
Unregister an FPGA event
.sp
This function tells the driver that the caller is no longer interested in notification for the event associated with the event_handle
.sp
The event_handle points to an OS specific mechanism for event notification. An event_handle is associated with only a single event.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if handle does not refer to a resource supporting the requested event, or if event_handle is not valid. FPGA_EXCEPTION if an internal error occurred accessing the handle or the event_handle. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened FPGA resource. 
.IP \(bu 2
\fB[in] event_type\fP: Type of event to unregister. 
.IP \(bu 2
\fB[in] event_handle\fP: Handle to previously registered resource for event notification. 
.UNINDENT
.UNINDENT

.UNINDENT
.SS MMIO and Shared Memory APIs
.sp
These APIs feature functions for mapping and accessing control registers
through memory\-mapped IO (mmio.h), allocating and sharing system memory
buffers with an accelerator (buffer.h), and using low\-latency notifications
(umsg.h).
.SS mmio.h
.sp
Functions for mapping and accessing MMIO space. 
.sp
Most FPGA accelerators provide access to control registers through memory\-mappable address spaces, commonly referred to as "MMIO spaces". This file provides functions to map, unmap, read, and write MMIO spaces.
.sp
Note that an accelerator may have multiple MMIO spaces, denoted by the \fBmmio_num\fP argument of the APIs below. The meaning and properties of each MMIO space are up to the accelerator designer. 
.sp
Functions
.INDENT 0.0
.TP
.B fpga_result fpgaWriteMMIO64(fpga_handle \fIhandle\fP, uint32_t \fImmio_num\fP, uint64_t \fIoffset\fP, uint64_t \fIvalue\fP) 
Write 64 bit value to MMIO space
.sp
This function will write to MMIO space of the target object at a specified offset.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of the supplied parameters is invalid. FPGA_EXCEPTION if an internal exception occurred while trying to access the handle. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[in] mmio_num\fP: Number of MMIO space to access 
.IP \(bu 2
\fB[in] offset\fP: Byte offset into MMIO space 
.IP \(bu 2
\fB[in] value\fP: Value to write (64 bit) 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaReadMMIO64(fpga_handle \fIhandle\fP, uint32_t \fImmio_num\fP, uint64_t \fIoffset\fP, uint64_t *\fIvalue\fP) 
Read 64 bit value from MMIO space
.sp
This function will read from MMIO space of the target object at a specified offset.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of the supplied parameters is invalid. FPGA_EXCEPTION if an internal exception occurred while trying to access the handle. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[in] mmio_num\fP: Number of MMIO space to access 
.IP \(bu 2
\fB[in] offset\fP: Byte offset into MMIO space 
.IP \(bu 2
\fB[out] value\fP: Pointer to memory where read value is returned (64 bit) 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaWriteMMIO32(fpga_handle \fIhandle\fP, uint32_t \fImmio_num\fP, uint64_t \fIoffset\fP, uint32_t \fIvalue\fP) 
Write 32 bit value to MMIO space
.sp
This function will write to MMIO space of the target object at a specified offset.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of the supplied parameters is invalid. FPGA_EXCEPTION if an internal exception occurred while trying to access the handle. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[in] mmio_num\fP: Number of MMIO space to access 
.IP \(bu 2
\fB[in] offset\fP: Byte offset into MMIO space 
.IP \(bu 2
\fB[in] value\fP: Value to write (32 bit) 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaReadMMIO32(fpga_handle \fIhandle\fP, uint32_t \fImmio_num\fP, uint64_t \fIoffset\fP, uint32_t *\fIvalue\fP) 
Read 32 bit value from MMIO space
.sp
This function will read from MMIO space of the target object at a specified offset.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of the supplied parameters is invalid. FPGA_EXCEPTION if an internal exception occurred while trying to access the handle. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[in] mmio_num\fP: Number of MMIO space to access 
.IP \(bu 2
\fB[in] offset\fP: Byte offset into MMIO space 
.IP \(bu 2
\fB[out] value\fP: Pointer to memory where read value is returned (32 bit) 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaWriteMMIO512(fpga_handle \fIhandle\fP, uint32_t \fImmio_num\fP, uint64_t \fIoffset\fP, const void *\fIvalue\fP) 
Write 512 bit value to MMIO space
.sp
512 bit MMIO writes may not be supported on all platforms.
.sp
This function will write to MMIO space of the target object at a specified offset.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of the supplied parameters is invalid. FPGA_EXCEPTION if an internal exception occurred while trying to access the handle. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[in] mmio_num\fP: Number of MMIO space to access 
.IP \(bu 2
\fB[in] offset\fP: Byte offset into MMIO space 
.IP \(bu 2
\fB[in] value\fP: Pointer to memory holding value to write (512 bits) 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaMapMMIO(fpga_handle \fIhandle\fP, uint32_t \fImmio_num\fP, uint64_t **\fImmio_ptr\fP) 
Map MMIO space
.sp
This function will return a pointer to the specified MMIO space of the target object in process virtual memory, if supported by the target. Some MMIO spaces may be restricted to privileged processes, depending on the used handle and type.
.sp
After mapping the respective MMIO space, you can access it through direct pointer operations (observing supported access sizes and alignments of the target platform and accelerator).
.sp
If the caller passes in NULL for mmio_ptr, no mapping will be performed, and no virtual address will be returned, though the call will return 
\fBFPGA_OK\fP\&. This implies that all accesses will be performed through fpgaReadMMIO32(), fpgaWriteMMIO32(), fpgeReadMMIO64(), and fpgaWriteMMIO64()\&. This is the only supported case for ASE..INDENT 7.0
.TP
\fBNote\fP
Some targets (such as the ASE simulator) do not support memory\-mapping of IO register spaces and will not return a pointer to an actually mapped space. Instead, they will return \fBFPGA_NOT_SUPPORTED\fP\&. Usually, these platforms still allow the application to issue MMIO operations using fpgaReadMMIO32(), fpgaWriteMMIO32(), fpgeReadMMIO64(), and fpgaWriteMMIO64()\&.
.UNINDENT

.sp
The number of available MMIO spaces can be retrieved through the num_mmio property (fpgaPropertyGetNumMMIO()).
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of the supplied parameters is invalid. FPGA_EXCEPTION if an internal exception occurred while trying to access the handle. FPGA_NO_ACCESS if the process\(aq permissions are not sufficient to map the requested MMIO space. FPGA_NOT_SUPPORTED if platform does not support memory mapped IO. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened resource 
.IP \(bu 2
\fB[in] mmio_num\fP: Number of MMIO space to access 
.IP \(bu 2
\fB[out] mmio_ptr\fP: Pointer to memory where a pointer to the MMIO space will be returned. May be NULL, in which case no pointer is returned. Returned address may be NULL if underlying platform does not support memory mapping for register access. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaUnmapMMIO(fpga_handle \fIhandle\fP, uint32_t \fImmio_num\fP) 
Unmap MMIO space
.sp
This function will unmap a previously mapped MMIO space of the target object, rendering any pointers to it invalid.
.sp
.INDENT 7.0
.TP
\fBNote\fP
This call is only supported by hardware targets, not by ASE simulation.
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of the supplied parameters is invalid. FPGA_EXCEPTION if an internal exception occurred while trying to access the handle. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened resource 
.IP \(bu 2
\fB[in] mmio_num\fP: Number of MMIO space to access 
.UNINDENT
.UNINDENT

.UNINDENT
.SS buffer.h
.sp
Functions for allocating and sharing system memory with an FPGA accelerator. 
.sp
To share memory between a software application and an FPGA accelerator, these functions set up system components (e.g. an IOMMU) to allow accelerator access to a provided memory region.
.sp
There are a number of restrictions on what memory can be shared, depending on platform capabilities. Usually, FPGA accelerators to not have access to virtual address mappings of the CPU, so they can only access physical addresses. To support this, the OPAE C library on Linux uses hugepages to allocate large, contiguous pages of physical memory that can be shared with an accelerator. It also supports sharing memory that has already been allocated by an application, as long as that memory satisfies the requirements of being physically contigous and page\-aligned. 
.sp
Functions
.INDENT 0.0
.TP
.B fpga_result fpgaPrepareBuffer(fpga_handle \fIhandle\fP, uint64_t \fIlen\fP, void **\fIbuf_addr\fP, uint64_t *\fIwsid\fP, int \fIflags\fP) 
Prepare a shared memory buffer
.sp
Prepares a memory buffer for shared access between an accelerator and the calling process. This may either include allocation of physical memory, or preparation of already allocated memory for sharing. The latter case is indicated by supplying the FPGA_BUF_PREALLOCATED flag.
.sp
This function will ask the driver to pin the indicated memory (make it non\-swappable), and program the IOMMU to allow access from the accelerator. If the buffer was not pre\-allocated (flag FPGA_BUF_PREALLOCATED), the function will also allocate physical memory of the requested size and map the memory into the caller\(aqs process\(aq virtual address space. It returns in \(aqwsid\(aq an fpga_buffer object that can be used to program address registers in the accelerator for shared access to the memory.
.sp
When using FPGA_BUF_PREALLOCATED, the input len must be a non\-zero multiple of the page size, else the function returns FPGA_INVALID_PARAM. When not using FPGA_BUF_PREALLOCATED, the input len is rounded up to the nearest multiple of page size.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_NO_MEMORY if the requested memory could not be allocated. FPGA_INVALID_PARAM if invalid parameters were provided, or if the parameter combination is not valid. FPGA_EXCEPTION if an internal exception occurred while trying to access the handle.
.TP
\fBNote\fP
As a special case, when FPGA_BUF_PREALLOCATED is present in flags, if len == 0 and buf_addr == NULL, then the function returns FPGA_OK if pre\-allocated buffers are supported. In this case, a return value other than FPGA_OK indicates that pre\-allocated buffers are not supported. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[in] len\fP: Length of the buffer to allocate/prepare in bytes 
.IP \(bu 2
\fB[inout] buf_addr\fP: Virtual address of buffer. Contents may be NULL (OS will choose mapping) or non\-NULL (OS will take contents as a hint for the virtual address). 
.IP \(bu 2
\fB[out] wsid\fP: Handle to the allocated/prepared buffer to be used with other functions 
.IP \(bu 2
\fB[in] flags\fP: Flags. FPGA_BUF_PREALLOCATED indicates that memory pointed at in \(aq*buf_addr\(aq is already allocated an mapped into virtual memory. FPGA_BUF_READ_ONLY pins pages with only read access from the FPGA. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaReleaseBuffer(fpga_handle \fIhandle\fP, uint64_t \fIwsid\fP) 
Release a shared memory buffer
.sp
Releases a previously prepared shared buffer. If the buffer was allocated using fpgaPrepareBuffer (FPGA_BUF_PREALLOCATED was not specified), this call will deallocate/free that memory. Otherwise, it will only be returned to it\(aqs previous state (pinned/unpinned, cached/non\-cached).
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if invalid parameters were provided, or if the parameter combination is not valid. FPGA_EXCEPTION if an internal exception occurred while trying to access the handle. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[in] wsid\fP: Handle to the allocated/prepared buffer 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaGetIOAddress(fpga_handle \fIhandle\fP, uint64_t \fIwsid\fP, uint64_t *\fIioaddr\fP) 
Retrieve base IO address for buffer
.sp
This function is used to acquire the physical base address (on some platforms called IO Virtual Address or IOVA) for a shared buffer identified by wsid.
.sp
.INDENT 7.0
.TP
\fBNote\fP
This function will disappear once the APIs for secure sharing of buffer addresses is implemented.
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if invalid parameters were provided, or if the parameter combination is not valid. FPGA_EXCEPTION if an internal exception occurred while trying to access the handle. FPGA_NOT_FOUND if \fBwsid\fP does not refer to a previously shared buffer. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[in] wsid\fP: Buffer handle / workspace ID referring to the buffer for which the IO address is requested 
.IP \(bu 2
\fB[out] ioaddr\fP: Pointer to memory where the IO address will be returned 
.UNINDENT
.UNINDENT

.UNINDENT
.SS umsg.h
.sp
FPGA UMsg API. 
.sp
Functions
.INDENT 0.0
.TP
.B fpga_result fpgaGetNumUmsg(fpga_handle \fIhandle\fP, uint64_t *\fIvalue\fP) 
Get number of Umsgs
.sp
Retuns number of umsg supported by AFU.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if input parameter combination is not valid. FPGA_EXCEPTION if input parameter fpga handle is not valid. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[out] value\fP: Returns number of UMsgs 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaSetUmsgAttributes(fpga_handle \fIhandle\fP, uint64_t \fIvalue\fP) 
Sets Umsg hint
.sp
Writes usmg hint bit.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if input parameter combination is not valid. FPGA_EXCEPTION if input parameter fpga handle is not valid. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[in] value\fP: Value to use for UMsg hint, Umsg hit is N wide bitvector where N = number of Umsgs. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaTriggerUmsg(fpga_handle \fIhandle\fP, uint64_t \fIvalue\fP) 
Trigger Umsg
.sp
Writes a 64\-bit value to trigger low\-latency accelerator notification mechanism (UMsgs).
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if input parameter combination is not valid. FPGA_EXCEPTION if input parameter fpga handle is not valid. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[in] value\fP: Value to use for UMsg 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaGetUmsgPtr(fpga_handle \fIhandle\fP, uint64_t **\fIumsg_ptr\fP) 
Access UMsg memory directly
.sp
This function will return a pointer to the memory allocated for low latency accelerator notifications (UMsgs).
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if input parameter combination is not valid. FPGA_EXCEPTION if input parameter fpga handle is not valid. FPGA_NO_MEMORY if memory allocation fails or system doesn\(aqt configure huge pages. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened accelerator resource 
.IP \(bu 2
\fB[out] umsg_ptr\fP: Pointer to memory where a pointer to the virtual address space will be returned 
.UNINDENT
.UNINDENT

.UNINDENT
.SS Management API
.sp
The management APIs define functions for reconfiguring an FPGA (writing new
partial bitstreams) as well as assigning accelerators to host interfaces.
.SS manage.h
.sp
Functions for managing FPGA configurations. 
.sp
FPGA accelerators can be reprogrammed at run time by providing new partial bitstreams ("green bitstreams"). This file defines API functions for programming green bitstreams as well as for assigning accelerators to host interfaces for more complex deployment setups, such as virtualized systems. 
.sp
Functions
.INDENT 0.0
.TP
.B fpga_result fpgaAssignPortToInterface(fpga_handle \fIfpga\fP, uint32_t \fIinterface_num\fP, uint32_t \fIslot_num\fP, int \fIflags\fP) 
Assign Port to a host interface.
.sp
This function assign Port to a host interface for subsequent use. Only Port that have been assigned to a host interface can be opened by fpgaOpen()\&.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success FPGA_INVALID_PARAM if input parameter combination is not valid. FPGA_EXCEPTION if an exception occcurred accessing the \fBfpga\fP handle. FPGA_NOT_SUPPORTED if driver does not support assignment. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] fpga\fP: Handle to an FPGA object previously opened that both the host interface and the slot belong to 
.IP \(bu 2
\fB[in] interface_num\fP: Host interface number 
.IP \(bu 2
\fB[in] slot_num\fP: Slot number 
.IP \(bu 2
\fB[in] flags\fP: Flags (to be defined) 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaAssignToInterface(fpga_handle \fIfpga\fP, fpga_token \fIaccelerator\fP, uint32_t \fIhost_interface\fP, int \fIflags\fP) 
Assign an accelerator to a host interface
.sp
This function assigns an accelerator to a host interface for subsequent use. Only accelerators that have been assigned to a host interface can be opened by fpgaOpen()\&.
.sp
.INDENT 7.0
.TP
\fBNote\fP
This function is currently not supported.
.TP
\fBReturn\fP
FPGA_OK on success 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] fpga\fP: Handle to an FPGA object previously opened that both the host interface and the accelerator belong to 
.IP \(bu 2
\fB[in] accelerator\fP: accelerator to assign 
.IP \(bu 2
\fB[in] host_interface\fP: Host interface to assign accelerator to 
.IP \(bu 2
\fB[in] flags\fP: Flags (to be defined) 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaReleaseFromInterface(fpga_handle \fIfpga\fP, fpga_token \fIaccelerator\fP) 
Unassign a previously assigned accelerator
.sp
This function removes the assignment of an accelerator to an host interface (e.g. to be later assigned to a different host interface). As a consequence, the accelerator referred to by token \(aqaccelerator\(aq will be reset during the course of this function.
.sp
.INDENT 7.0
.TP
\fBNote\fP
This function is currently not supported.
.TP
\fBReturn\fP
FPGA_OK on success 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] fpga\fP: Handle to an FPGA object previously opened that both the host interface and the accelerator belong to 
.IP \(bu 2
\fB[in] accelerator\fP: accelerator to unassign/release 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaReconfigureSlot(fpga_handle \fIfpga\fP, uint32_t \fIslot\fP, const uint8_t *\fIbitstream\fP, size_t \fIbitstream_len\fP, int \fIflags\fP) 
Reconfigure a slot
.sp
Sends a green bitstream file to an FPGA to reconfigure a specific slot. This call, if successful, will overwrite the currently programmed AFU in that slot with the AFU in the provided bitstream.
.sp
As part of the reconfiguration flow, all accelerators associated with this slot will be unassigned and reset.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if the provided parameters are not valid. FPGA_EXCEPTION if an internal error occurred accessing the handle or while sending the bitstream data to the driver. FPGA_BUSY if the accelerator for the given slot is in use. FPGA_RECONF_ERROR on errors reported by the driver (such as CRC or protocol errors).
.TP
\fBNote\fP
By default, fpgaReconfigureSlot will not allow reconfiguring a slot with an accelerator in use. Add the flag FPGA_RECONF_FORCE to force reconfiguration without checking for accelerators in use. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] fpga\fP: Handle to an FPGA object previously opened 
.IP \(bu 2
\fB[in] slot\fP: Token identifying the slot to reconfigure 
.IP \(bu 2
\fB[in] bitstream\fP: Pointer to memory holding the bitstream 
.IP \(bu 2
\fB[in] bitstream_len\fP: Length of the bitstream in bytes 
.IP \(bu 2
\fB[in] flags\fP: Flags that control behavior of reconfiguration. Value of 0 indicates no flags. FPGA_RECONF_FORCE indicates that the bitstream is programmed into the slot without checking if the resource is currently in use. 
.UNINDENT
.UNINDENT

.UNINDENT
.SS Metrics API
.sp
The metrics APIs define functions for discovery/enumeration of metrics information
and reading metrics values.
.SS metrics.h
.sp
Functions for Discover/ Enumerates metrics and retrieves values. 
.sp
Functions
.INDENT 0.0
.TP
.B fpga_result fpgaGetNumMetrics(fpga_handle \fIhandle\fP, uint64_t *\fInum_metrics\fP) 
Enumerates number of metrics
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_NOT_FOUND if the Metrics are not discovered 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened fpga resource 
.IP \(bu 2
\fB[inout] num_metrics\fP: Number of metrics are discovered in fpga resource
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaGetMetricsInfo(fpga_handle \fIhandle\fP, fpga_metric_info *\fImetric_info\fP, uint64_t *\fInum_metrics\fP) 
Retrieve metrics information
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_NOT_FOUND if the Metrics are not found. FPGA_NO_MEMORY if there was not enough memory to enumerates metrics. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened fpga resource 
.IP \(bu 2
\fB[inout] metric_info\fP: Pointer to array of metric info struct user allocates metrics info array
.IP \(bu 2
\fB[inout] num_metrics\fP: Size of metric info array
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaGetMetricsByIndex(fpga_handle \fIhandle\fP, uint64_t *\fImetric_num\fP, uint64_t \fInum_metric_indexes\fP, fpga_metric *\fImetrics\fP) 
Retrieve metrics values by index
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_NOT_FOUND if the Metrics are not found. FPGA_NO_MEMORY if there was not enough memory to enumerates metrics. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened fpga resource 
.IP \(bu 2
\fB[inout] metric_num\fP: Pointer to array of metric index user allocates metric array 
.IP \(bu 2
\fB[inout] num_metric_indexes\fP: Size of metric array 
.IP \(bu 2
\fB[inout] metrics\fP: pointer to array of metric struct
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaGetMetricsByName(fpga_handle \fIhandle\fP, char **\fImetrics_names\fP, uint64_t \fInum_metric_names\fP, fpga_metric *\fImetrics\fP) 
Retrieve metric values by names
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_NOT_FOUND if the Metrics are not found 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened fpga resource 
.IP \(bu 2
\fB[inout] metrics_names\fP: Pointer to array of metrics name user allocates metrics name array 
.IP \(bu 2
\fB[inout] num_metric_names\fP: Size of metric name array 
.IP \(bu 2
\fB[inout] metrics\fP: Pointer to array of metric struct
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaGetMetricsThresholdInfo(fpga_handle \fIhandle\fP, struct metric_threshold *\fImetric_thresholds\fP, uint32_t *\fInum_thresholds\fP) 
Retrieve metrics / sendor threshold information and values
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_NOT_FOUND if the Metrics are not found. FPGA_NO_MEMORY if there was not enough memory to enumerates metrics. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle to previously opened fpga resource 
.IP \(bu 2
\fB[inout] metrics_threshold\fP: pointer to array of metric thresholds user allocates threshold array memory Number of thresholds returns enumerated thresholds if user pass NULL metrics_thresholds 
.IP \(bu 2
\fB[inout] num_thresholds\fP: number of thresholds
.UNINDENT
.UNINDENT

.UNINDENT
.SS SysObject
.sp
The SysObject API can be used to get system objects by name. Names used with
the SysObject API are driver\-specific and may not be compatible across plugins
and/or drivers. For example, SysObject names used with the xfpga plugin will
apply to the OPAE Linux Kernel driver and refer to sysfs nodes under the sysfs
tree for the resource used with the SysObject API.
.SS sysobject.h
.sp
Functions to read/write from system objects. On Linux systems with the OPAE kernel driver, this is used to access sysfs nodes created by the driver. 
.sp
Functions
.INDENT 0.0
.TP
.B fpga_result fpgaTokenGetObject(fpga_token \fItoken\fP, const char *\fIname\fP, fpga_object *\fIobject\fP, int \fIflags\fP) 
Create an \fBfpga_object\fP data structures. An \fBfpga_object\fP is a handle to an FPGA resource which can be an attribute, register or a container. This object is read\-only. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of the supplied parameters is invalid. FPGA_NOT_FOUND if an object cannot be found with the given key. FPGA_NOT_SUPPORTED if this function is not supported by the current implementation of this API.
.TP
\fBNote\fP
Names that begin with \(aq.\(aq or \(aq/\(aq or contain \(aq..\(aq are not allowed and result in FPGA_INVALID_PARAM being returned 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] token\fP: Token identifying a resource (accelerator or device) 
.IP \(bu 2
\fB[in] name\fP: A key identifying an object belonging to a resource. 
.IP \(bu 2
\fB[out] object\fP: Pointer to memory to store the object in 
.IP \(bu 2
\fB[in] flags\fP: Control behavior of object identification and creation. FPGA_OBJECT_GLOB is used to indicate that the name should be treated as a globbing expression. FPGA_OBJECT_RECURSE_ONE indicates that subobjects be created for objects one level down from the object identified by name. FPGA_OBJECT_RECURSE_ALL indicates that subobjects be created for all objects below the current object identified by name.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaHandleGetObject(fpga_handle \fIhandle\fP, const char *\fIname\fP, fpga_object *\fIobject\fP, int \fIflags\fP) 
Create an \fBfpga_object\fP data structure from a handle. An \fBfpga_object\fP is a handle to an FPGA resource which can be an attribute, register, or container. This object has read/write access.. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of the supplied parameters is invalid. FPGA_NOT_FOUND if an object cannot be found with the given key. FPGA_NOT_SUPPORTED if this function is not supported by the current implementation of this API.
.TP
\fBNote\fP
Names that begin with \(aq.\(aq or \(aq/\(aq or contain \(aq..\(aq are not allowed and result in FPGA_INVALID_PARAM being returned 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: Handle identifying a resource (accelerator or device) 
.IP \(bu 2
\fB[in] name\fP: A key identifying an object belonging to a resource. 
.IP \(bu 2
\fB[out] object\fP: Pointer to memory to store the object in 
.IP \(bu 2
\fB[in] flags\fP: Control behavior of object identification and creation FPGA_OBJECT_GLOB is used to indicate that the name should be treated as a globbing expression. FPGA_OBJECT_RECURSE_ONE indicates that subobjects be created for objects one level down from the object identified by name. FPGA_OBJECT_RECURSE_ALL indicates that subobjects be created for all objects below the current object identified by name.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaObjectGetObject(fpga_object \fIparent\fP, const char *\fIname\fP, fpga_object *\fIobject\fP, int \fIflags\fP) 
Create an \fBfpga_object\fP data structure from a parent object. An \fBfpga_object\fP is a handle to an FPGA resource which can be an attribute, register, or container. If the parent object was created with a handle, then the new object will inherit the handle allowing it to have read\-write access to the object data. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of the supplied parameters is invalid \- this includes a parent object that is not a container object. FPGA_NOT_FOUND if an object cannot be found with the given key. FPGA_NOT_SUPPORTED if this function is not supported by the current implementation of this API.
.TP
\fBNote\fP
Names that begin with \(aq.\(aq or \(aq/\(aq or contain \(aq..\(aq are not allowed and result in FPGA_INVALID_PARAM being returned 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] parent\fP: A parent container \fBfpga_object\fP\&. 
.IP \(bu 2
\fB[in] name\fP: A key identifying a sub\-object of the parent container. 
.IP \(bu 2
\fB[out] object\fP: Pointer to memory to store the object in. 
.IP \(bu 2
\fB[in] flags\fP: Control behavior of object identification and creation. FPGA_OBJECT_GLOB is used to indicate that the name should be treated as a globbing expression. FPGA_OBJECT_RECURSE_ONE indicates that subobjects be created for objects one level down from the object identified by name. FPGA_OBJECT_RECURSE_ALL indicates that subobjects be created for all objects below the current object identified by name.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaObjectGetObjectAt(fpga_object \fIparent\fP, size_t \fIidx\fP, fpga_object *\fIobject\fP) 
Create an \fBfpga_object\fP data structure from a parent object using a given index. An \fBfpga_object\fP is a handle to an FPGA resource which can be an attribute, register, or container. If the parent object was created with a handle, then the new object will inherit the handle allowing it to have read\-write access to the object data. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of the supplied parameters is invalid \- this includes a parent object that is not a container object. FPGA_NOT_FOUND if an object cannot be found with the given key. FPGA_NOT_SUPPORTED if this function is not supported by the current implementation of this API. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] parent\fP: A parent container \(aqfpga_object\(aq 
.IP \(bu 2
\fB[in] idx\fP: A positive index less than the size reported by the parent. 
.IP \(bu 2
\fB[out] object\fP: Pointer to memory to store the object in.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaObjectGetType(fpga_object \fIobj\fP, enum fpga_sysobject_type *\fItype\fP) 
Get the sysobject type (container or attribute) 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success, FPGA_INVALID_PARAM if any of the supplied parameters are null or invalid 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] obj\fP: An fpga_object instance 
.IP \(bu 2
\fB[out] type\fP: The type of object (FPGA_OBJECT_CONTAINER or FPGA_OBJECT_ATTRIBUTE)
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaDestroyObject(fpga_object *\fIobj\fP) 
Free memory used for the fpga_object data structure. 
.sp
.INDENT 7.0
.TP
\fBNote\fP
fpgaDestroyObject() requires the address of an fpga_object as created by fpgaTokenGetObject(), fpgaHandleGetObject(), or fpgaObjectGetObject()\&. Passing any other value results in undefind behavior.
.TP
\fBReturn\fP
FPGA_OK on success, FPGA_INVALID_PARAM if the object is NULL, FPGA_EXCEPTION if an internal error is encountered. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fBobj\fP: Pointer to the fpga_object instance to destroy
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaObjectGetSize(fpga_object \fIobj\fP, uint32_t *\fIvalue\fP, int \fIflags\fP) 
Retrieve the size of the object. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success. FPGA_INVALID_PARAM if any of supplied parameters is invalid. FPGA_EXCEPTION if error occurred. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] obj\fP: An fpga_object instance. 
.IP \(bu 2
\fB[out] value\fP: Pointer to variable to store size in. 
.IP \(bu 2
\fB[in] flags\fP: Flags that control how the object is read If FPGA_OBJECT_SYNC is used then object will update its buffered copy before retrieving the size.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaObjectRead(fpga_object \fIobj\fP, uint8_t *\fIbuffer\fP, size_t \fIoffset\fP, size_t \fIlen\fP, int \fIflags\fP) 
Read bytes from an FPGA object. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success, FPGA_INVALID_PARAM if any of the supplied parameters is invalid 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] obj\fP: An fpga_object instance. 
.IP \(bu 2
\fB[out] buffer\fP: Pointer to a buffer to read bytes into. 
.IP \(bu 2
\fB[in] offset\fP: Byte offset relative to objects internal buffer where to begin reading bytes from. 
.IP \(bu 2
\fB[in] len\fP: The length, in bytes, to read from the object. 
.IP \(bu 2
\fB[in] flags\fP: Flags that control how object is read If FPGA_OBJECT_SYNC is used then object will update its buffered copy before retrieving the data.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaObjectRead64(fpga_object \fIobj\fP, uint64_t *\fIvalue\fP, int \fIflags\fP) 
Read a 64\-bit value from an FPGA object. The value is assumed to be in string format and will be parsed. See flags below for changing that behavior. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success, FPGA_INVALID_PARAM if any of the supplied parameters is invalid 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] obj\fP: An fpga_object instance 
.IP \(bu 2
\fB[out] value\fP: Pointer to a 64\-bit variable to store the value in 
.IP \(bu 2
\fB[in] flags\fP: Flags that control how the object is read If FPGA_OBJECT_SYNC is used then object will update its buffered copy before retrieving the data. If FPGA_OBJECT_RAW is used, then the data will be read as raw bytes into the uint64_t pointer variable.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B fpga_result fpgaObjectWrite64(fpga_object \fIobj\fP, uint64_t \fIvalue\fP, int \fIflags\fP) 
Write 64\-bit value to an FPGA object. The value will be converted to string before writing. See flags below for changing that behavior. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
FPGA_OK on success, FPGA_INVALID_PARAM if any of the supplied parameters is invalid
.TP
\fBNote\fP
The object must have been created using a handle to a resource. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] obj\fP: An fpga_object instance. 
.IP \(bu 2
\fB[in] value\fP: The value to write to the object 
.IP \(bu 2
\fB[in] flags\fP: Flags that control how the object is written If FPGA_OBJECT_RAW is used, then the value will be written as raw bytes.
.UNINDENT
.UNINDENT

.UNINDENT
.SS Utilities
.sp
Functions for mapping fpga_result values to meaningful error strings are
provided by the utilities API.
.SS utils.h
.sp
Utility functions and macros for the FPGA API. 
.sp
Functions
.INDENT 0.0
.TP
.B const char *fpgaErrStr(fpga_result \fIe\fP) 
Return human\-readable error message
.sp
Returns a pointer to a human\-readable error message corresponding to the provided fpga_error error code.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
Pointer to a descriptive error message string 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] e\fP: Error code (as returned by another FPGA API function 
.UNINDENT
.UNINDENT

.UNINDENT
.SS Samples
.sp
Code samples demonstrate how to use OPAE C API.
.SS hello_fpga.c
.sp
A code sample illustrates the basic usage of the OPAE C API. 
.sp
The sample is a host application that demonstrates the basic steps of interacting with FPGA using the OPAE library. These steps include:
.sp
.INDENT 0.0
.IP \(bu 2
FPGA enumeration
.IP \(bu 2
Resource acquiring and releasing
.IP \(bu 2
Managing shared memory buffer
.IP \(bu 2
MMIO read and write
.UNINDENT

.sp
The sample also demonstrates OPAE\(aqs object model, such as tokens, handles, and properties.
.sp
The sample requires a native loopback mode (NLB) test image to be loaded on the FPGA. Refer to \fI\%Quick Start Guide\fP for full instructions on building, configuring, and running this code sample. 
.sp
Defines
.INDENT 0.0
.TP
.B TEST_TIMEOUT 
.UNINDENT
.INDENT 0.0
.TP
.B CL(\fIx\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B LOG2_CL 
.UNINDENT
.INDENT 0.0
.TP
.B MB(\fIx\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B CACHELINE_ALIGNED_ADDR(\fIp\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B LPBK1_BUFFER_SIZE 
.UNINDENT
.INDENT 0.0
.TP
.B LPBK1_BUFFER_ALLOCATION_SIZE 
.UNINDENT
.INDENT 0.0
.TP
.B LPBK1_DSM_SIZE 
.UNINDENT
.INDENT 0.0
.TP
.B CSR_SRC_ADDR 
.UNINDENT
.INDENT 0.0
.TP
.B CSR_DST_ADDR 
.UNINDENT
.INDENT 0.0
.TP
.B CSR_CTL 
.UNINDENT
.INDENT 0.0
.TP
.B CSR_STATUS1 
.UNINDENT
.INDENT 0.0
.TP
.B CSR_CFG 
.UNINDENT
.INDENT 0.0
.TP
.B CSR_NUM_LINES 
.UNINDENT
.INDENT 0.0
.TP
.B DSM_STATUS_TEST_COMPLETE 
.UNINDENT
.INDENT 0.0
.TP
.B CSR_AFU_DSM_BASEL 
.UNINDENT
.INDENT 0.0
.TP
.B NLB0_AFUID 
.UNINDENT
.INDENT 0.0
.TP
.B N3000_AFUID 
.UNINDENT
.INDENT 0.0
.TP
.B FPGA_NLB0_UUID_H 
.UNINDENT
.INDENT 0.0
.TP
.B FPGA_NLB0_UUID_L 
.UNINDENT
.INDENT 0.0
.TP
.B ON_ERR_GOTO(\fIres\fP, \fIlabel\fP, \fIdesc\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B GETOPT_STRING 
.UNINDENT
.sp
Functions
.INDENT 0.0
.TP
.B int usleep(unsigned) 
.UNINDENT
.INDENT 0.0
.TP
.B void print_err(const char *\fIs\fP, fpga_result \fIres\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B fpga_result parse_args(int \fIargc\fP, char *\fIargv\fP[]) 
.UNINDENT
.INDENT 0.0
.TP
.B fpga_result find_fpga(fpga_guid \fIafu_guid\fP, fpga_token *\fIaccelerator_token\fP, uint32_t *\fInum_matches_accelerators\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B fpga_result get_bus(fpga_token \fItok\fP, uint8_t *\fIbus\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B bool probe_for_ase(void) 
.UNINDENT
.INDENT 0.0
.TP
.B fpga_result find_nlb_n3000(fpga_handle \fIaccelerator_handle\fP, uint64_t *\fIafu_baddr\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B int main(int \fIargc\fP, char *\fIargv\fP[]) 
.UNINDENT
.sp
Variables
.INDENT 0.0
.TP
.B struct config config  = {	.target = {		.bus = \-1,	},	.open_flags = 0,	.run_n3000 = 0}
.UNINDENT
.INDENT 0.0
.TP
.B struct cache_line 
.UNINDENT
.INDENT 0.0
.TP
.B struct config 
.sp
Public Members
.INDENT 7.0
.TP
.B struct config::target target 
.UNINDENT
.INDENT 7.0
.TP
.B int open_flags 
.UNINDENT
.INDENT 7.0
.TP
.B int run_n3000 
.UNINDENT
.INDENT 7.0
.TP
.B struct target 
.sp
Public Members
.INDENT 7.0
.TP
.B int bus 
.UNINDENT
.UNINDENT
.UNINDENT
.SS hello_events.c
.sp
A code sample of using OPAE event API. 
.sp
This sample starts two processes. One process injects an artificial fatal error to sysfs; while the other tries to asynchronously capture and handle the event. This sample code exercises all major functions of the event API, including creating and destroying event handles, register and unregister events, polling on event file descriptor, and getting the OS object associated with an event. For a full discussion of OPAE event API, refer to event.h\&. 
.sp
Defines
.INDENT 0.0
.TP
.B FME_SYSFS_INJECT_ERROR 
.UNINDENT
.INDENT 0.0
.TP
.B ON_ERR_GOTO(\fIres\fP, \fIlabel\fP, \fIdesc\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B GETOPT_STRING 
.UNINDENT
.sp
Functions
.INDENT 0.0
.TP
.B int usleep(unsigned) 
.UNINDENT
.INDENT 0.0
.TP
.B void print_err(const char *\fIs\fP, fpga_result \fIres\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B fpga_result inject_ras_fatal_error(fpga_token \fIfme_token\fP, uint8_t \fIerr\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B void *error_thread(void *\fIarg\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B fpga_result parse_args(int \fIargc\fP, char *\fIargv\fP[]) 
.UNINDENT
.INDENT 0.0
.TP
.B fpga_result find_fpga(fpga_token *\fIfpga\fP, uint32_t *\fInum_matches\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B fpga_result get_bus(fpga_token \fItok\fP, uint8_t *\fIbus\fP) 
.UNINDENT
.INDENT 0.0
.TP
.B int main(int \fIargc\fP, char *\fIargv\fP[]) 
.UNINDENT
.sp
Variables
.INDENT 0.0
.TP
.B struct events_config events_config  = {	.target = {		.bus = \-1	}}
.UNINDENT
.INDENT 0.0
.TP
.B struct ras_inject_error 
.sp
Public Members
.INDENT 7.0
.TP
union ras_inject_error::\fB[anonymous]\fP \fB[anonymous]\fP 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B struct events_config 
.sp
Public Members
.INDENT 7.0
.TP
.B struct events_config::target target 
.UNINDENT
.INDENT 7.0
.TP
.B struct target 
.sp
Public Members
.INDENT 7.0
.TP
.B int bus 
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B ras_inject_error.__unnamed__
.
Public Members
.INDENT 7.0
.TP
.B uint64_t csr 
.UNINDENT
.INDENT 7.0
.TP
struct ras_inject_error::\fB[anonymous]\fP::\fB[anonymous]\fP \fB[anonymous]\fP 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B ras_inject_error.__unnamed__.__unnamed__
.
Public Members
.INDENT 7.0
.TP
.B uint64_t catastrophicr_error 
.UNINDENT
.INDENT 7.0
.TP
.B uint64_t fatal_error 
.UNINDENT
.INDENT 7.0
.TP
.B uint64_t nonfatal_error 
.UNINDENT
.INDENT 7.0
.TP
.B uint64_t rsvd 
.UNINDENT
.UNINDENT
.SH OPAE C++ CORE API REFERENCE
.sp
The reference documentation for the OPAE C++ Core API is grouped into the following
sections:
.INDENT 0.0
.IP \(bu 2
\fI\%Overview\fP
.IP \(bu 2
\fI\%Goals\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Simplicity\fP
.IP \(bu 2
\fI\%Extensibility and Interoperability\fP
.IP \(bu 2
\fI\%Modern C++ Coding Practices\fP
.IP \(bu 2
\fI\%Error Handling\fP
.IP \(bu 2
\fI\%Coding Style\fP
.UNINDENT
.IP \(bu 2
\fI\%Fundamental Types\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Properties\fP
.IP \(bu 2
\fI\%pvalue.h\fP
.IP \(bu 2
\fI\%properties.h\fP
.IP \(bu 2
\fI\%Resource Classes\fP
.IP \(bu 2
\fI\%token.h\fP
.IP \(bu 2
\fI\%handle.h\fP
.IP \(bu 2
\fI\%shared_buffer.h\fP
.IP \(bu 2
\fI\%errors.h\fP
.IP \(bu 2
\fI\%events.h\fP
.IP \(bu 2
\fI\%sysobject.h\fP
.IP \(bu 2
\fI\%Exceptions\fP
.IP \(bu 2
\fI\%except.h\fP
.IP \(bu 2
\fI\%Misc\fP
.IP \(bu 2
\fI\%version.h\fP
.UNINDENT
.UNINDENT
.SS Overview
.sp
The OPAE C++ API enables C++ developers with the means to use FPGA resources
by integrating the OPAE software stack into C++ applications.
.SS Goals
.SS Simplicity
.sp
Keep the API as small and lightweight as possible. Although features such as
system validation and orchestration are beyond the scope of this API, using
this API for their development should be relatively easy.
.SS Extensibility and Interoperability
.sp
While keeping to the goal of simplicity, the OPAE C++ API is designed to allow
for better reuse by either extending the API or by integrating with other
languages.
.SS Modern C++ Coding Practices
.sp
The OPAE C++ API uses the C++ 11 standard library and makes use of its features
whenever practical. The OPAE C++ API is also designed to require the minimum
number of third\-party libraries/dependencies.
.SS Error Handling
.sp
The OPAE C++ API is designed to throw exceptions when appropriate. The
structure of OPAE C++ exceptions is similar to the error codes in the
OPAE C API. This gives users of the API more freedom on error handling
while providing better debug information in cases of failure.
.SS Coding Style
.sp
For formatting of the OPAE C++ API complies with most of the recommendations
of the Google C++ style. For example, the OPAE C++ API uses:
.INDENT 0.0
.IP \(bu 2
opening braces on the same line as their scope definition
.IP \(bu 2
spaces instead of tabs for indentation
.IP \(bu 2
indentation of two spaces
.UNINDENT
.SS Fundamental Types
.sp
Basic types for the OPAE C++ API are found in the \fIopae::fpga::types\fP
namespace. They serve as an adapter layer between the OPAE C API and
the OPAE C++ layer. Aside from providing a C++ binding to the C
fundamental types, these types also:
.INDENT 0.0
.IP \(bu 2
manage the lifetime and scope of the corresponding C struct.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
For example a C++ destructor will take care of calling the
appropriate C function to release the data structure being
wrapped.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
provide a friendly syntax for using the OPAE C type.
.UNINDENT
.sp
Most classes in this namespace have a \fIc_type()\fP method that returns
the C data structure being wrapped, making it easy to use the OPAE C++
type with the OPAE C API. Alternatively, most classes in this namespace
have implicit conversion operators that enable interoperability with
the OPAE C API.
.SS Properties
.sp
C++ class \fIproperties\fP wraps \fIfpga_properties\fP and uses \fIpvalue\fP
and \fIguid_t\fP to get and set properties stored in an instance of
an \fIfpga_properties\fP\&. \fIpvalue\fP and \fIguid_t\fP are designed to call
an accessor method in the OPAE C API to either read property
values or write them. Most accessor methods in the OPAE C API
share a similar signature, so \fIpvalue\fP generalizes them into
common operations that translate into calling the corresponding
C API function. \fIguid_t\fP follows similar patterns when reading
or assigning values.
.SS pvalue.h
.INDENT 0.0
.TP
.B namespace opae 
.INDENT 7.0
.TP
.B namespace fpga 
.INDENT 7.0
.TP
.B namespace types 
.INDENT 7.0
.TP
.B struct guid_t 
\fI#include <opae/cxx/core/pvalue.h>\fP
.sp
Representation of the guid member of a properties object. 
.sp
Public Functions
.INDENT 7.0
.TP
.B guid_t(fpga_properties *\fIp\fP) 
Construct the guid_t given its containing fpga_properties. 
.UNINDENT
.INDENT 7.0
.TP
.B void update() 
Update the local cached copy of the guid. 
.UNINDENT
.INDENT 7.0
.TP
.B operator uint8_t*() 
Return a raw pointer to the guid. .INDENT 7.0
.TP
\fBReturn Value\fP
.INDENT 7.0
.IP \(bu 2
\fBnullptr\fP: if the guid could not be queried. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B const uint8_t *c_type() const 
Return a raw pointer to the guid. 
.UNINDENT
.INDENT 7.0
.TP
.B guid_t &operator=(fpga_guid \fIg\fP) 
Assign from fpga_guid Sets the guid field of the associated properties object using the OPAE properties API. .INDENT 7.0
.TP
\fBReturn\fP
a reference to this guid_t\&. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] g\fP: The given fpga_guid. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B bool operator==(const fpga_guid &\fIg\fP) 
Compare contents with an fpga_guid. .INDENT 7.0
.TP
\fBReturn Value\fP
.INDENT 7.0
.IP \(bu 2
\fBThe\fP: result of memcmp of the two objects. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B void parse(const char *\fIstr\fP) 
Convert a string representation of a guid to binary. .INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] str\fP: The guid string. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B bool is_set() const 
Tracks whether the cached local copy of the guid is valid. 
.UNINDENT
.INDENT 7.0
.TP
.B void invalidate() 
Invalidate the cached local copy of the guid. 
.UNINDENT
.sp
Private Members
.INDENT 7.0
.TP
.B fpga_properties *props_ 
.UNINDENT
.INDENT 7.0
.TP
.B bool is_set_ 
.UNINDENT
.INDENT 7.0
.TP
.B std::array<uint8_t, 16> data_ 
.UNINDENT
.sp
Friends
.INDENT 7.0
.TP
.B friend std::ostream &operator<<(std::ostream &\fIostr\fP, const guid_t &\fIg\fP) 
Send the string representation of the guid_t to the given stream. 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B template<typename T> struct pvalue 
\fI#include <opae/cxx/core/pvalue.h>\fP
.sp
Wraps OPAE properties defined in the OPAE C API by associating an \fBfpga_properties\fP reference with the getters and setters defined for a property. 
.sp
.INDENT 7.0
.TP
\fBTemplate Parameters\fP
.INDENT 7.0
.IP \(bu 2
\fBT\fP: The type of the property value being wrapped 
.UNINDENT
.UNINDENT

.sp
Public Types
.INDENT 7.0
.TP
.B typedef std::conditional<std::is_same<T, char*>::value, fpga_result (*)(fpga_properties, T), fpga_result (*)(fpga_properties, T*)>::type getter_t 
Define getter function as getter_t For \fBchar*\fP types, do not use T* as the second argument but instead use T. 
.UNINDENT
.INDENT 7.0
.TP
.B typedef fpga_result (*setter_t)(fpga_properties, T) 
Define the setter function as setter_t. 
.UNINDENT
.INDENT 7.0
.TP
.B typedef std::conditional<std::is_same<T, char*>::value, typename std::string, T>::type copy_t 
Define the type of our copy variable For \fBchar*\fP types use std::string as the copy. 
.UNINDENT
.sp
Public Functions
.INDENT 7.0
.TP
.B pvalue() 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue(fpga_properties *\fIp\fP, getter_t \fIg\fP, setter_t \fIs\fP) 
pvalue contructor that takes in a reference to fpga_properties and corresponding accessor methods for a property 
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fBp\fP: A reference to an fpga_properties 
.IP \(bu 2
\fBg\fP: The getter function 
.IP \(bu 2
\fBs\fP: The setter function 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B pvalue<T> &operator=(const T &\fIv\fP) 
Overload of \fB=\fP operator that calls the wrapped setter. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A reference to itself 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fBv\fP: The value to set
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B bool operator==(const T &\fIother\fP) 
Compare a property for equality with a value. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
Whether or not the property is equal to the value 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fBother\fP: The value being compared to
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B void update() 
.UNINDENT
.INDENT 7.0
.TP
.B operator copy_t() 
Implicit converter operator \- calls the wrapped getter. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The property value after calling the getter or a default value of the value type 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B fpga_result get_value(T &\fIvalue\fP) const 
.UNINDENT
.INDENT 7.0
.TP
.B bool is_set() const 
Tracks whether the cached local copy of the pvalue is valid. 
.UNINDENT
.INDENT 7.0
.TP
.B void invalidate() 
Invalidate the cached local copy of the pvalue. 
.UNINDENT
.INDENT 7.0
.TP
.B void update() 
Template specialization of \fBchar*\fP type property updater. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The result of the property getter function. 
.UNINDENT

.UNINDENT
.sp
Private Members
.INDENT 7.0
.TP
.B fpga_properties *props_ 
.UNINDENT
.INDENT 7.0
.TP
.B bool is_set_ 
.UNINDENT
.INDENT 7.0
.TP
.B getter_t get_ 
.UNINDENT
.INDENT 7.0
.TP
.B setter_t set_ 
.UNINDENT
.INDENT 7.0
.TP
.B copy_t copy_ 
.UNINDENT
.sp
Friends
.INDENT 7.0
.TP
.B friend std::ostream &operator<<(std::ostream &\fIostr\fP, const pvalue<T> &\fIp\fP) 
Stream overalod operator. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The stream operator after streaming the property value 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fBostr\fP: The output stream 
.IP \(bu 2
\fBp\fP: A reference to a pvalue<T> object
.UNINDENT
.UNINDENT

.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS properties.h
.INDENT 0.0
.TP
.B namespace opae 
.INDENT 7.0
.TP
.B namespace fpga 
.INDENT 7.0
.TP
.B namespace types 
.INDENT 7.0
.TP
.B class properties 
\fI#include <opae/cxx/core/properties.h>\fP
.sp
Wraps an OPAE fpga_properties object.
.sp
properties are information describing an accelerator resource that is identified by its token. The properties are used during enumeration to narrow the search for an accelerator resource, and after enumeration to provide the configuration of that resource. 
.sp
Public Types
.INDENT 7.0
.TP
.B typedef std::shared_ptr<properties> ptr_t 
.UNINDENT
.sp
Public Functions
.INDENT 7.0
.TP
.B properties(const properties &\fIp\fP) = delete 
.UNINDENT
.INDENT 7.0
.TP
.B properties &operator=(const properties &\fIp\fP) = delete 
.UNINDENT
.INDENT 7.0
.TP
.B ~properties() 
.UNINDENT
.INDENT 7.0
.TP
.B fpga_properties c_type() const 
Get the underlying fpga_properties object. 
.UNINDENT
.INDENT 7.0
.TP
.B operator fpga_properties() const 
Get the underlying fpga_properties object. 
.UNINDENT
.sp
Public Members
.INDENT 7.0
.TP
.B pvalue<fpga_objtype> type 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint32_t> num_errors 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint16_t> segment 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint8_t> bus 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint8_t> device 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint8_t> function 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint8_t> socket_id 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint32_t> num_slots 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint64_t> bbs_id 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<fpga_version> bbs_version 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint16_t> vendor_id 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint16_t> device_id 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<char*> model 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint64_t> local_memory_size 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint64_t> capabilities 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint32_t> num_mmio 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint32_t> num_interrupts 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<fpga_accelerator_state> accelerator_state 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<uint64_t> object_id 
.UNINDENT
.INDENT 7.0
.TP
.B pvalue<fpga_token> parent 
.UNINDENT
.INDENT 7.0
.TP
.B guid_t guid 
.UNINDENT
.sp
Public Static Functions
.INDENT 7.0
.TP
.B properties::ptr_t get() 
Create a new properties object. .INDENT 7.0
.TP
\fBReturn\fP
A properties smart pointer. 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B properties::ptr_t get(fpga_guid \fIguid_in\fP) 
Create a new properties object from a guid. .INDENT 7.0
.TP
\fBReturn\fP
A properties smart pointer with its guid initialized to guid_in 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fBguid_in\fP: A guid to set in the properties 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B properties::ptr_t get(fpga_objtype \fIobjtype\fP) 
Create a new properties object from an fpga_objtype. .INDENT 7.0
.TP
\fBReturn\fP
A properties smart pointer with its object type set to objtype. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fBobjtype\fP: An object type to set in the properties 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B properties::ptr_t get(std::shared_ptr<token> \fIt\fP) 
Retrieve the properties for a given token object. .INDENT 7.0
.TP
\fBReturn\fP
A properties smart pointer for the given token. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] t\fP: A token identifying the accelerator resource. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B properties::ptr_t get(fpga_token \fIt\fP) 
Retrieve the properties for a given fpga_token. .INDENT 7.0
.TP
\fBReturn\fP
A properties smart pointer for the given fpga_token. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] t\fP: An fpga_token identifying the accelerator resource. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B properties::ptr_t get(std::shared_ptr<handle> \fIh\fP) 
Retrieve the properties for a given handle object. .INDENT 7.0
.TP
\fBReturn\fP
A properties smart pointer for the given handle. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] h\fP: A handle identifying the accelerator resource. 
.UNINDENT
.UNINDENT

.UNINDENT
.sp
Public Static Attributes
.INDENT 7.0
.TP
.B static const std::vector<properties::ptr_t> none 
An empty vector of properties. Useful for enumerating based on a "match all" criteria. 
.UNINDENT
.sp
Private Functions
.INDENT 7.0
.TP
.B properties(bool \fIalloc_props\fP = true) 
.UNINDENT
.sp
Private Members
.INDENT 7.0
.TP
.B fpga_properties props_ 
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Resource Classes
.sp
The \fItoken\fP, \fIhandle\fP, and \fIshared_buffer\fP classes are used to
enumerate and access FPGA resources. \fIproperties\fP are used to
narrow the search space for \fItoken\fP\(aqs. Before enumerating the
accelerator resources in the system, applications can produce
one or more \fIproperties\fP objects whose values are set to the
desired characteristics for the resource. For example, an
application may search for an accelerator resource based on
its guid.
.sp
Once one or more \fItoken\fP\(aqs have been enumerated, the application
must choose which \fItoken\fP\(aqs to request. The \fItoken\fP is then
converted to a \fIhandle\fP by requesting that a \fIhandle\fP object
be allocated and opened for it.
.sp
Once a \fIhandle\fP has been successfully opened, the application
can read and write the associated configuration and status
space. Additionally, the application may use the \fIhandle\fP to
allocate \fIshared_buffer\fP\(aqs or to register \fIevent\fP\(aqs. The
\fIshared_buffer\fP and \fIevent\fP objects retain a reference to
their owning \fIhandle\fP so that the \fIhandle\fP does not lose
scope before freeing the \fIshared_buffer\fP and \fIevent\fP objects.
.SS token.h
.INDENT 0.0
.TP
.B namespace opae 
.INDENT 7.0
.TP
.B namespace fpga 
.INDENT 7.0
.TP
.B namespace types 
.INDENT 7.0
.TP
.B class token 
\fI#include <opae/cxx/core/token.h>\fP
.sp
Wraps the OPAE fpga_token primitive. token\(aqs are created from an enumeration operation that uses properties describing an accelerator resource as search criteria. 
.sp
Public Types
.INDENT 7.0
.TP
.B typedef std::shared_ptr<token> ptr_t 
.UNINDENT
.sp
Public Functions
.INDENT 7.0
.TP
.B ~token() 
.UNINDENT
.INDENT 7.0
.TP
.B fpga_token c_type() const 
Retrieve the underlying fpga_token primitive. 
.UNINDENT
.INDENT 7.0
.TP
.B operator fpga_token() const 
Retrieve the underlying fpga_token primitive. 
.UNINDENT
.sp
Public Static Functions
.INDENT 7.0
.TP
.B std::vector<token::ptr_t> enumerate(const std::vector<properties::ptr_t> &\fIprops\fP) 
Obtain a vector of token smart pointers for given search criteria. .INDENT 7.0
.TP
\fBReturn\fP
A set of known tokens that match the search. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] props\fP: The search criteria. 
.UNINDENT
.UNINDENT

.UNINDENT
.sp
Private Functions
.INDENT 7.0
.TP
.B token(fpga_token \fItok\fP) 
.UNINDENT
.sp
Private Members
.INDENT 7.0
.TP
.B fpga_token token_ 
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS handle.h
.INDENT 0.0
.TP
.B namespace opae 
.INDENT 7.0
.TP
.B namespace fpga 
.INDENT 7.0
.TP
.B namespace types 
.INDENT 7.0
.TP
.B class handle 
\fI#include <opae/cxx/core/handle.h>\fP
.sp
An allocated accelerator resource
.sp
Represents an accelerator resource that has been allocated by OPAE. Depending on the type of resource, its register space may be read/written using a handle object. 
.sp
Public Types
.INDENT 7.0
.TP
.B typedef std::shared_ptr<handle> ptr_t 
.UNINDENT
.sp
Public Functions
.INDENT 7.0
.TP
.B handle(const handle&) = delete 
.UNINDENT
.INDENT 7.0
.TP
.B handle &operator=(const handle&) = delete 
.UNINDENT
.INDENT 7.0
.TP
.B ~handle() 
.UNINDENT
.INDENT 7.0
.TP
.B fpga_handle c_type() const 
Retrieve the underlying OPAE handle. 
.UNINDENT
.INDENT 7.0
.TP
.B operator fpga_handle() const 
Retrieve the underlying OPAE handle. 
.UNINDENT
.INDENT 7.0
.TP
.B void reconfigure(uint32_t \fIslot\fP, const uint8_t *\fIbitstream\fP, size_t \fIsize\fP, int \fIflags\fP) 
Load a bitstream into an FPGA slot. 
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fBslot\fP: The slot number to program 
.IP \(bu 2
\fBbitstream\fP: The bitstream binary data 
.IP \(bu 2
\fBsize\fP: The size of the bitstream 
.IP \(bu 2
\fBflags\fP: Flags that control behavior of reconfiguration. Value of 0 indicates no flags. FPGA_RECONF_FORCE indicates that the bitstream is programmed into the slot without checking if the resource is currently in use.
.UNINDENT
.TP
\fBExceptions\fP
.INDENT 7.0
.IP \(bu 2
\fBinvalid_param\fP: if the handle is not an FPGA device handle or if the other parameters are not valid. 
.IP \(bu 2
\fBexception\fP: if an internal error is encountered. 
.IP \(bu 2
\fBbusy\fP: if the accelerator for the given slot is in use. 
.IP \(bu 2
\fBreconf_error\fP: if errors are reported by the driver (CRC or protocol errors). 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B uint32_t read_csr32(uint64_t \fIoffset\fP, uint32_t \fIcsr_space\fP = 0) const 
Read 32 bits from a CSR belonging to a resource associated with a handle. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The 32\-bit value read from the CSR 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] offset\fP: The register offset 
.IP \(bu 2
\fB[in] csr_space\fP: The CSR space to read from. Default is 0.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B void write_csr32(uint64_t \fIoffset\fP, uint32_t \fIvalue\fP, uint32_t \fIcsr_space\fP = 0) 
Write 32 bit to a CSR belonging to a resource associated with a handle. 
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] offset\fP: The register offset. 
.IP \(bu 2
\fB[in] value\fP: The 32\-bit value to write to the register. 
.IP \(bu 2
\fB[in] csr_space\fP: The CSR space to read from. Default is 0. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B uint64_t read_csr64(uint64_t \fIoffset\fP, uint32_t \fIcsr_space\fP = 0) const 
Read 64 bits from a CSR belonging to a resource associated with a handle. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The 64\-bit value read from the CSR 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] offset\fP: The register offset 
.IP \(bu 2
\fB[in] csr_space\fP: The CSR space to read from. Default is 0.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B void write_csr64(uint64_t \fIoffset\fP, uint64_t \fIvalue\fP, uint32_t \fIcsr_space\fP = 0) 
Write 64 bits to a CSR belonging to a resource associated with a handle. 
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] offset\fP: The register offset. 
.IP \(bu 2
\fB[in] value\fP: The 64\-bit value to write to the register. 
.IP \(bu 2
\fB[in] csr_space\fP: The CSR space to read from. Default is 0. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B void write_csr512(uint64_t \fIoffset\fP, const void *\fIvalue\fP, uint32_t \fIcsr_space\fP = 0) 
Write 512 bits to a CSR belonging to a resource associated with a handle. 
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] offset\fP: The register offset. 
.IP \(bu 2
\fB[in] value\fP: Pointer to the 512\-bit value to write to the register. 
.IP \(bu 2
\fB[in] csr_space\fP: The CSR space to read from. Default is 0. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B uint8_t *mmio_ptr(uint64_t \fIoffset\fP, uint32_t \fIcsr_space\fP = 0) const 
Retrieve a pointer to the MMIO region. .INDENT 7.0
.TP
\fBReturn\fP
MMIO base + offset 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] offset\fP: The byte offset to add to MMIO base. 
.IP \(bu 2
\fB[in] csr_space\fP: The desired CSR space. Default is 0. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B void reset() 
Reset the accelerator identified by this handle 
.UNINDENT
.INDENT 7.0
.TP
.B fpga_result close() 
Close an accelerator resource (if opened)
.sp
.INDENT 7.0
.TP
\fBReturn\fP
fpga_result indication the result of closing the handle or FPGA_EXCEPTION if handle is not opened
.TP
\fBNote\fP
This is available for explicitly closing a handle. The destructor for handle will call close. 
.UNINDENT

.UNINDENT
.sp
Public Static Functions
.INDENT 7.0
.TP
.B handle::ptr_t open(fpga_token \fItoken\fP, int \fIflags\fP) 
Open an accelerator resource, given a raw fpga_token
.sp
.INDENT 7.0
.TP
\fBReturn\fP
pointer to the mmio base + offset for the given csr space 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] token\fP: A token describing the accelerator resource to be allocated.
.IP \(bu 2
\fB[in] flags\fP: The flags parameter to fpgaOpen()\&.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B handle::ptr_t open(token::ptr_t \fItoken\fP, int \fIflags\fP) 
Open an accelerator resource, given a token object
.sp
.INDENT 7.0
.TP
\fBReturn\fP
shared ptr to a handle object 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] token\fP: A token object describing the accelerator resource to be allocated.
.IP \(bu 2
\fB[in] flags\fP: The flags parameter to fpgaOpen()\&.
.UNINDENT
.UNINDENT

.UNINDENT
.sp
Private Functions
.INDENT 7.0
.TP
.B handle(fpga_handle \fIh\fP) 
.UNINDENT
.sp
Private Members
.INDENT 7.0
.TP
.B fpga_handle handle_ 
.UNINDENT
.INDENT 7.0
.TP
.B fpga_token token_ 
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS shared_buffer.h
.INDENT 0.0
.TP
.B namespace opae 
.INDENT 7.0
.TP
.B namespace fpga 
.INDENT 7.0
.TP
.B namespace types 
.INDENT 7.0
.TP
.B class shared_buffer 
\fI#include <opae/cxx/core/shared_buffer.h>\fP
.sp
Host/AFU shared memory blocks
.sp
shared_buffer abstracts a memory block that may be shared between the host cpu and an accelerator. The block may be allocated by the shared_buffer class itself (see allocate), or it may be allocated elsewhere and then attached to a shared_buffer object via attach. 
.sp
Public Types
.INDENT 7.0
.TP
.B typedef std::size_t size_t 
.UNINDENT
.INDENT 7.0
.TP
.B typedef std::shared_ptr<shared_buffer> ptr_t 
.UNINDENT
.sp
Public Functions
.INDENT 7.0
.TP
.B shared_buffer(const shared_buffer&) = delete 
.UNINDENT
.INDENT 7.0
.TP
.B shared_buffer &operator=(const shared_buffer&) = delete 
.UNINDENT
.INDENT 7.0
.TP
.B ~shared_buffer() 
shared_buffer destructor. 
.UNINDENT
.INDENT 7.0
.TP
.B void release() 
Disassociate the shared_buffer object from the resource used to create it. If the buffer was allocated using the allocate function then the buffer is freed. 
.UNINDENT
.INDENT 7.0
.TP
.B uint8_t *c_type() const 
Retrieve the virtual address of the buffer base.
.sp
.INDENT 7.0
.TP
\fBNote\fP
Instances of a shared buffer can only be created using either \(aqallocate\(aq or \(aqattach\(aq static factory function. Because these functions return a shared pointer (std::shared_ptr) to the instance, references to an instance are counted automatically by design of the shared_ptr class. Calling \(aqc_type()\(aq function is provided to get access to the raw data but isn\(aqt used in tracking its reference count. Assigning this to a variable should be done in limited scopes as this variable can be defined in an outer scope and may outlive the shared_buffer object. Once the reference count in the shared_ptr reaches zero, the shared_buffer object will be released and deallocated, turning any variables assigned from a call to \(aqc_type()\(aq into dangling pointers. 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B handle::ptr_t owner() const 
Retrieve the handle smart pointer associated with this buffer. 
.UNINDENT
.INDENT 7.0
.TP
.B size_t size() const 
Retrieve the length of the buffer in bytes. 
.UNINDENT
.INDENT 7.0
.TP
.B uint64_t wsid() const 
Retrieve the underlying buffer\(aqs workspace id. 
.UNINDENT
.INDENT 7.0
.TP
.B uint64_t io_address() const 
Retrieve the address of the buffer suitable for programming into the accelerator device. 
.UNINDENT
.INDENT 7.0
.TP
.B void fill(int \fIc\fP) 
Write c to each byte location in the buffer. 
.UNINDENT
.INDENT 7.0
.TP
.B int compare(ptr_t \fIother\fP, size_t \fIlen\fP) const 
Compare this shared_buffer (the first len bytes) to that held in other, using memcmp(). 
.UNINDENT
.INDENT 7.0
.TP
.B template<typename T> T read(size_t \fIoffset\fP) const 
Read a T\-sized block of memory at the given location. .INDENT 7.0
.TP
\fBReturn\fP
A T from buffer base + offset. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] offset\fP: The byte offset from the start of the buffer. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B template<typename T> void write(const T &\fIvalue\fP, size_t \fIoffset\fP) 
Write a T\-sized block of memory to the given location. .INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] value\fP: The value to write. 
.IP \(bu 2
\fB[in] offset\fP: The byte offset from the start of the buffer. 
.UNINDENT
.UNINDENT

.UNINDENT
.sp
Public Static Functions
.INDENT 7.0
.TP
.B shared_buffer::ptr_t allocate(handle::ptr_t \fIhandle\fP, size_t \fIlen\fP, bool \fIread_only\fP = false) 
shared_buffer factory method \- allocate a shared_buffer\&. .INDENT 7.0
.TP
\fBReturn\fP
A valid shared_buffer smart pointer on success, or an empty smart pointer on failure. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: The handle used to allocate the buffer. 
.IP \(bu 2
\fB[in] len\fP: The length in bytes of the requested buffer. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B shared_buffer::ptr_t attach(handle::ptr_t \fIhandle\fP, uint8_t *\fIbase\fP, size_t \fIlen\fP, bool \fIread_only\fP = false) 
Attach a pre\-allocated buffer to a shared_buffer object.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A valid shared_buffer smart pointer on success, or an empty smart pointer on failure. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] handle\fP: The handle used to attach the buffer. 
.IP \(bu 2
\fB[in] base\fP: The base of the pre\-allocated memory. 
.IP \(bu 2
\fB[in] len\fP: The size of the pre\-allocated memory, which must be a multiple of the page size. 
.UNINDENT
.UNINDENT

.UNINDENT
.sp
Protected Functions
.INDENT 7.0
.TP
.B shared_buffer(handle::ptr_t \fIhandle\fP, size_t \fIlen\fP, uint8_t *\fIvirt\fP, uint64_t \fIwsid\fP, uint64_t \fIio_address\fP) 
.UNINDENT
.sp
Protected Attributes
.INDENT 7.0
.TP
.B handle::ptr_t handle_ 
.UNINDENT
.INDENT 7.0
.TP
.B size_t len_ 
.UNINDENT
.INDENT 7.0
.TP
.B uint8_t *virt_ 
.UNINDENT
.INDENT 7.0
.TP
.B uint64_t wsid_ 
.UNINDENT
.INDENT 7.0
.TP
.B uint64_t io_address_ 
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS errors.h
.INDENT 0.0
.TP
.B namespace opae 
.INDENT 7.0
.TP
.B namespace fpga 
.INDENT 7.0
.TP
.B namespace types 
.INDENT 7.0
.TP
.B class error 
\fI#include <opae/cxx/core/errors.h>\fP
.sp
An error object represents an error register for a resource. This is used to read out the raw value in the register. No parsing is done by this class. 
.sp
Public Types
.INDENT 7.0
.TP
.B typedef std::shared_ptr<error> ptr_t 
.UNINDENT
.sp
Public Functions
.INDENT 7.0
.TP
.B error(const error &\fIe\fP) = delete 
.UNINDENT
.INDENT 7.0
.TP
.B error &operator=(const error &\fIe\fP) = delete 
.UNINDENT
.INDENT 7.0
.TP
.B std::string name() 
Get the error register name. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A std::string object set to the error name. 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B bool can_clear() 
Indicates whether an error register can be cleared. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A boolean value indicating if the error register can be cleared. 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B uint64_t read_value() 
Read the raw value contained in the associated error register. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A 64\-bit value (unparsed) read from the error register 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B ~error() 
.UNINDENT
.INDENT 7.0
.TP
.B fpga_error_info c_type() const 
Get the C data structure. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The fpga_error_info that contains the name and the can_clear boolean. 
.UNINDENT

.UNINDENT
.sp
Public Static Functions
.INDENT 7.0
.TP
.B error::ptr_t get(token::ptr_t \fItok\fP, uint32_t \fInum\fP) 
Factory function for creating an error object. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A shared_ptr containing the error object 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fBtok\fP: The token object representing a resource. 
.IP \(bu 2
\fBnum\fP: The index of the error register. This must be lower than the num_errors property of the resource.
.UNINDENT
.UNINDENT

.UNINDENT
.sp
Private Functions
.INDENT 7.0
.TP
.B error(token::ptr_t \fItoken\fP, uint32_t \fInum\fP) 
.UNINDENT
.sp
Private Members
.INDENT 7.0
.TP
.B token::ptr_t token_ 
.UNINDENT
.INDENT 7.0
.TP
.B fpga_error_info error_info_ 
.UNINDENT
.INDENT 7.0
.TP
.B uint32_t error_num_ 
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS events.h
.INDENT 0.0
.TP
.B namespace opae 
.INDENT 7.0
.TP
.B namespace fpga 
.INDENT 7.0
.TP
.B namespace types 
.INDENT 7.0
.TP
.B class event 
\fI#include <opae/cxx/core/events.h>\fP
.sp
Wraps fpga event routines in OPAE C. 
.sp
Public Types
.INDENT 7.0
.TP
.B typedef std::shared_ptr<event> ptr_t 
.UNINDENT
.sp
Public Functions
.INDENT 7.0
.TP
.B ~event() 
Destroy event and associated resources. 
.UNINDENT
.INDENT 7.0
.TP
.B fpga_event_handle get() 
Get the fpga_event_handle contained in this object. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The fpga_event_handle contained in this object 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B operator fpga_event_handle() 
Coversion operator for converting to fpga_event_handle objects. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The fpga_event_handle contained in this object 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B int os_object() const 
Get OS Object from the event object. 
.sp
Get an OS specific object from the event which can be used to subscribe for events. On Linux, the object corresponds to a file descriptor that can be used with select/poll/epoll calls.
.sp
.INDENT 7.0
.TP
\fBReturn\fP
An integer object representing the OS object 
.UNINDENT

.UNINDENT
.sp
Public Static Functions
.INDENT 7.0
.TP
.B event::ptr_t register_event(handle::ptr_t \fIh\fP, event::type_t \fIt\fP, int \fIflags\fP = 0) 
Factory function to create event objects. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A shared ptr to an event object 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fBh\fP: A shared ptr of a resource handle 
.IP \(bu 2
\fBt\fP: The resource type 
.IP \(bu 2
\fBflags\fP: Event registration flags passed on to fpgaRegisterEvent
.UNINDENT
.UNINDENT

.UNINDENT
.sp
Private Functions
.INDENT 7.0
.TP
.B event(handle::ptr_t \fIh\fP, event::type_t \fIt\fP, fpga_event_handle \fIevent_h\fP) 
.UNINDENT
.sp
Private Members
.INDENT 7.0
.TP
.B handle::ptr_t handle_ 
.UNINDENT
.INDENT 7.0
.TP
.B event::type_t type_ 
.UNINDENT
.INDENT 7.0
.TP
.B fpga_event_handle event_handle_ 
.UNINDENT
.INDENT 7.0
.TP
.B int os_object_ 
.UNINDENT
.INDENT 7.0
.TP
.B struct type_t 
\fI#include <opae/cxx/core/events.h>\fP
.sp
C++ struct that is interchangeable with fpga_event_type enum. 
.sp
Public Functions
.INDENT 7.0
.TP
.B type_t(fpga_event_type \fIc_type\fP) 
.UNINDENT
.INDENT 7.0
.TP
.B operator fpga_event_type() 
.UNINDENT
.sp
Public Static Attributes
.INDENT 7.0
.TP
.B constexpr fpga_event_type interrupt = FPGA_EVENT_INTERRUPT 
.UNINDENT
.INDENT 7.0
.TP
.B constexpr fpga_event_type error = FPGA_EVENT_ERROR 
.UNINDENT
.INDENT 7.0
.TP
.B constexpr fpga_event_type power_thermal = FPGA_EVENT_POWER_THERMAL 
.UNINDENT
.sp
Private Members
.INDENT 7.0
.TP
.B fpga_event_type type_ 
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS sysobject.h
.INDENT 0.0
.TP
.B namespace opae 
.INDENT 7.0
.TP
.B namespace fpga 
.INDENT 7.0
.TP
.B namespace types 
.INDENT 7.0
.TP
.B class sysobject 
\fI#include <opae/cxx/core/sysobject.h>\fP
.sp
Wraps the OPAE fpga_object primitive. sysobject\(aqs are created from a call to fpgaTokenGetObject, fpgaHandleGetObject, or fpgaObjectGetObject 
.sp
Public Types
.INDENT 7.0
.TP
.B typedef std::shared_ptr<sysobject> ptr_t 
.UNINDENT
.sp
Public Functions
.INDENT 7.0
.TP
.B sysobject() = delete 
.UNINDENT
.INDENT 7.0
.TP
.B sysobject(const sysobject &\fIo\fP) = delete 
.UNINDENT
.INDENT 7.0
.TP
.B sysobject &operator=(const sysobject &\fIo\fP) = delete 
.UNINDENT
.INDENT 7.0
.TP
.B sysobject::ptr_t get(const std::string &\fIname\fP, int \fIflags\fP = 0) 
Get a sysobject from an object. This will be read\-write if its parent was created from a handle.. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A shared_ptr to a sysobject instance. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] name\fP: An identifier representing an object belonging to this object. 
.IP \(bu 2
\fB[in] flags\fP: Control behavior of object identification and creation. FPGA_OBJECT_GLOB is used to indicate that the name should be treated as a globbing expression. FPGA_OBJECT_RECURSE_ONE indicates that subobjects be created for objects one level down from the object identified by name. FPGA_OBJECT_RECURSE_ALL indicates that subobjects be created for all objects. Flags are defaulted to 0 meaning no flags.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B sysobject::ptr_t get(int \fIindex\fP) 
Get a sysobject from a container object. This will be read\-write if its parent was created from a handle.. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A shared_ptr to a sysobject instance. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] index\fP: An index number to get.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B ~sysobject() 
.UNINDENT
.INDENT 7.0
.TP
.B uint32_t size() const 
Get the size (in bytes) of the object. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The number of bytes that the object occupies in memory. 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B uint64_t read64(int \fIflags\fP = 0) const 
Read a 64\-bit value from an FPGA object. The value is assumed to be in string format and will be parsed. See flags below for changing that behavior. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A 64\-bit value from the object. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] flags\fP: Flags that control how the object is read If FPGA_OBJECT_SYNC is used then object will update its buffered copy before retrieving the data. If FPGA_OBJECT_RAW is used, then the data will be read as raw bytes into the uint64_t pointer variable. Flags are defaulted to 0 meaning no flags.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B void write64(uint64_t \fIvalue\fP, int \fIflags\fP = 0) const 
Write 64\-bit value to an FPGA object. The value will be converted to string before writing. See flags below for changing that behavior. 
.sp
.INDENT 7.0
.TP
\fBNote\fP
This operation will force a sync operation to update its cached buffer 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] value\fP: The value to write to the object. 
.IP \(bu 2
\fB[in] flags\fP: Flags that control how the object is written If FPGA_OBJECT_RAW is used, then the value will be written as raw bytes. Flags are defaulted to 0 meaning no flags.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B std::vector<uint8_t> bytes(int \fIflags\fP = 0) const 
Get all raw bytes from the object. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A vector of all bytes in the object. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] flags\fP: Flags that control how object is read If FPGA_OBJECT_SYNC is used then object will update its buffered copy before retrieving the data.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B std::vector<uint8_t> bytes(uint32_t \fIoffset\fP, uint32_t \fIsize\fP, int \fIflags\fP = 0) const 
Get a subset of raw bytes from the object. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A vector of size bytes in the object starting at offset. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] offset\fP: The bytes offset for the start of the returned vector. 
.IP \(bu 2
\fB[in] size\fP: The number of bytes for the returned vector. 
.IP \(bu 2
\fB[in] flags\fP: Flags that control how object is read If FPGA_OBJECT_SYNC is used then object will update its buffered copy before retrieving the data.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B enum fpga_sysobject_type type() const 
Get the object type (attribute or container) 
.UNINDENT
.INDENT 7.0
.TP
.B fpga_object c_type() const 
Retrieve the underlying fpga_object primitive. 
.UNINDENT
.INDENT 7.0
.TP
.B operator fpga_object() const 
Retrieve the underlying fpga_object primitive. 
.UNINDENT
.sp
Public Static Functions
.INDENT 7.0
.TP
.B sysobject::ptr_t get(token::ptr_t \fIt\fP, const std::string &\fIname\fP, int \fIflags\fP = 0) 
Get a sysobject from a token. This will be read\-only. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A shared_ptr to a sysobject instance. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] t\fP: Token object representing a resource. 
.IP \(bu 2
\fB[in] name\fP: An identifier representing an object belonging to a resource represented by the token. 
.IP \(bu 2
\fB[in] flags\fP: Control behavior of object identification and creation. FPGA_OBJECT_GLOB is used to indicate that the name should be treated as a globbing expression. FPGA_OBJECT_RECURSE_ONE indicates that subobjects be created for objects one level down from the object identified by name. FPGA_OBJECT_RECURSE_ALL indicates that subobjects be created for all objects below the current object identified by name.
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B sysobject::ptr_t get(handle::ptr_t \fIh\fP, const std::string &\fIname\fP, int \fIflags\fP = 0) 
Get a sysobject from a handle. This will be read\-write. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
A shared_ptr to a sysobject instance. 
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] h\fP: Handle object representing an open resource. 
.IP \(bu 2
\fB[in] name\fP: An identifier representing an object belonging to a resource represented by the handle. 
.IP \(bu 2
\fB[in] flags\fP: Control behavior of object identification and creation. FPGA_OBJECT_GLOB is used to indicate that the name should be treated as a globbing expression. FPGA_OBJECT_RECURSE_ONE indicates that subobjects be created for objects one level down from the object identified by name. FPGA_OBJECT_RECURSE_ALL indicates that subobjects be created for all objects below the current object identified by name.
.UNINDENT
.UNINDENT

.UNINDENT
.sp
Private Functions
.INDENT 7.0
.TP
.B sysobject(fpga_object \fIsysobj\fP, token::ptr_t \fItoken\fP, handle::ptr_t \fIhnd\fP) 
.UNINDENT
.sp
Private Members
.INDENT 7.0
.TP
.B fpga_object sysobject_ 
.UNINDENT
.INDENT 7.0
.TP
.B token::ptr_t token_ 
.UNINDENT
.INDENT 7.0
.TP
.B handle::ptr_t handle_ 
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Exceptions
.sp
When the OPAE C++ API encounters an error from the OPAE C
API, it captures the current source code location and
the error code into an object of type \fIexcept\fP, then
throws the \fIexcept\fP\&. Applications should implement the
appropriate catch blocks required to respond to runtime
exceptions.
.SS except.h
.sp
Defines
.INDENT 0.0
.TP
.B OPAECXX_HERE 
Construct a src_location object for the current source line. 
.UNINDENT
.INDENT 0.0
.TP
.B ASSERT_FPGA_OK(\fIr\fP) 
Macro to check of result is FPGA_OK If not, throw exception that corresponds to the result code. 
.UNINDENT
.INDENT 0.0
.TP
.B namespace opae 
.INDENT 7.0
.TP
.B namespace fpga 
.INDENT 7.0
.TP
.B namespace types 
.INDENT 7.0
.TP
.B class busy : public opae::fpga::types::except 
\fI#include <opae/cxx/core/except.h>\fP
.sp
busy exception
.sp
busy tracks the source line of origin for exceptions thrown when the error code FPGA_BUSY is returned from a call to an OPAE C API function 
.sp
Public Functions
.INDENT 7.0
.TP
.B busy(src_location \fIloc\fP) noexcept 
busy constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class except : public std::exception 
\fI#include <opae/cxx/core/except.h>\fP
.sp
Generic OPAE exception
.sp
An except tracks the source line of origin and an optional fpga_result. If no fpga_result is given, then FPGA_EXCEPTION is used. 
.sp
Subclassed by opae::fpga::types::busy, opae::fpga::types::exception, opae::fpga::types::invalid_param, opae::fpga::types::no_access, opae::fpga::types::no_daemon, opae::fpga::types::no_driver, opae::fpga::types::no_memory, opae::fpga::types::not_found, opae::fpga::types::not_supported, opae::fpga::types::reconf_error
.sp
Public Functions
.INDENT 7.0
.TP
.B except(src_location \fIloc\fP) noexcept 
except constructor The fpga_result value is FPGA_EXCEPTION.
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B except(fpga_result \fIres\fP, src_location \fIloc\fP) noexcept 
except constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] res\fP: The fpga_result value associated with this exception. 
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B except(fpga_result \fIres\fP, const char *\fImsg\fP, src_location \fIloc\fP) noexcept 
except constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] res\fP: The fpga_result value associated with this exception. 
.IP \(bu 2
\fB[in] msg\fP: The error message as a string 
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B const char *what() const noexcept override 
Convert this except to an informative string. 
.UNINDENT
.INDENT 7.0
.TP
.B operator fpga_result() const noexcept 
Convert this except to its fpga_result. 
.UNINDENT
.sp
Public Static Attributes
.INDENT 7.0
.TP
.B const std::size_t MAX_EXCEPT = 256 
.UNINDENT
.sp
Protected Attributes
.INDENT 7.0
.TP
.B fpga_result res_ 
.UNINDENT
.INDENT 7.0
.TP
.B const char *msg_ 
.UNINDENT
.INDENT 7.0
.TP
.B src_location loc_ 
.UNINDENT
.INDENT 7.0
.TP
.B char buf_[MAX_EXCEPT] 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class exception : public opae::fpga::types::except 
\fI#include <opae/cxx/core/except.h>\fP
.sp
exception exception
.sp
exception tracks the source line of origin for exceptions thrown when the error code FPGA_EXCEPTION is returned from a call to an OPAE C API function 
.sp
Public Functions
.INDENT 7.0
.TP
.B exception(src_location \fIloc\fP) noexcept 
exception constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class invalid_param : public opae::fpga::types::except 
\fI#include <opae/cxx/core/except.h>\fP
.sp
invalid_param exception
.sp
invalid_param tracks the source line of origin for exceptions thrown when the error code FPGA_INVALID_PARAM is returned from a call to an OPAE C API function 
.sp
Public Functions
.INDENT 7.0
.TP
.B invalid_param(src_location \fIloc\fP) noexcept 
invalid_param constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class no_access : public opae::fpga::types::except 
\fI#include <opae/cxx/core/except.h>\fP
.sp
no_access exception
.sp
no_access tracks the source line of origin for exceptions thrown when the error code FPGA_NO_ACCESS is returned from a call to an OPAE C API function 
.sp
Public Functions
.INDENT 7.0
.TP
.B no_access(src_location \fIloc\fP) noexcept 
no_access constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class no_daemon : public opae::fpga::types::except 
\fI#include <opae/cxx/core/except.h>\fP
.sp
no_daemon exception
.sp
no_daemon tracks the source line of origin for exceptions thrown when the error code FPGA_NO_DAEMON is returned from a call to an OPAE C API function 
.sp
Public Functions
.INDENT 7.0
.TP
.B no_daemon(src_location \fIloc\fP) noexcept 
no_daemon constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class no_driver : public opae::fpga::types::except 
\fI#include <opae/cxx/core/except.h>\fP
.sp
no_driver exception
.sp
no_driver tracks the source line of origin for exceptions thrown when the error code FPGA_NO_DRIVER is returned from a call to an OPAE C API function 
.sp
Public Functions
.INDENT 7.0
.TP
.B no_driver(src_location \fIloc\fP) noexcept 
no_driver constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class no_memory : public opae::fpga::types::except 
\fI#include <opae/cxx/core/except.h>\fP
.sp
no_memory exception
.sp
no_memory tracks the source line of origin for exceptions thrown when the error code FPGA_NO_MEMORY is returned from a call to an OPAE C API function 
.sp
Public Functions
.INDENT 7.0
.TP
.B no_memory(src_location \fIloc\fP) noexcept 
no_memory constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class not_found : public opae::fpga::types::except 
\fI#include <opae/cxx/core/except.h>\fP
.sp
not_found exception
.sp
not_found tracks the source line of origin for exceptions thrown when the error code FPGA_NOT_FOUND is returned from a call to an OPAE C API function 
.sp
Public Functions
.INDENT 7.0
.TP
.B not_found(src_location \fIloc\fP) noexcept 
not_found constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class not_supported : public opae::fpga::types::except 
\fI#include <opae/cxx/core/except.h>\fP
.sp
not_supported exception
.sp
not_supported tracks the source line of origin for exceptions thrown when the error code FPGA_NOT_SUPPORTED is returned from a call to an OPAE C API function 
.sp
Public Functions
.INDENT 7.0
.TP
.B not_supported(src_location \fIloc\fP) noexcept 
not_supported constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class reconf_error : public opae::fpga::types::except 
\fI#include <opae/cxx/core/except.h>\fP
.sp
reconf_error exception
.sp
reconf_error tracks the source line of origin for exceptions thrown when the error code FPGA_RECONF_ERROR is returned from a call to an OPAE C API function 
.sp
Public Functions
.INDENT 7.0
.TP
.B reconf_error(src_location \fIloc\fP) noexcept 
reconf_error constructor
.sp
.INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] loc\fP: Location where the exception was constructed. 
.UNINDENT
.UNINDENT

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class src_location 
\fI#include <opae/cxx/core/except.h>\fP
.sp
Identify a particular line in a source file. 
.sp
Public Functions
.INDENT 7.0
.TP
.B src_location(const char *\fIfile\fP, const char *\fIfn\fP, int \fIline\fP) noexcept 
src_location constructor .INDENT 7.0
.TP
\fBParameters\fP
.INDENT 7.0
.IP \(bu 2
\fB[in] file\fP: The source file name, typically \fBFILE\fP\&. 
.IP \(bu 2
\fB[in] fn\fP: The current function, typically \fBfunc\fP\&. 
.IP \(bu 2
\fB[in] line\fP: The current line number, typically \fBLINE\fP\&. 
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B src_location(const src_location &\fIother\fP) noexcept 
.UNINDENT
.INDENT 7.0
.TP
.B src_location &operator=(const src_location &\fIother\fP) noexcept 
.UNINDENT
.INDENT 7.0
.TP
.B const char *file() const noexcept 
Retrieve the file name component of the location. 
.UNINDENT
.INDENT 7.0
.TP
.B const char *fn() const noexcept 
Retrieve the function name component of the location. 
.UNINDENT
.INDENT 7.0
.TP
.B int line() const noexcept 
Retrieve the line number component of the location. 
.UNINDENT
.sp
Private Members
.INDENT 7.0
.TP
.B const char *file_ 
.UNINDENT
.INDENT 7.0
.TP
.B const char *fn_ 
.UNINDENT
.INDENT 7.0
.TP
.B int line_ 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B namespace detail 
.sp
Typedefs
.INDENT 7.0
.TP
.B typedef bool (*exception_fn)(fpga_result, const opae::fpga::types::src_location &loc) 
typedef function pointer that returns bool if result is FPGA_OK 
.UNINDENT
.sp
Functions
.INDENT 7.0
.TP
.B template<typename T> constexpr bool is_ok(fpga_result \fIresult\fP, const opae::fpga::types::src_location &\fIloc\fP) 
is_ok is a template function that throws an excpetion of its template argument type if the result code is not FPGA_OK. Otherwise it returns true. 
.UNINDENT
.INDENT 7.0
.TP
.B void assert_fpga_ok(fpga_result \fIresult\fP, const opae::fpga::types::src_location &\fIloc\fP) 
.UNINDENT
.sp
Variables
.INDENT 7.0
.TP
.B exception_fn opae_exceptions[12] = {is_ok<opae::fpga::types::invalid_param>, is_ok<opae::fpga::types::busy>, is_ok<opae::fpga::types::exception>, is_ok<opae::fpga::types::not_found>, is_ok<opae::fpga::types::no_memory>, is_ok<opae::fpga::types::not_supported>, is_ok<opae::fpga::types::no_driver>, is_ok<opae::fpga::types::no_daemon>, is_ok<opae::fpga::types::no_access>, is_ok<opae::fpga::types::reconf_error>} 
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Misc
.sp
The \fIversion\fP class wraps the OPAE C version API.
.SS version.h
.INDENT 0.0
.TP
.B namespace opae 
.INDENT 7.0
.TP
.B namespace fpga 
.INDENT 7.0
.TP
.B namespace types 
.INDENT 7.0
.TP
.B class version 
\fI#include <opae/cxx/core/version.h>\fP
.sp
Public Static Functions
.INDENT 7.0
.TP
.B fpga_version as_struct() 
Get the package version information as a struct. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The package version as an \fBfpga_version\fP struct 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B std::string as_string() 
Get the package version information as a string. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The package version as an \fBstd::string\fP object 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B std::string build() 
Get the package build information as a string. 
.sp
.INDENT 7.0
.TP
\fBReturn\fP
The package build as an \fBstd::string\fP object 
.UNINDENT

.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SH OPAE PYTHON API REFERENCE
.sp
The reference documentation for the OPAE Python API and is grouped into the
following sections:
.INDENT 0.0
.IP \(bu 2
\fI\%Module Types, Methods, and Constants\fP
.IP \(bu 2
\fI\%Fundamental Types\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Properties\fP
.IP \(bu 2
\fI\%Token\fP
.IP \(bu 2
\fI\%Handle\fP
.IP \(bu 2
\fI\%Event\fP
.IP \(bu 2
\fI\%Shared Buffer\fP
.IP \(bu 2
\fI\%Error\fP
.IP \(bu 2
\fI\%SysObject\fP
.UNINDENT
.UNINDENT
.SS Module Types, Methods, and Constants
.INDENT 0.0
.TP
.B opae.fpga.allocate_shared_buffer(arg0: opae.fpga._opae.handle, arg1: int) -> opae::fpga::types::shared_buffer
shared_buffer factory method \- allocate a shared buffer object.
Args:
.INDENT 7.0
.INDENT 3.5
handle: An accelerator handle object that identifies an open accelerator
obect to share the buffer with.
len: The length in bytes of the requested buffer.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B opae.fpga.enumerate(*args, **kwargs)
Overloaded function.
.INDENT 7.0
.IP 1. 3
enumerate(arg0: List[opae.fpga._opae.properties]) \-> List[opae::fpga::types::token]
.INDENT 3.0
.INDENT 3.5
Get a list of tokens for the given search criteria.
.sp
Args:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B props(list): A list of properties objects that define the search criteria.
All OPAE properties in each properties object make up one filter.
All properties objects are combined in a union.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP 2. 3
enumerate(
.nf
**
.fi
kwargs) \-> List[opae::fpga::types::token]
.INDENT 3.0
.INDENT 3.5
Get a list of tokens from zero or one filters as defined by kwargs.
If kwargs is empty, then no filter is used.
If kwargs is not empty, then one properties object is created using the kwargs.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B opae.fpga.errors(arg0: opae.fpga._opae.token) -> List[opae.fpga._opae.error]
Get a list of error objects in an FPGA resource.
Each error object represents an error register contained in the resource.
.INDENT 7.0
.TP
.B Args:
tok(token): Token representing an FPGA resource.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B opae.fpga.open(tok: opae.fpga._opae.token, flags: int = 0) -> opae::fpga::types::handle
Create a new handle object from a token.
.UNINDENT
.INDENT 0.0
.TP
.B opae.fpga.register_event(handle: opae.fpga._opae.handle, event_type: opae.fpga._opae.fpga_event_type, flags: int = 0) -> opae::fpga::types::event
Factory method used to create events registered to a particular event type.
.INDENT 7.0
.TP
.B Args:
handle: A handle to an OPAE resource.
type(fpga_event_type): The event type to register for. Valid event types are:
.INDENT 7.0
.INDENT 3.5
EVENT_ERROR, EVENT_INTERRUPT, EVENT_POWER_THERMAL
.UNINDENT
.UNINDENT
.sp
flags: Event registration flags that control registration behavior.
.UNINDENT
.UNINDENT
.SS Fundamental Types
.SS Properties
.INDENT 0.0
.TP
.B class opae.fpga.properties
properties class is a container class for OPAE resource properties.
.INDENT 7.0
.TP
.B __init__(*args, **kwargs)
Overloaded function.
.INDENT 7.0
.IP 1. 3
__init__(self: opae.fpga._opae.properties, 
.nf
**
.fi
kwargs) \-> None
.INDENT 3.0
.INDENT 3.5
Create a new properties object. If kwargs is not included then the
properties object is created with no property values set.
If one of the kwargs keys is an OPAE property name then the kwargs
value is used to initialize the corresponding value in the
properties object.
.sp
Kwargs:
.INDENT 0.0
.INDENT 3.5
parent (token): Token object representing parent resource.
.sp
guid (str): GUID (as a string) of the resource.
.sp
type (fpga_objtype): The object type \- DEVICE or ACCELERATOR.
.sp
segment (uint16_t) : The PCIe segment (or domain) number.
.sp
bus (uint8_t) : The PCIe bus number.
.sp
device (uint8_t) : The PCIe device number.
.sp
function (uint8_t) : The PCIe function number.
.sp
socket_id (uint8_t): The socket ID encoded in the FIM.
.sp
num_slots (uint32_t): Number of slots available in the FPGA.
.sp
num_errors (uint32_t): Number of error registers in the resource.
.sp
bbs_id (uint64_t): The BBS ID encoded in the FIM.
.sp
bbs_version (tuple): The version of the BBS.
.sp
vendor_id (uint16_t): The vendor ID in PCI config space.
.sp
device_id (uint16_t): The device ID in PCI config space.
.sp
model (str): The model of the FPGA.
.sp
local_memory_size (uint64_t): The size (in bytes) of the FPGA local memory.
.sp
num_mmio (uint32_t): The number of mmio spaces.
.sp
num_interrupts (uint32_t): The number of interrupts supported by an accelerator.
.sp
accelerator_state (fpga_accelerator_state): The state of the accelerator \- ASSIGNED or UNASSIGNED.
.sp
object_id (uint64_t): The 64\-bit number unique within a single node or system.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP 2. 3
__init__(self: opae.fpga._opae.properties, arg0: opae::fpga::types::token) \-> None
.INDENT 3.0
.INDENT 3.5
Get properties from a token object.
Args:
.INDENT 0.0
.INDENT 3.5
tok (token): The token to read properties from.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP 3. 3
__init__(self: opae.fpga._opae.properties, arg0: opae::fpga::types::handle) \-> None
.INDENT 3.0
.INDENT 3.5
Get properties from a handle object.
Args:
.INDENT 0.0
.INDENT 3.5
h (handle): The handle to read properties from.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property accelerator_state
Get or set the state of an accelerator.
The accelerator state is of type fpga_accelerator_state.
.UNINDENT
.INDENT 7.0
.TP
.B property bbs_id
Get or set the BBS ID property of a resource.
The resource must be of type DEVICE
.UNINDENT
.INDENT 7.0
.TP
.B property bbs_version
Get or set the BBS version property of a resource.
The resource must be of type DEVICE
.UNINDENT
.INDENT 7.0
.TP
.B property bus
Get or set the PCIe bus property of a resource.
.UNINDENT
.INDENT 7.0
.TP
.B property capabilities
Get or set the capabilities property of a resource.
This is taken directly from the capabilities CSR in the FIM.
.UNINDENT
.INDENT 7.0
.TP
.B property device
Get or set the PCIe device property of a resource.
.UNINDENT
.INDENT 7.0
.TP
.B property function
Get or set the PCIe function property of a resource.
.UNINDENT
.INDENT 7.0
.TP
.B property model
Get or set the model property of a resource.
.UNINDENT
.INDENT 7.0
.TP
.B property num_interrupts
Get or set the number of interrupt vectors supported by a resource.
.UNINDENT
.INDENT 7.0
.TP
.B property num_mmio
Get or set the number of mmio spaces in a resource.
.UNINDENT
.INDENT 7.0
.TP
.B property num_slots
Get or set the number of slots property of a resource.
The resource must be of type DEVICE
.UNINDENT
.INDENT 7.0
.TP
.B property object_id
Get or set the Object ID  property of a resource. The object id is
a 64\-bit identifier that is unique within a single node or system.
I represents a similar concept as the token but can be serialized
for use across processes
.UNINDENT
.INDENT 7.0
.TP
.B property parent
Get or set the token representing a parent object of a resource.
The resource must be of type ACCELERATOR
.UNINDENT
.INDENT 7.0
.TP
.B property socket_id
Get or set the Socket ID  property of a resource. The socket id is
encoded in of the FIM CSRs
.UNINDENT
.INDENT 7.0
.TP
.B property vendor_id
Get or set the vendor ID  property of a resource.
The vendor ID is part of the PCI ID and is assigned by the
PCI SIG consortium.
.UNINDENT
.UNINDENT
.SS Token
.INDENT 0.0
.TP
.B class opae.fpga.token
Token for referencing an OPAE resource.
.sp
A token object serves as a reference so a specific resource in the system.
Holding a token does not constitute ownership of an OPAE resource.
It is used to query information about a resource,
or to acquire ownership by calling fpga.open module method.
.INDENT 7.0
.TP
.B find(self: opae.fpga._opae.token, name: str, flags: int = <fpga_sysobject_flags.SYSOBJECT_GLOB: 2>) -> opae::fpga::types::sysobject
Find a sysobject instance from a valid token object.
Args:
.INDENT 7.0
.INDENT 3.5
flags: Flags that control behavior of finding sub\-objects.
SYSOBJECT_GLOB is used to indicate that wildcard patterns (*) are allowed.
SYSOBJECT_RECURSE_ONE is used to indicate that the find routine should recurse one level.
SYSOBJECT_RECURSE_ALL is used to indicate that the find routine should recurse to all children.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Handle
.INDENT 0.0
.TP
.B class opae.fpga.handle
.INDENT 7.0
.TP
.B __enter__(self: opae.fpga._opae.handle) -> opae.fpga._opae.handle
Context manager protocol enter function.
Simply returns the handle object.
.UNINDENT
.INDENT 7.0
.TP
.B __exit__(self: opae.fpga._opae.handle, *args) -> None
Context manager protocol exit function.
Closes the resource identified by this handle and currently does nothing with the exit arguments.
.UNINDENT
.INDENT 7.0
.TP
.B close(self: opae.fpga._opae.handle) -> opae.fpga._opae.fpga_result
"Close an accelerator associated with handle."
.UNINDENT
.INDENT 7.0
.TP
.B read_csr32(self: opae.fpga._opae.handle, offset: int, csr_space: int = 0) -> int
Read 32 bits from a CSR belonging to a resource associated with a handle.
Args:
.INDENT 7.0
.INDENT 3.5
offset: The register offset.
csr_space: The CSR space to read from. Default is 0.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_csr64(self: opae.fpga._opae.handle, offset: int, csr_space: int = 0) -> int
Read 64 bits from a CSR belonging to a resource associated with a handle.
Args:
.INDENT 7.0
.INDENT 3.5
offset: The register offset.
csr_space: The CSR space to read from. Default is 0.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B reset(self: opae.fpga._opae.handle) -> None
Reset the accelerator associated with this handle.
The accelerator must be opened.
.UNINDENT
.INDENT 7.0
.TP
.B write_csr32(self: opae.fpga._opae.handle, offset: int, value: int, csr_space: int = 0) -> None
Write 32 bits to a CSR belonging to a resource associated with a handle.
Args:
.INDENT 7.0
.INDENT 3.5
offset: The register offset.
value: The 32\-bit value to write to the register.
csr_space: The CSR space to write from. Default is 0.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_csr64(self: opae.fpga._opae.handle, offset: int, value: int, csr_space: int = 0) -> None
Write 64 bits to a CSR belonging to a resource associated with a handle.
Args:
.INDENT 7.0
.INDENT 3.5
offset: The register offset.
value: The 64\-bit value to write to the register.
csr_space: The CSR space to write from. Default is 0.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Event
.INDENT 0.0
.TP
.B class opae.fpga.event
event object are used to register for OPAE events.
Currently, the event types are:
.INDENT 7.0
.INDENT 3.5
EVENT_ERROR
EVENT_INTERRUPT
EVENT_POWER_THERMAL
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B os_object(self: opae.fpga._opae.event) -> int
Get an OS specific object from the event which can be used to subscribe for
events. On Linux, the object corresponds to a file descriptor that can be
used with select/poll/epoll calls.
.UNINDENT
.UNINDENT
.SS Shared Buffer
.INDENT 0.0
.TP
.B class opae.fpga.shared_buffer
shared_buffer represents a system memory buffer that can be shared with the accelerator.
It implements the Python buffer protocol and can be converted to a native bytearray object.
.INDENT 7.0
.TP
.B compare(self: opae.fpga._opae.shared_buffer, arg0: opae.fpga._opae.shared_buffer, arg1: int) -> int
Compare this shared_buffer (the first len bytes)  object with another one.
Returns 0 if the two buffers (up to len) are equal.
.UNINDENT
.INDENT 7.0
.TP
.B fill(self: opae.fpga._opae.shared_buffer, arg0: int) -> None
Fill the buffer with a given value.
.INDENT 7.0
.TP
.B Args:
value: The value to use when filling the buffer.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B io_address(self: opae.fpga._opae.shared_buffer) -> int
Get the address of the buffer suitable for programming into the
accelerator device.
.UNINDENT
.INDENT 7.0
.TP
.B size(self: opae.fpga._opae.shared_buffer) -> int
Get the length of the buffer in bytes.
.UNINDENT
.INDENT 7.0
.TP
.B wsid(self: opae.fpga._opae.shared_buffer) -> int
Get the underlying buffer\(aqs workspace ID.
.UNINDENT
.UNINDENT
.SS Error
.INDENT 0.0
.TP
.B class opae.fpga.error
error object is used to represent an error register in an FPGA resource.
It holds two read\-only properties, \fIname\fP and \fIcan_clear\fP and it can also
be used to read the raw register value from its corresponding error register.
.INDENT 7.0
.TP
.B property can_clear
Indicates if the error register can be cleared \- read\-only property
.UNINDENT
.INDENT 7.0
.TP
.B property name
Error register name \- read\-only property
.UNINDENT
.INDENT 7.0
.TP
.B read_value(self: opae.fpga._opae.error) -> int
Read the raw value from the error register.
.UNINDENT
.UNINDENT
.SS SysObject
.INDENT 0.0
.TP
.B class opae.fpga.sysobject
Wraps the OPAE fpga_object primitive as a Python object.
.INDENT 7.0
.TP
.B __getattr__(self: opae.fpga._opae.sysobject, arg0: str) -> opae.fpga._opae.sysobject
Get a sysobject instance from a valid sysobject.
The parent sysobject must be a container type object.
.UNINDENT
.INDENT 7.0
.TP
.B __getitem__(*args, **kwargs)
Overloaded function.
.INDENT 7.0
.IP 1. 3
__getitem__(self: opae.fpga._opae.sysobject, arg0: str) \-> opae.fpga._opae.sysobject
.INDENT 3.0
.INDENT 3.5
Get a sysobject instance from a valid sysobject.
The parent sysobject must be a container type object.
.UNINDENT
.UNINDENT
.IP 2. 3
__getitem__(self: opae.fpga._opae.sysobject, arg0: int) \-> object
.INDENT 3.0
.INDENT 3.5
Get a byte from the sysobject at a given index.
Raises \fIRuntimeError\fP if the sysobject instance is a container type.
.UNINDENT
.UNINDENT
.IP 3. 3
__getitem__(self: opae.fpga._opae.sysobject, arg0: slice) \-> str
.INDENT 3.0
.INDENT 3.5
Get a slice of bytes from the sysobject at a given offset.
Raises \fIRuntimeError\fP if the sysobject instance is a container type.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B bytes(self: opae.fpga._opae.sysobject) -> str
Get bytes from the sysobject.
Raises \fIRuntimeError\fP if the sysobject instance is a container type.
.UNINDENT
.INDENT 7.0
.TP
.B find(self: opae.fpga._opae.sysobject, name: str, flags: int = 0) -> opae.fpga._opae.sysobject
Find a sysobject instance from a valid sysobject.
The parent sysobject must be a container type object.
.UNINDENT
.INDENT 7.0
.TP
.B read64(self: opae.fpga._opae.sysobject) -> int
.UNINDENT
.INDENT 7.0
.TP
.B size(self: opae.fpga._opae.sysobject) -> int
.UNINDENT
.INDENT 7.0
.TP
.B write64(self: opae.fpga._opae.sysobject, arg0: int, arg1: int) -> None
.UNINDENT
.UNINDENT
.SH PLUGIN DEVELOPER'S GUIDE
.SS Overview
.sp
Beginning with OPAE C library version 1.2.0, OPAE implements a plugin\-centric
model. This guide serves as a reference to define the makeup of an OPAE C API
plugin and to describe a sequence of steps that one may follow when constructing
an OPAE C API plugin.
.SS Plugin Required Functions
.sp
An OPAE C API plugin is a runtime\-loadable shared object library, also known as
a module. On Linux systems, the \fIdl\fP family of APIs from libdl are used to
interact with shared objects. Refer to "man dlopen" and "man dlsym" for examples
of using the libdl API.
.sp
An OPAE C API plugin implements one required function. This function is required
to have C linkage, so that its name is not mangled.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    int opae_plugin_configure(opae_api_adapter_table *table, const char *config);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
During initialization, the OPAE plugin manager component loads each plugin,
searching for its \fBopae_plugin_configure\fP function. If none is found, then
the plugin manager rejects that plugin. When it is found, \fBopae_plugin_configure\fP
is called passing a pointer to a freshly\-created \fBopae_api_adapter_table\fP and
a buffer consisting of configuration data for the plugin.
.sp
The job of the \fBopae_plugin_configure\fP function is to populate the given adapter
table with each of the plugin\(aqs API entry points and to consume and comprehend
the given configuration data in preparation for initialization.
.SS OPAE API Adapter Table
.sp
The adapter table is a data structure that contains function pointer entry points
for each of the OPAE APIs implemented by a plugin. In this way, it adapts the
plugin\-specific behavior to the more general case of a flat C API. Note that
OPAE applications are only required to link with opae\-c. In other words, the
name of the plugin library should not appear on the linker command line. In this
way, plugins are truly decoupled from the OPAE C API, and they are required to
adapt to the strict API specification by populating the adapter table only. No
other linkage is required nor recommended.
.sp
\fBadapter.h\fP contains the definition of the \fBopae_api_adapter_table\fP\&. An abbreviated
version is depicted below, along with supporting type \fBopae_plugin\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    typedef struct _opae_plugin {
        char *path;
        void *dl_handle;
    } opae_plugin;

    typedef struct _opae_api_adapter_table {

        struct _opae_api_adapater_table *next;
        opae_plugin plugin;

        fpga_result (*fpgaOpen)(fpga_token token, fpga_handle *handle,
                                int flags);

        fpga_result (*fpgaClose)(fpga_handle handle);

        ...

        fpga_result (*fpgaEnumerate)(const fpga_properties *filters,
                                     uint32_t num_filters, fpga_token *tokens,
                                     uint32_t max_tokens,
                                     uint32_t *num_matches);

        ...

        // configuration functions
        int (*initialize)(void);
        int (*finalize)(void);

        // first\-level query
        bool (*supports_device)(const char *device_type);
        bool (*supports_host)(const char *hostname);

    } opae_api_adapter_table;
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Some points worth noting are that the adapter tables are organized in memory by
adding them to a linked list data structure. This is the use of the \fBnext\fP
structure member. (The list management is handled by the plugin manager.)
The \fBplugin\fP structure member contains the handle to the shared object instance,
as created by \fBdlopen\fP\&. This handle is used in the plugin\(aqs \fBopae_plugin_configure\fP
to load plugin entry points. A plugin need only implement the portion of the
OPAE C API that a target application needs. Any API entry points that are not
supported should be left as NULL pointers (the default) in the adapter table.
When an OPAE API that has no associated entry point in the adapter table is
called, the result for objects associated with that plugin will be
\fBFPGA_NOT_SUPPORTED\fP\&.
.sp
The following code illustrates a portion of the \fBopae_plugin_configure\fP for
a theoretical OPAE C API plugin libfoo.so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    /* foo_plugin.c */

    int opae_plugin_configure(opae_api_adapter_table *table, const char *config)
    {
        adapter\->fpgaOpen = dlsym(adapter\->plugin.dl_handle, "foo_fpgaOpen");
        adapter\->fpgaClose =
                dlsym(adapter\->plugin.dl_handle, "foo_fpgaClose");

        ...

        adapter\->fpgaEnumerate =
                dlsym(adapter\->plugin.dl_handle, "foo_fpgaEnumerate");

        ...

        return 0;
    }
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Notice that the implementations of the API entry points for plugin libfoo.so
are prefixed with \fBfoo_\fP\&. This is the recommended practice to avoid name
collisions and to enhance the debugability of the application. Upon successful
configuration, \fBopae_plugin_configure\fP returns 0 to indicate success. A
non\-zero return value indicates failure and causes the plugin manager to
reject the plugin from futher consideration.
.SS Plugin Optional Functions
.sp
Once the plugin manager loads and configures each plugin, it uses the adapter
table to call back into the plugin so that it can be made ready for runtime.
This is the job of the \fBopae_plugin_initialize\fP entry point, whose signature
is defined as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    int opae_plugin_initialize(void);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The function takes no parameters, as the configuration data was already given
to the plugin by \fBopae_plugin_configure\fP\&. \fBopae_plugin_initialize\fP returns 0
if no errors were encountered during initialization. A non\-zero return code
indicates that plugin initialization failed. A plugin makes its
\fBopae_plugin_initialize\fP available to the plugin manager by populating the
adapter table\(aqs \fBinitialize\fP entry point as shown:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    /* foo_plugin.c */

    int foo_plugin_initialize(void)
    {
        ...

        return 0; /* success */
    }

    int opae_plugin_configure(opae_api_adapter_table *table, const char *config)
    {
        ... 

        adapter\->initialize =
                dlsym(adapter\->plugin.dl_handle, "foo_plugin_initialize");

        ...

        return 0;
    }
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If a plugin does not implement an \fBopae_plugin_initialize\fP entry point, then
the \fBinitialize\fP member of the adapter table should be left uninitialized.
During plugin initialization, if a plugin has no \fBopae_plugin_initialize\fP
entry in its adapter table, the plugin initialization step will be skipped,
and the plugin will be considered to have initialized successfully.
.sp
Once plugin initialization is complete for all loaded plugins, the system
is considered to be running and fully functional.
.sp
During teardown, the plugin manager uses the adapter table to call into each
plugin\(aqs \fBopae_plugin_finalize\fP entry point, whose signature is defined as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    int opae_plugin_finalize(void);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBopae_plugin_finalize\fP returns 0 if no errors were encountered during teardown.
A non\-zero return code indicates that plugin teardown failed. A plugin makes
its \fBopae_plugin_finalize\fP available to the plugin manager by populating the
adapter table\(aqs \fBfinalize\fP entry point as shown:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    /* foo_plugin.c */

    int foo_plugin_finalize(void)
    {
        ...

        return 0; /* success */
    }

    int opae_plugin_configure(opae_api_adapter_table *table, const char *config)
    {
        ... 

        adapter\->finalize =
                dlsym(adapter\->plugin.dl_handle, "foo_plugin_finalize");

        ...

        return 0;
    }
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If a plugin does not implement an \fBopae_plugin_finalize\fP entry point, then
the \fBfinalize\fP member of the adapter table should be left uninitialized.
During plugin cleanup, if a plugin has no \fBopae_plugin_finalize\fP entry
point in its adapter table, the plugin finalize step will be skipped, and
the plugin will be considered to have finalized successfully.
.sp
In addition to \fBinitialize\fP and \fBfinalize\fP, an OPAE C API plugin has two
further optional entry points that relate to device enumeration. During
enumeration, when a plugin is being considered for a type of device, the
plugin may provide input on that decision by exporting an
\fBopae_plugin_supports_device\fP entry point in the adapter table:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    bool opae_plugin_supports_device(const char *device_type);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBopae_plugin_supports_device\fP returns true if the given device type is
supported and false if it is not. A false return value from
\fBopae_plugin_supports_device\fP causes device enumeration to skip the
plugin.
.sp
Populating the \fBopae_plugin_supports_device\fP is done as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    /* foo_plugin.c */

    bool foo_plugin_supports_device(const char *device_type)
    {
        if (/* device_type is supported */)
            return true;

        ...

        return false;
    }

    int opae_plugin_configure(opae_api_adapter_table *table, const char *config)
    {
        ... 

        adapter\->supports_device =
                dlsym(adapter\->plugin.dl_handle, "foo_plugin_supports_device");

        ...

        return 0;
    }
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fIopae_plugin_supports_device\fP mechanism serves as a placeholder only.
It is not implemented in the current version of the OPAE C API.
.UNINDENT
.UNINDENT
.sp
Similarly to determining whether a plugin supports a type of device, a plugin
may also answer questions about network host support by populating an
\fBopae_plugin_supports_host\fP entry point in the adapter table:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    bool opae_plugin_supports_host(const char *hostname);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBopae_plugin_supports_host\fP returns true if the given hostname is supported
and false if it is not. A false return value from \fBopae_plugin_supports_host\fP
causes device enumeration to skip the plugin.
.sp
Populating the \fBopae_plugin_supports_host\fP is done as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    /* foo_plugin.c */

    bool foo_plugin_supports_host(const char *hostname)
    {
        if (/* hostname is supported */)
            return true;

        ...

        return false;
    }

    int opae_plugin_configure(opae_api_adapter_table *table, const char *config)
    {
        ... 

        adapter\->supports_host =
                dlsym(adapter\->plugin.dl_handle, "foo_plugin_supports_host");

        ...

        return 0;
    }
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fIopae_plugin_supports_host\fP mechanism serves as a placeholder only.
It is not implemented in the current version of the OPAE C API.
.UNINDENT
.UNINDENT
.SS Plugin Construction
.sp
The steps required to implement an OPAE C API plugin, libfoo.so, are:
.INDENT 0.0
.IP \(bu 2
Create foo_plugin.c: implements \fBopae_plugin_configure\fP,
\fBopae_plugin_initialize\fP, \fBopae_plugin_finalize\fP, \fBopae_plugin_supports_device\fP,
and \fBopae_plugin_supports_host\fP as described in the previous sections.
.IP \(bu 2
Create foo_plugin.h: implements function prototypes for each of the
plugin\-specific OPAE C APIs.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    /* foo_plugin.h */

    fpga_result foo_fpgaOpen(fpga_token token, fpga_handle *handle,
                             int flags);

    fpga_result foo_fpgaClose(fpga_handle handle);

    ...

    fpga_result foo_fpgaEnumerate(const fpga_properties *filters,
                                  uint32_t num_filters, fpga_token *tokens,
                                  uint32_t max_tokens,
                                  uint32_t *num_matches);
    ...
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Create foo_types.h: implements plugin\-specific types for opaque data
structures.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    /* foo_types.h */

    struct _foo_token {
        ...
    };

    struct _foo_handle {
        ...
    };

    struct _foo_event_handle {
        ...
    };

    struct _foo_object {
        ...
    };
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Create foo_enum.c: implements \fBfoo_fpgaEnumerate\fP,
\fBfoo_fpgaCloneToken\fP, and \fBfoo_fpgaDestroyToken\fP\&.
.IP \(bu 2
Create foo_open.c: implements \fBfoo_fpgaOpen\fP\&.
.IP \(bu 2
Create foo_close.c: implements \fBfoo_fpgaClose\fP\&.
.IP \(bu 2
Create foo_props.c: implements \fBfoo_fpgaGetProperties\fP,
\fBfoo_fpgaGetPropertiesFromHandle\fP, \fBfoo_fpgaUpdateProperties\fP
.IP \(bu 2
Create foo_mmio.c: implements \fBfoo_fpgaMapMMIO\fP, \fBfoo_fpgaUnmapMMIO\fP
\fBfoo_fpgaWriteMMIO64\fP, \fBfoo_fpgaReadMMIO64\fP, \fBfoo_fpgaWriteMMIO32\fP,
\fBfoo_fpgaReadMMIO32\fP\&.
.IP \(bu 2
Create foo_buff.c: implements \fBfoo_fpgaPrepareBuffer\fP,
\fBfoo_fpgaReleaseBuffer\fP, \fBfoo_fpgaGetIOAddress\fP\&.
.IP \(bu 2
Create foo_error.c: implements \fBfoo_fpgaReadError\fP, \fBfoo_fpgaClearError\fP,
\fBfoo_fpgaClearAllErrors\fP, \fBfoo_fpgaGetErrorInfo\fP\&.
.IP \(bu 2
Create foo_event.c: implements \fBfoo_fpgaCreateEventHandle\fP,
\fBfoo_fpgaDestroyEventHandle\fP, \fBfoo_fpgaGetOSObjectFromEventHandle\fP,
\fBfoo_fpgaRegisterEvent\fP, \fBfoo_fpgaUnregisterEvent\fP\&.
.IP \(bu 2
Create foo_reconf.c: implements \fBfoo_fpgaReconfigureSlot\fP\&.
.IP \(bu 2
Create foo_obj.c: implements \fBfoo_fpgaTokenGetObject\fP,
\fBfoo_fpgaHandleGetObject\fP, \fBfoo_fpgaObjectGetObject\fP,
\fBfoo_fpgaDestroyObject\fP, \fBfoo_fpgaObjectGetSize\fP, \fBfoo_fpgaObjectRead\fP,
\fBfoo_fpgaObjectRead64\fP, \fBfoo_fpgaObjectWrite64\fP\&.
.IP \(bu 2
Create foo_clk.c: implements \fBfoo_fpgaSetUserClock\fP,
\fBfoo_fpgaGetUserClock\fP\&.
.UNINDENT
.SH OPEN PROGRAMMABLE ACCELERATOR ENGINE (OPAE) LINUX DEVICE DRIVER ARCHITECTURE
.sp
The OPAE FPGA Linux Device Driver provides interfaces for user\-space applications to
configure, enumerate, open, and access FPGA accelerators on platforms equipped
with Intel FPGA solutions. The OPAE FPGA driver also enables system\-level management functions such
as FPGA reconfiguration and virtualization.
.SS Hardware Architecture
.sp
The Linux Operating System treats the FPGA hardware as a PCIe* device. A predefined data structure,
Device Feature List (DFL), allows for dynamic feature discovery in an Intel
FPGA solution.
.sp
[image: FPGA PCIe Device]
[image]

.sp
The Linux Device Driver implements PCIe Single Root I/O Virtualization (SR\-IOV) for the creation of
Virtual Functions (VFs). The device driver can release individual accelerators
for assignment to virtual machines (VMs).
.sp
[image: Virtualized FPGA PCIe Device]
[image]

.SS FPGA Management Engine (FME)
.sp
The FPGA Management Engine provides error reporting, reconfiguration, performance reporting, and other
infrastructure functions. Each FPGA has one FME which is always accessed through the Physical
Function (PF). The Intel Xeon® Processor with Integrated FPGA also performs power and thermal management.
These functions are not available on the Intel Programmable Acceleration Card (PAC).
.sp
User\-space applications can acquire exclusive access to the FME using \fBopen()\fP,
and release it using \fBclose()\fP\&. Device access may be managed by standard Linux
interfaces and tools.
.sp
\&.. Note::
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    If an application terminates without freeing the FME or Port resources, Linux closes all
    file descriptors owned by the terminating process, freeing those resources.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Port
.sp
A Port represents the interface between two components:
.INDENT 0.0
.IP \(bu 2
The FPGA Interface Manager (FIM) which is part of the static FPGA fabric
.IP \(bu 2
The Accelerator Function Unit (AFU) which is the partially reconfigurable region
.UNINDENT
.sp
The Port controls the communication from software to the AFU and makes features such as reset and debug available.
.SS Accelerator Function Unit (AFU)
.sp
An AFU attaches to a Port. The AFU provides a 256 KB memory mapped I/O (MMIO) region for accelerator\-specific control registers.
.INDENT 0.0
.IP \(bu 2
Use \fBopen()\fP on the Port device to acquire access to an AFU associated with the Port device.
.IP \(bu 2
Use \fBclose()\fPon the Port device to release the AFU associated with the Port device.
.IP \(bu 2
Use \fBmmap()\fP on the Port device to map accelerator MMIO regions.
.UNINDENT
.SS Partial Reconfiguration (PR)
.sp
Use PR to reconfigure an AFU from a bitstream file. Successful reconfiguration has the following requirement:
.INDENT 0.0
.IP \(bu 2
You must generate the reconfiguration AFU for the exact FIM. The AFU and FIM are compatible if their interface IDs match.
You can verify this match by comparing the interface ID in the bitstream header against the interface ID that is
exported by the driver in sysfs.
.UNINDENT
.sp
In all other cases PR fails and may cause system instability.
.sp
\&.. note::
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    Platforms that support 512\-bit Partial Reconfiguration require
    binutils >= version 2.25.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Close any software programs accessing the FPGA, including those running in a virtualized host before
initiating PR. For virtualized environments, the recommended sequence is as
follows:
.INDENT 0.0
.IP \(bu 2
Unload the driver from the guest
.IP \(bu 2
Release the VF from the guest
.UNINDENT
.sp
\&.. note::
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    NOTE: Releasing the VF from the guest while an application on the guest is
    still accessing its resources may lead to VM instabilities. We recommend
    closing all applications accessing the VF in the guest before releasing the
    VF.
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Disable SR\-IOV
.IP \(bu 2
Perform PR
.IP \(bu 2
Enable SR\-IOV
.IP \(bu 2
Assign the VF to the guest
.IP \(bu 2
Load the driver in the guest
.UNINDENT
.SS FPGA Virtualization
.sp
To enable accelerator access from applications running on a VM, create a VF for
the port using the following process:
.INDENT 0.0
.IP \(bu 2
Release the Port from the PF using the associated ioctl on the FME device.
.IP \(bu 2
Use the following command to enable SR\-IOV and VFs. Each VF can own a single Port with an AFU. In the following command,
N is the number of Port released from the PF.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    echo N > $PCI_DEVICE_PATH/sriov_numvfs
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\&.. note::
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    NOTE: The number, \(aqN\(aq, cannot be greater than the number of supported VFs.
    This can be read from $PCI_DEVICE_PATH/sriov_totalvfs.
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Pass the VFs through to VMs using hypervisor interfaces.
.IP \(bu 2
Access the AFU on a VF from applications running on the VM using the same driver inside the VM.
.UNINDENT
.sp
\&.. Note::
.sp
\(ga\(ga
Creating VFs is only supported for port devices. Consequently, PR and other management functions are only available through
the PF.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
## Driver Organization ##

### PCIe Module Device Driver ###

!## Driver Organization ##

### PCIe Module Device Driver ###

![Driver Organization](Driver_Organization.png "Driver Organization")




FPGA devices appear as a PCIe devices. Once enumeration detects a PCIe PF or VF, the Linux OS loads the FPGA PCIe
device driver. The device driver performs the following functions:

1. Walks through the Device Feature List in PCIe device base address register (BAR) memory to discover features
and their sub\-features and creates necessary platform devices.
2. Enables SR\-IOV.
3. Introduces the feature device infrastructure, which abstracts operations for sub\-features and provides common functions
to feature device drivers.

### PCIe Module Device Driver Functions ###

The PCIe Module Device Driver performs the following functions:

1. PCIe discovery, device enumeration, and feature discovery.
2. Creates sysfs directories for the device, FME, and Port.
3. Creates the platform driver instances, causing the Linux kernel to load their respective drivers.

### FME Platform Module Device Driver ###

The FME Platform Module Device Driver loads automatically after the PCIe driver creates the
FME Platform Module. It provides the following features for FPGA management:

1. Power and thermal management, error reporting, performance reporting, and other infrastructure functions. You can access
these functions via sysfs interfaces the FME driver provides.

2. Partial Reconfiguration. During PR sub\-feature initialization, the FME driver registers the FPGA Manager framework
to support PR. When the FME receives the relevant ioctl request from user\-space, it invokes the common interface
function from the FPGA Manager to reconfigure the AFU using PR.

3. Port management for virtualization (releasing/assigning port device).

After a port device is released, you can use the PCIe driver SR\-IOV interfaces to create/destroy VFs.

For more information, refer to "FPGA Virtualization".

### FME Platform Module Device Driver Functions ###

The FME Platform Module Device Driver performs the the following functions:

* Creates the FME character device node.
* Creates the FME sysfs files and implements the FME sysfs file accessors.
* Implements the FME private feature sub\-drivers.
* FME private feature sub\-drivers:
    * FME Header
    * Partial Reconfiguration
    * Global Error
    * Global Performance

### Port Platform Module Device Driver ###

After the PCIe Module Device Driver creates the Port Platform Module device,
the FPGA Port and AFU driver are loaded.  This module provides an
interface for user\-space applications to access the individual
accelerators, including basic reset control on the Port, AFU MMIO region
export, DMA buffer mapping service, and remote debug functions.

### Port Platform Module Device Driver Functions ###

The Port Platform Module Device Driver performs the the following functions:

* Creates the Port character device node.
* Creates the Port sysfs files and implements the Port sysfs file accessors.
* Implements the following Port private feature sub\-drivers.
    * Port Header
    * AFU
    * Port Error
    * Signal Tap

### OPAE FPGA Driver Interface ###
The user\-space interface consists of a sysfs hierarchy and ioctl requests. Most
kernel attributes can be accessed/modified via sysfs nodes in this hierarchy.
More complex I/O operations are controlled via ioctl requests. The OPAE API
implementation, libopae\-c, has been designed to use this interface to
interact with the OPAE FPGA kernel drivers.


.ft P
.fi
.UNINDENT
.UNINDENT
.SH FPGACONF
.SS SYNOPSIS
.sp
\fBfpgaconf [\-hvVn] [\-\-segment <segment>] [\-B <bus>] [\-D <device>] [\-F <function>] [\-S <socket>] <gbs>\fP
.SS DESCRIPTION
.sp
\fBfpgaconf\fP configures the FPGA with the accelerator function (AF). It also checks the AF for compatibility with
the targeted FPGA and the FPGA Interface Manager (FIM). \fBfpgaconf\fP takes the following arguments:
.sp
\fB\-h, \-\-help\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Prints usage information.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-v, \-\-version\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Prints version information and exits.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-V, \-\-verbose\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Prints more verbose messages while enumerating and configuring. Can be
requested more than once.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-n, \-\-dry\-run\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Performs enumeration. Skips any operations with side\-effects such as the
actual AF configuration. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-segment\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PCIe segment number of the target FPGA.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-B, \-\-bus\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PCIe bus number of the target FPGA.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-D, \-\-device\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PCIe device number of the target FPGA. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-F, \-\-function\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PCIe function number of the target FPGA.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-S, \-\-socket\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Socket number of the target FPGA.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-force\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Reconfigure the AFU even if it is in use.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBfpgaconf\fP enumerates available FPGA devices in the system and selects
compatible FPGAs for configuration. If more than one FPGA is
compatible with the AF, \fBfpgaconf\fP exits and asks you to be
more specific in selecting the target FPGAs by specifying a
socket number or a PCIe BDF.
.SS EXAMPLES
.sp
\fBfpgaconf my_af.gbs\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Program "my_af.gbs" to a compatible FPGA.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBfpgaconf \-V \-s 0 my_af.gbs\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Program "my_af.gbs" to the FPGA in socket 0, if compatible,
while printing out slightly more verbose information.

## Revision History ##
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
| Document Version |  Intel Acceleration Stack Version  | Changes  |
| \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-|
|2018.05.21 | 1.1 Beta. (Supported with Intel Quartus Prime Pro Edition 17.1.1.) | Corrected typos. |
.SH FPGAD
.SS SYNOPSIS
.sp
\fBfpgad \-\-daemon [\-\-version] [\-\-directory=<dir>] [\-\-logfile=<file>] [\-\-pidfile=<file>] [\-\-umask=<mode>] [\-\-socket=<sock>] [\-\-null\-bitstream=<file>]\fP
\fBfpgad [\-\-socket=<sock>] [\-\-null\-bitstream=<file>]\fP
.SS DESCRIPTION
.sp
fpgad monitors the device sensors, checking for sensor values that are out of the prescribed range.
.sp
When any of the sensors is detected to be out of bounds, fpgad will focus on keeping the server from rebooting by masking PCIE AER, and send a message to system administrator. System administrator can take further actions like stop the application and stop the FPGA, but fpgad just focus on monitor the sensors and will not take any cooling actions.
.sp
Note: fpgad must be running (as root) and actively monitoring devices when a sensor anomaly occurs in order to initiate Graceful Shutdown.  If fpgad is not loaded during such a sensor anomaly, the out\-of\-bounds scenario will not be detected, and the resulting effect on the hardware is undefined.
.SS ARGUMENTS
.sp
\fB\-v, \-\-version\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Prints version information and exits.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-d, \-\-daemon\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
When specified, fpgad executes as a system daemon process.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-D, \-\-directory <dir>\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
When running in daemon mode, run from the specified directory.
If omitted when daemonizing, \(gafpgad\(ga uses /tmp.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-l, \-\-logfile <file>\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
When running in daemon mode, send output to file. When not in daemon mode, the output goes to stdout.
If omitted when daemonizaing, fpgad uses /tmp/fpgad.log.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-p, \-\-pidfile <file>\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
When running in daemon mode, write the daemon\(aqs process id to a file.
If omitted when daemonizing, fpgad uses /tmp/fpgad.pid.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-m, \-\-umask <mode>\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
When running in daemon mode, use the mode value as the file mode creation mask passed to umask.
If omitted when daemonizing, fpgad uses 0.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-s, \-\-socket <sock>\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Listen for event API registration requests on the UNIX domain socket on the specified path. 
The default=/tmp/fpga_event_socket. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-n, \-\-null\-bitstream <file>\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Specify the NULL bitstream to program when an AP6 event occurs. This option may be specified multiple
times. The AF, if any, that matches the FPGA\(aqs PR interface ID is programmed when an AP6
event occurs.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS TROUBLESHOOTING
.sp
If you encounter any issues, you can get debug information in two ways:
.INDENT 0.0
.IP \(bu 2
By examining the log file when in daemon mode.
.IP \(bu 2
By running in non\-daemon mode and viewing stdout.
.UNINDENT
.SS EXAMPLES
.sp
\fBfpgad \-\-daemon \-\-null\-bitstream=my_null_bits.gbs\fP
.sp
This command starts fpgad as a system daemon process:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo systemctl start fpgad
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Revision History
.sp
| Document Version |  Intel Acceleration Stack Version  | Changes  |
| \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-|
|2018.05.21 | 1.1 Beta. (Supported with Intel Quartus Prime Pro Edition 17.1.1.) | No changes from previous release. |
|2020.09.02 | 2.0                                                                                                        |
.SH FPGADIAG
.SS SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fpgadiag [\-m | \-\-mode=] <mode> [\-t | \-\-target=] <target> [options]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS DESCRIPTION
.sp
Includes several tests to diagnose, test, and report on the FPGA hardware.
.sp
\fB<mode>\fP chooses which test to run.
\fB<target>\fP specifies the platform that runs the test.
\fB<target>\fP can be either \fBfpga\fP or \fBase\fP where \fBase\fP\&.
\fB<ase>\fP is the abbreviation for Accelerator Simulation Environment.
.sp
The \fB<mode>\fP selects from the  following tests:
.sp
\fBlpbk1\fP
.sp
This test runs a loopback test on the number of cachelines specified with
the \fBBEGIN\fP option. \fBfpgadiag\fP sets up source and  destination buffers in
main memory. The FPGA then performs a \fBmemcpy\fP from a source buffer to the
destination buffer, one cacheline at a time.
.sp
A cacheline is 64 bytes. When \fBBEGIN = END\fP, the test performs one iteration. When
\fBBEGIN = END + x\fP, the test performs \fBx\fP iterations. The first iteration consists
of copying \fBBEGIN\fP cachelines; the second iteration consists of copying
\fBBEGIN+1\fP cache lines. The third iteration consists of copying \fBBEGIN+2\fP
cache lines, and so on.
.sp
The latency is shown as the number of clock cycles.
.sp
When you specify \fBMULTI\-CL\fP, you copy \fBMULTI\-CL\fP cache lines at a time.
The WR\-FENCE chooses on which virtual channel the WrFence occurs.
.sp
If you specify continuous mode with \fB\-\-cont\fP, the program iterates
until the timeout specified in \fBTIMEOUT\fP completes.
.sp
\fBread\fP
.sp
This test performs reads. Use this test to measure read bandwidth.
.sp
\fBwrite\fP
.sp
This test performs writes. Use it to measure write bandwidth.
.sp
\fBtrput\fP
.sp
This test measures both read and write bandwidth by performing 50% read and
50% write tests.
.sp
\fBsw\fP
.sp
This is a send\-and\-respond (ping\-pong) test. One side sends data and
waits for response.
.sp
Each test requires a particular AF. Before running a test,
make sure the required AF is properly configured
on the platform.
.INDENT 0.0
.IP \(bu 2
The lpbk1 test requires the nlb mode 0 AF.
.IP \(bu 2
The trput test requires the nlb mode 3 AF.
.IP \(bu 2
The sw test requires the nlb mode 7 AF. This AF is only available for the integrated FPGA platform.
You cannot run it on the PCIe accelerator card (PAC).
.UNINDENT
.sp
\fBfpgalpbk\fP
.sp
This enable/disable FPGA loopback.
.sp
\fBfpgastats\fP
.sp
This get fpga mac statistics.
.sp
\fBmactest\fP
.sp
This compare mac addresses that read from MAC ROM with mac addresses read from Host side.
.SS OPTIONS
.SS Common options
.sp
\fB\-\-help, \-h\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Print help information and exit.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-target=, \-t\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
This switch specifies fpga (hardware) or ase (simulation). The default=fpga.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-mode=, \-m\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
The test to run. The valid values are \(galpbk1\(ga, \(garead\(ga,
\(gawrite\(ga, \(gatrput\(ga, and \(gasw\(ga.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-config=, \-c\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
A configuration file in the JSON format that specifies options for a test.
If an option is specified both in the configuration file and on the command 
line, the value in the configuration file takes precedence.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-dsm\-timeout\-usec\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Timeout in microseconds for test completion. The test fails if not completed by 
specified timeout. The default=1000000.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-socket\-id=, \-s\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Socket ID encoded in FPGA Interface Manager (FIM). The default=0. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-bus=, \-B\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Bus number of the PCIe device. The default=0. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-device=, \-D\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Device number of the PCIe device. The default=0. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-function=, \-F\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Function number of the PCIe device. The default=0. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-freq=, \-T\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Clock frequency (in Hz) used for bandwidth calculation. The default=400000000 Hz (400 MHz). 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This frequency is used only when the software cannot infer the frequency from the accelerator.
.UNINDENT
.UNINDENT
.sp
\fB\-\-suppress\-hdr, \-S\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Suppress column headers for text output. The default=off.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-csv, \-V\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Comma separated value format. The default=off. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-suppress\-stats\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Suppress statistics output at the end of test. The default=off.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBlpbk1\fP test options
.sp
\fB\-\-guid=, \-g\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
AFU ID to enumerate. The default=D8424DC4\-A4A3\-C413\-F89E\-433683F9040B. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-begin=B, \-b\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1 <= B <= 65535. The default=1, B = number of cache lines. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-end=E, \-e\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1 <= E <= 65535. The default=B, B and E designate number of cache lines. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-multi\-cl=M, \-u\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
M can equal 1, 2, or 4. The default=1. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cont, \-L\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Continuous mode. The default=off. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-timeout\-usec=, \-\-timeout\-msec=, \-\-timeout\-sec=, \-\-timeout\-min=, \-\-timeout\-hour=\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
timeout for \-\-cont mode. The default for all options is 0. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cache\-policy=, \-p\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be wrline\-I, wrline\-M, or wrpush\-I The default=wrline\-M.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cache\-hint=, \-i\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be rdline\-I or rdline\-S. The default=rdline\-I.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-read\-vc=, \-r\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be auto, vl0, vh0, vh1, random. The default=auto. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-write\-vc=, \-w\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be auto, vl0, vh0, vh1, random. The default=auto. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-wrfence\-vc=, \-f\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be auto, vl0, vh0, vh1. The default=auto. 
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBread\fP test options
.sp
\fB\-\-guid=, \-g\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
AFU ID to enumerate. The default=F7DF405C\-BD7A\-CF72\-22F1\-44B0B93ACD18. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-begin=B, \-b\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1 <= B <= 65535. The default=1, B = number of cache lines. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-end=E, \-e\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1 <= E <= 65535. The default=B, B and E designate number of cache lines. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-multi\-cl=M, \-u\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
M can equal 1, 2, or 4. The default=1. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-strided\-access=S, \-a\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1<= S <= 64. The default=1. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cont, \-L\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Continuous mode. The default=off. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-timeout\-usec=, \-\-timeout\-msec=, \-\-timeout\-sec=, \-\-timeout\-min=, \-\-timeout\-hour=\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
timeout for \-\-cont mode. The default for all options is 0.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cache\-hint=, \-i\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be rdline\-I or rdline\-S. The default=rdline\-I. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-warm\-fpga\-cache \-H; \-\-cool\-fpga\-cache \-M\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Try to prime the cache with hits. The default=off. Try to prime the 
cache with misses. The default=off.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cool\-cpu\-cache, \-C\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Try to prime the cpu cache with misses. The default=off. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-read\-vc=, \-r\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be auto, vl0, vh0, vh1, random. The default=auto 
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBwrite\fP test options
.sp
\fB\-\-guid=, \-g\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
AFU ID to enumerate. The default=F7DF405C\-BD7A\-CF72\-22F1\-44B0B93ACD18 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-begin=B, \-b\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1 <= E <= 65535. The default=B, B and E designate number of cache lines. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-multi\-cl=M, \-u\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
M can equal 1, 2, or 4. The default=1.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-strided\-access=S, \-a\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1<= S <= 64. The default=1.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cont, \-L\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Continuous mode. The default=off.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-timeout\-usec=, \-\-timeout\-msec=, \-\-timeout\-sec=, \-\-timeout\-min=, \-\-timeout\-hour=\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
timeout for \-\-cont mode. The default for all options is 0.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cache\-policy=, \-p\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be wrline\-I, wrline\-M, or wrpush\-I The default=wrline\-M 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-warm\-fpga\-cache \-H; \-\-cool\-fpga\-cache \-M\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Try to prime the cache with hits. The default=off. Try to prime the 
cache with misses. The default=off. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cool\-cpu\-cache, \-C\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Try to prime the cpu cache with misses. The default=off. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-write\-vc=, \-w\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be auto, vl0, vh0, vh1, random. The default=auto. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-wrfence\-vc=, \-f\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be auto, vl0, vh0, vh1, random. The default=\(gaWRITE\-VC\(ga.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-alt\-wr\-pattern, \-l\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Alternate Write Pattern. The default=off. 
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBtrput\fP test options
.sp
\fB\-\-guid=, \-g\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
AFU ID to enumerate. The default=F7DF405C\-BD7A\-CF72\-22F1\-44B0B93ACD18.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-begin=B, \-b\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1 <= B <= 65535. The default=1, B = number of cache lines. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-end=E, \-e\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1 <= E <= 65535. The default=B, B and E designate number of cache lines. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-multi\-cl=M, \-u\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
M can equal 1, 2, or 4. The default=1. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-strided\-access=S, \-a\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1<= S <= 64. The default=1 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cont, \-L\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Continuous mode. The default=off. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-timeout\-usec=, \-\-timeout\-msec=, \-\-timeout\-sec=, \-\-timeout\-min=, \-\-timeout\-hour=\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
timeout for \-\-cont mode. The default for all options is 0.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cache\-policy=, \-p\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be wrline\-I, wrline\-M, or wrpush\-I The default=wrline\-M. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cache\-hint=, \-i\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be rdline\-I or rdline\-S. The default=rdline\-I. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-read\-vc=, \-r\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be auto, vl0, vh0, vh1, random. The default=auto. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-write\-vc=, \-w\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be auto, vl0, vh0, vh1, random. The default=auto. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-wrfence\-vc=, \-f\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be  auto, vl0, vh0, vh1. The default=\(gaWRITE\-VC\(ga.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBsw\fP test options
.sp
\fB\-\-guid=, \-g\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
AFU ID to enumerate. The default=7BAF4DEA\-A57C\-E91E\-168A\-455D9BDA88A3. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-begin=B, \-b\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1 <= B <= 65535. The default=1, B = number of cache lines. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-end=E, \-e\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1 <= E <= 65535. The default=B, B and E designate number of cache lines. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cache\-policy=, \-p\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be wrline\-I, wrline\-M, or wrpush\-I. The default=wrline\-M. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-cache\-hint= \-i\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be rdline\-I or rdline\-S. The default=rdline\-I. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-read\-vc=, \-r\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be auto, vl0, vh0, vh1, random The default=auto. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-write\-vc=, \-w\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be auto, vl0, vh0, vh1, random The default=auto.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-wrfence\-vc=, \-f\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be auto, vl0, vh0, vh1. The default=\(gaWRITE\-VC\(ga.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-notice=, \-N\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be poll or csr\-write. The default=poll. 
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBEnable FPGA N3000 Ethernet group VFIO mdev\fP
.sp
FPGA DFL driver does not support any ioctls to read/write ethernet group info and registers.
Users can read/write eth group registers by enabling VFIO mdev. Unbind the dfl_eth_group driver and bind vfio\-mdev\-dfl
driver for ethernet group dfl\-device; then userspace can take full control of ethernet group feature id 10.
.sp
Ethernet group must be enabled before running fpgalpbk, mactest tools.
.SS \fBSteps to enable/create vfio mdev\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
unbind eth group feature id 10:
    echo dfl\-fme.0.8 > /sys/bus/dfl/drivers/dfl\-eth\-group/unbind
    echo dfl\-fme.0.7 > /sys/bus/dfl/drivers/dfl\-eth\-group/unbind
bind to vfio\-mdev\-dfl:
    echo vfio\-mdev\-dfl > /sys/bus/dfl/devices/dfl\-fme.0.7/driver_override
    echo vfio\-mdev\-dfl > /sys/bus/dfl/devices/dfl\-fme.0.8/driver_override
load vfio driver:
    modprobe vfio_pci
    modprobe vfio_iommu_type1
    modprobe vfio_mdev
    modprobe vfio_mdev_dfl
trigger mdev:
    echo dfl\-fme.0.7 >/sys/bus/dfl/drivers_probe
    echo dfl\-fme.0.8 >/sys/bus/dfl/drivers_probe
    echo 83b8f4f2\-509f\-382f\-3c1e\-e6bfe0fa1001 > /sys/bus/dfl/devices/dfl\-fme.0.7/mdev_supported_types/vfio\-mdev\-dfl\-1/create
    echo 83b8f4f2\-509f\-382f\-3c1e\-e6bfe0fa1002 > /sys/bus/dfl/devices/dfl\-fme.0.8/mdev_supported_types/vfio\-mdev\-dfl\-1/create

linux kerenl msg after enabling mdev:
    i40e 0000:b3:00.0 eth1: NIC Link is Down
    i40e 0000:b1:00.1 eth0: NIC Link is Down
    vfio\-mdev\-dfl dfl\-fme.2.7: MDEV: Registered
    vfio\-mdev\-dfl dfl\-fme.2.8: MDEV: Registered
    vfio_mdev 83b8f4f2\-509f\-382f\-3c1e\-e6bfe0fa1005: Adding to iommu group 140
    vfio_mdev 83b8f4f2\-509f\-382f\-3c1e\-e6bfe0fa1005: MDEV: group_id = 140
    vfio_mdev 83b8f4f2\-509f\-382f\-3c1e\-e6bfe0fa1006: Adding to iommu group 141
    vfio_mdev 83b8f4f2\-509f\-382f\-3c1e\-e6bfe0fa1006: MDEV: group_id = 141
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBRemove vfio mdev\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    echo 1 | sudo tee /sys/bus/mdev/devices/83b8f4f2\-509f\-382f\-3c1e\-e6bfe0fa1002/remove
    echo 1 | sudo tee /sys/bus/mdev/devices/83b8f4f2\-509f\-382f\-3c1e\-e6bfe0fa1001/remove

    rmmod vfio_mdev_dfl
    modprobe dfl_eth_group

    echo dfl\-fme.0.7 >/sys/bus/dfl/drivers_probe
    echo dfl\-fme.0.8 >/sys/bus/dfl/drivers_probe

    echo dfl\-eth\-group > /sys/bus/dfl/devices/dfl\-fme.0.7/driver_override
    echo dfl\-eth\-group > /sys/bus/dfl/devices/dfl\-fme.0.8/driver_override
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBfpgalpbk\fP test options
.sp
\fB\-\-enable\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Enable fpga phy loopback.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-disable\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Disable fpga phy loopback.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-direction\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be local, remote.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-type\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be serial, precdr, postcdr.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-side\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Can be line, host.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-port\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
0 <= port <= 7, the default is all.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBmactest\fP test options
.sp
\fB\-\-offset\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Read mac addresses from an offset, The default=0.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS EXAMPLES
.sp
This command starts a \fBlpbk1\fP test for the FPGA on bus \fB0x5e\fP\&. The test
copies 57535, 57536, 57537 ... up to 65535 cache lines, one line at a time.
The test prints output in the comma separated values (CSV) format with the
header suppressed.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./fpgadiag \-\-mode=lpbk1 \-\-target=fpga \-V \-\-bus=0x5e \-\-begin=57535
\-\-end=65535 \-\-cache\-hint=rdline\-I \-\-cache\-policy=wrpush\-I \-\-multi\-cl=1
\-\-write\-vc=vl0 \-\-read\-vc=vh1 \-\-wrfence\-vc=auto
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This command starts a \fBread\fP test on the FPGA located on bus \fB0xbe\fP\&. The test
reads 2045 cache lines in the continuous mode with a 15\-second timeout period.
The reads use a strided pattern with a 10\-byte stride length.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./fpgadiag \-\-mode=read \-\-target=fpga \-V \-\-bus=0xbe \-\-begin=2045 \-\-cont
\-\-timeout\-sec=15 \-\-cache\-hint=rdline\-I \-\-multi\-cl=1 \-a=10 
\-\-read\-vc=auto \-\-wrfence\-vc=auto
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This command starts a \fBsw\fP test on the FPGA located on bus \fB0xbe\fP\&. The test
signals completion using a CSR write.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./fpgadiag \-\-mode=sw \-\-target=fpga \-V \-\-bus=0xbe \-\-begin=4 \-\-end=8192
\-\-cache\-hint=rdline\-I \-\-cache\-policy=wrline\-I \-\-notice=csr\-write \-\-write\-vc=vl0
\-\-wrfence\-vc=auto \-\-read\-vc=random 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This command enable a \fBfpgalpbk\fP on the FPGA located on bus \fB0xbe\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./fpgadiag \-m fpgalpbk \-\-bus 0xbe \-\-enable \-\-direction local \-\-type postcdr
\-\-side host
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This command show \fBfpgastats\fP on the FPGA located on bus \fB0xbe\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./fpgadiag \-m fpgastats \-\-bus 0xbe
.ft P
.fi
.UNINDENT
.UNINDENT
.SS TROUBLESHOOTING
.sp
When a test fails to run or gives errors, check the following:
.INDENT 0.0
.IP \(bu 2
Is the Intel FPGA driver properly installed?
See \fI\%Installation Guide\fP
for driver installation instructions.
.IP \(bu 2
Are FPGA port permissions set properly? Check the permission bits of the
port, for example, \fB/dev/intel\-fpga\-port\-0\fP\&. You need READ and WRITE
permissions to run \fBfpgadiag\fP tests.
.IP \(bu 2
Is hugepage properly configured on the system?
See \fI\%Installation Guide\fP
for hugepage configuration steps. In particular, \fBfpgadiag\fP requires a few 1 GB
pages.
.IP \(bu 2
Is the required AFU loaded? See \fI\%DESCRIPTION\fP for
information about what AFU the test requires.
.IP \(bu 2
Are \fB\-\-begin\fP and \fB\-\-end\fP values set properly? \fB\-\-end\fP must be larger
than the \fB\-\-begin\fP\&. Also, \fB\-\-begin\fP must be a multiple of the
\fB\-\-multi\-cl\fP value.
.IP \(bu 2
The \fB\-\-warm\-fpga\-cache\fP and \fB\-\-cool\-fpga\-cache\fP options in the \fBread\fP
and \fBwrite\fP tests are mutually exclusive.
.IP \(bu 2
The timeout options are only meaningful for the continuous mode
(with the \fB\-\-cont\fP option).
.UNINDENT
.SS Revision History
.sp
| Date | Intel Acceleration Stack Version | Changes Made |
|:\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
|2018.05.21| DCP 1.1 Beta (works with Quartus Prime Pro 17.1.1) | fpgadiag now reports the correct values for bandwidth. |
.SH FPGAINFO
.SS SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
   fpgainfo [\-h] [\-B <bus>] [\-D <device>] [\-F <function>] [\-\-segment <Segment>] {errors,power,temp,fme,port,bmc,mac,phy,security}

.ft P
.fi
.UNINDENT
.UNINDENT
.SS DESCRIPTION
.sp
fpgainfo displays FPGA information derived from sysfs files. The command argument is one of the following:
\fBerrors\fP, \fBpower\fP, \fBtemp\fP, \fBport\fP, \fBfme\fP, \fBbmc\fP, \fBphy\fP or \fBmac\fP,\fBsecurity\fP\&.
Some commands may also have other arguments or options that control their behavior.
.sp
For systems with multiple FPGA devices, you can specify the BDF to limit the output to the FPGA resource
with the corresponding PCIe configuration. If not specified, information displays for all resources for
the given command.
.SS FPGAINFO COMMANDS
.sp
\fBerrors\fP
.sp
Show/clear errors of an FPGA resource that the first argument specifies.
\fBfpgainfo\fP displays information in human readable form.
.sp
\fBpower\fP
.sp
Show total the power in watts that the FPGA hardware consumes.
.sp
\fBtemp\fP
.sp
Show FPGA temperature values in degrees Celcius.
.sp
\fBport\fP
.sp
Show information about the port such as the AFU ID of currently loaded AFU.
.sp
\fBfme\fP
.sp
Show information about the FPGA platform including the partial reconfiguration (PR) Interface ID, the OPAE version,
and the FPGA Interface Manager (FIM) ID.
.sp
\fBbmc\fP
.sp
Show all Board Management Controller sensor values for the FPGA resource, if available.
.sp
\fBphy\fP
.sp
Show information about the PHY integrated in the FPGA, if available.
.sp
\fBmac\fP
.sp
Show information about the MAC address in ROM attached to the FPGA, if available.
.sp
\fBsecurity\fP
.sp
Show information about the security keys, hashs and flash count, if available.
.SS OPTIONAL ARGUMENTS
.sp
\fB\-\-help, \-h\fP
.sp
Prints help information and exit.
.sp
\fB\-\-version, \-v\fP
.sp
Prints version information and exit.
.SS COMMON ARGUMENTS
.sp
The following arguments are common to all commands and are optional.
.sp
\fB\-B, \-\-bus\fP
.sp
PCIe bus number of resource.
.sp
\fB\-D, \-\-device\fP
.sp
PCIe device number of resource.
.sp
\fB\-F, \-\-function\fP
.sp
PCIe function number of resource.
.sp
\fB\-\-segment\fP
.sp
PCIe segment number of resource.
.SS ERRORS ARGUMENTS
.sp
The first argument to the \fBerrors\fP command specifies the resource type. It must be one of the following:
\fBfme\fP,\fBport\fP,\fBall\fP
.sp
\fBfme\fP
.sp
Show/clear FME errors.
.sp
\fBport\fP
.sp
Show/clear PORT errors.
.sp
\fBall\fP
.sp
Show/clear errors for all resources.
.sp
The optional \fB<command\-args>\fP arguments are:
.sp
\fB\-\-clear, \-c\fP
.sp
Clear errors for the given FPGA resource.
.SS PHY ARGUMENTS
.sp
The optional \fB<command\-args>\fP argument is:
.sp
\fB\-\-group, \-G\fP
.sp
Select which PHY group(s) information to show.
.SS EXAMPLES
.sp
This command shows the current power telemetry:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./fpgainfo power
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This command shows the current temperature readings:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./fpgainfo temp
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This command shows FME resource errors:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./fpgainfo errors fme
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This command clears all errors on all resources:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./fpgainfo errors all \-c
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This command shows information of the FME on bus 0x5e
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./fpgainfo fme \-B 0x5e
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This command shows information of the FPGA security on bus 0x5e
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./fpgainfo security \-B 0x5e
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Revision History
.sp
| Document Version |  Intel Acceleration Stack Version  | Changes  |
| \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-|
| 2018.05.21 | 1.1 Beta. (Supported with Intel Quartus Prime Pro Edition 17.1.) | Updated description of the \fBfme\fP command |
.SH FPGAPORT
.SS SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fpgaport [\-h] [\-N NUMVFS] [\-X] [\-\-debug] {assign,release} device [port]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS DESCRIPTION
.sp
The \fBfpgaport\fP enables and disables virtualization. It assigns
and releases control of the port to the virtual function (VF). By default, the driver
assigns the port to the physical function (PF) in the non\-virtualization use case.
.SS POSITIONAL ARGUMENTS
.sp
\fB{assign, release}\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Action to perform.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBdevice\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
The FPGA device being targeted with this action.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBport\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
The number of the port.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS OPTIONAL ARGUMENTS
.sp
\fB\-N NUMVFS, \-\-numvfs NUMVFS\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Create NUMVFS virtual functions. The typical value is 1.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-X, \-\-destroy\-vfs\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Destroy all virtual functions prior to assigning.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-\-debug\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Display additional log information.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB\-h, \-\-help\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Print usage information.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS EXAMPLE
.sp
\fBfpgaport release /dev/dfl\-fme.0 0\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Release port 0 from physical function control.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBfpgaport assign /dev/dfl\-fme.0 0\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Assign port 0 to physical function control.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Revision History
.sp
| Document Version |  Intel Acceleration Stack Version  | Changes  |
| \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-|
| 2018.05.21 | 1.1 Beta. (Supported with Intel Quartus Prime Pro Edition 17.1.) | No changes from previous release.  |
.SH FPGASUPDATE
.SS SYNOPSIS
.sp
\fBfpgasupdate [\-\-log\-level=<level>] file [bdf]\fP
.SS DESCRIPTION
.sp
The \fBfpgasupdate\fP command implements a secure firmware update for the following programmable accelerator cards (PACs):
.INDENT 0.0
.IP \(bu 2
Intel® PAC with Intel Arria® 10 GX FPGA
.IP \(bu 2
Intel FPGA PAC D5005
.IP \(bu 2
Intel PAC N3000
.UNINDENT
.sp
\fB\-\-log\-level <level>\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Specifies the \(galog\-level\(ga which is the level of information output to your command tool.
The following seven levels  are available: \(gastate\(ga, \(gaioctl\(ga, \(gadebug\(ga, \(gainfo\(ga, \(gawarning\(ga,
\(gaerror\(ga, \(gacritical\(ga. Setting \(ga\-\-log\-level=state\(ga provides the most verbose output.
Setting \(ga\-\-log\-level=ioctl\(ga provides the second most information, and so on. The default
level is \(gainfo\(ga. 
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBfile\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Specifies the secure update firmware file to be programmed. This file may be to program a
static region (SR), programmable region (PR), root entry hash, key cancellation, or other
device\-specific firmware.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBbdf\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
The PCIe&reg; address of the PAC to program. \(gabdf\(ga is of the form \(ga[ssss:]bb:dd:f\(ga,
corresponding to PCIe segment, bus, device, function. The segment is optional. If
you do not specify a segment, the segment defaults to \(ga0000\(ga. If the system has only
one PAC you can omit the \(gabdf\(ga and let \(gafpgasupdate\(ga  determine the address
automatically.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS TROUBLESHOOTING
.sp
To gather more debug output, decrease the \fB\-\-log\-level\fP parameter.
.SS EXAMPLES
.sp
\fBfpgasupdate firmware.bin\fP
\fBfpgasupdate firmware.bin 05:00.0\fP
\fBfpgasupdate firmware.bin 0001:04:02.0 \-\-log\-level=ioctl\fP
.SS Revision History
.sp
| Document Version |  Intel Acceleration Stack Version  | Changes  |
| \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-|
|2019.07.26 | 1.2.1 Beta | Initial release. |
|2019.10.04 | 2.0.1 Beta  (Supported with Intel Quartus Prime Pro Edition 19.2.) | Editorial changes only. |
.SH MMLINK
.SS Synopsis
.sp
\fBmmlink [\-v] [\-B <bus>] [\-D <device>] [\-F <function>] [\-S <socket>] [\-P <TCP port>] [\-I <IP Address>]\fP
.SS Description
.sp
The Remote Signal Tap logic analyzer provides real\-time hardware debugging for the Accelerator Function Unit (AFU).
It provides a signal trace capability that the Quartus Prime software adds to the AFU. The Remote Signal Tap logic
analyzer provides access to the Remote Signal Tap part of the Port MMIO space and then runs the remote protocol.
.SS Examples
.sp
\fB\&./mmlink  \-B 0x5e \-P 3333\fP
.sp
MMLink app starts and listens for connection.
.SS Options
.sp
\fB\-v,\-\-version\fP
.sp
Prints version information and exits.
.sp
\fB\-B,\-\-bus\fP
.sp
FPGA Bus number.
.sp
\fB\-D,\-\-device\fP
.sp
FPGA Device number.
.sp
\fB\-F,\-\-function\fP
.sp
FPGA function number.
.sp
\fB\-S,\-\-socket\fP
.sp
FPGA socket number.
.sp
\fB\-P,\-\-port\fP
.sp
TCP port number.
.sp
\fB\-I,\-\-ip \fP
.sp
IP address of FPGA system.
.SS Notes
.sp
Driver privilege:
.sp
Change AFU driver privilege to user:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ chmod 777 /dev/intel\-fpga\-port.0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Change locked memory size:
.sp
edit the file /etc/security/limits.conf
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo vi /etc/security/limits.conf

user    hard   memlock           10000

user    soft   memlock           10000
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Exit terminal and log into a new terminal.
.sp
Verify that the locked memory is now set:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ulimit \-l 10000

## Revision History ##

 | Document Version |  Intel Acceleration Stack Version  | Changes  |
 | \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-|
 | 2018.05.21 | 1.1 Beta. <br>(Supported with Intel Quartus Prime Pro Edition 17.1.) | No changes from previous release.  | 


.ft P
.fi
.UNINDENT
.UNINDENT
.SH PACKAGER
.SS SYNOPSIS
.sp
\fBpackager <cmd> [arguments]\fP
.SS Description
.sp
The packager provides tools that Accelerator Functional Unit (AFU) developers use to create Accelerator Function (AF)
files. The AF file is the programming file for an AFU on Intel® FPGA platforms. The packager tool concatenates
the metadata from the JSON file to a raw binary file \fB(.rbf)\fP that the Intel Quartus® Prime software generates.
.sp
The packager\(aqs only function is to create an AF file. Refer to \fI\%Packager Command Syntax\fP for more information
about invoking the packager. The packager depends on a JSON file to describe AFU metadata. Refer to
\fI\%Accelerator Description File\fP for more information about the JSON file.
.sp
\fBThe packager requires Python 2.7.1 and Python 2.7.3. The tool indicates if it is being called with a compatible
of Python.\fP
.SS Packager Command Syntax
.sp
The packager is a command line tool with the following syntax:
.sp
\fB$ packager <cmd> [arguments]\fP
.sp
The following table describes the \fB<CMD>\fP arguments:
.sp
| Command | Arguments       | Description |
|\-\-\-\-\-\-\-\-\-| \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-| \-\-\-\-\-\-\-\-\-\-\-\-|
| \fBcreate\-gbs\fP  | \fB\-\-rbf=<RBF_PATH>\fP \fB\-\-afu=<AFU_JSON_PATH>\fP \fB\-\-gbs=<GBS_PATH>\fP \fB\-\-set\-value=<key>.<value>\fP| Creates the AF file. The engineering name for this file is the green bit stream, abbreviated gbs. The \fB\-\-rbf\fP and \fB\-\-afu\fP   arguments are required.  \fB<RBF_PATH>\fP is the path to the RBF file for the AFU. The Quartus® Prime software generates this RBF by compiling the AFU design. \fB<AFU_JSON_PATH>\fP is the path to the Accelerator Description file. This is a JSON file that describes the metadata that \fBcreate\-gbs\fP appends to the RBF. \fB<GBS_PATH>\fP is the path to the RBF file for the FPGA Interface Manager (FIM) that contains the FPGA interface unit and other interfaces. If you do not specify the \fB\-\-gbs\fP, the command defaults to \fB<rbf_name>.gbs\fP\&. You can use the optional \fB\-\-set\-value=<key>.<value>\fP argument to set values for JSON metadata. To set more than one JSON value, list a series of \fB<key>.<value>\fP  pairs.|
|\fBmodify\-gbs\fP | \fB\-\-gbs=<gbs_PATH>\fP| Modifies the AF file. The \fB\-\-input\-gbs\fPargument is required. If you do not provide the \fB\-\-output\-gbs\fP argument, \fBmodify\-gbs\fP overwrites the \fB\-\-input\-gbs\fP file. Use the \fB\-\-set\-value=<key>.<value>\fP argument to set values for JSON metadata. To set more than one JSON value, list a series of \fB<key>.<value>\fP  pairs.|
|\fBgbs\-info\fP | \fB\-\-input\-gbs=<gbs_PATH>\fP| Prints information about the AF file. The \fB\-\-input\-gbs\fP argument is required.|
|\fBget\-rbf\fP | \fB\-\-gbs=<GBS_PATH>\fP \fB\-\-rbf=<RBF_PATH>\fP| Creates the RBF by extracting it from the AF file. The \fB\-\-gbs\fPargument is required. If you do not specify the \fB\-\-rbf\fP argument, the command defaults to \fB<gbs_name.rbf\fP . |
| None, or any \fB<CMD>\fP  | \fB\-\-help\fP | Summarizes the \fB<CMD>\fP options. Typing \fBpackager \-\-help\fP gives a list of \fB<CMD>\fP values. Typing \fBpackager <CMD> \-\-help\fP provides detailed help for \fB<CMD>\fP |
.SS Examples
.sp
To generate an AF file, run:
.sp
\fB$ packager create\-gbs \-\-rbf=<RBF_PATH> \-\-afu=<AFU_JSON_PATH> \-\-gbs=<GBS_PATH>\fP
.sp
\fBTIP\fP: JSON files are very particular about syntax such as trailing commas. If you are getting errors, use \fBjsonlint.com\fP to
validate that your JSON is formatted correctly.
.sp
To modify metadata in an existing AF, run the following command:
.sp
\fB$ packager modify\-gbs \-\-input\-gbs=<PATH_TO_GBS_TO_BE_MODIFIED> \-\-outputgbs=<NAME_FOR_NEW_GBS> \-\-set\-value <key>:<value>\fP
.sp
You can pass in a number of : pairs with \-\-set\-value to update values in an AF.
.sp
To print the metadata of an existing AF:
.sp
\fB$ packager get\-info \-\-gbs=<GBS_PATH>\fP
.sp
To extract the RBF from the AF:
.sp
\fB$ packager get\-rbf \-\-gbs=<GBS_PATH> \-\-rbf=<NAME_FOR_RBF>\fP
.SS Accelerator Description File
.sp
The Accelerator Description File is a JSON file that describes the metadata associated with an AFU.
The Open Progammable Accelerator Engine (OPAE) uses this metadata during reconfiguration. Here is an example file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
   "version": 1,
   "platform\-name": "DCP",
   "afu\-image": {
      "magic\-no": 488605312,
      "interface\-uuid": "01234567\-89AB\-CDEF\-0123\-456789ABCDEF",
      "power": 0,
      "accelerator\-clusters": [{
         "name": "dma_test_afu",
         "total\-contexts": 1,   
         "accelerator\-type\-uuid": "331DB30C\-9885\-41EA\-9081\-F88B8F655CAA"
      }
      ]  
   }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The packager stores these parameter values in the resultant AF. After reprogramming the AFU using partial reconfiguration (PR), the
software driver reconfigures the PLLs by writing the clock\-frequency\-high and clock\-frequency\-low values (if present) over the
PCIe® and CCI interfaces.
.sp
\&.. note::
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
The JSON file format may change as the architecture evolves. Any changes to the current format trigger an update
to the version number.  
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CATEGORY | NAME | TYPE | DESCRIPTION | MANDATORY
\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-|\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-:|
Per\-AFU  | version | Integer | Version of the metadata format. | Yes
Per\-AFU  | magic\-no (to be deprecated)| Integer | Magic no. Associated with the FPGA Interface Manager. | No
Per\-AFU  | platform\-name | String | Name of the platform for which the metadata is intended. The field value is “DCP” for Intel  Acceleration Stack for FPGAs. | No
Per\-AFU  | interface\-uuid | UUID | Interface id associated with the FPGA Interface Manager. | Yes
Per\-AFU  | power | Integer | Accelerator Function power consumption, in watts. Set to 0 for Intel Acceleration Stack for FPGAs platforms. | Yes
Per\-AFU  | clock\-frequency\-low | Float | Clock frequency for 1st PLL (Clock network)1 in MHz. | No
Per\-AFU  | clock\-frequency\-high | Float | Clock frequency for 2nd PLL (0 if absent) in MHz. | No
Per\-AFC Cluster | total\-contexts | Integer | Number of AFCs in this cluster. Always be 1 in current architectures. | Yes
Per\-AFC Cluster | afc\-type\-uuid |  UUID | AFC type = AFU ID in current architectures. | Yes
Per\-AFC Cluster | name | string | AFC name = AFU name in current architectures. | Yes
.sp
| Date | Intel Acceleration Stack Version | Changes Made |
|:\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
|2018.05.21| DCP 1.1 Beta (works with Quartus Prime Pro 17.1.1) |  Fixed typos. |
.SH USERCLK
.SS SYNOPSIS
.sp
\fBuserclk [\-v] [\-B <bus>] [\-D <device>] [\-F <function>] [\-S <socket>] [\-P <Port id>] [\-H <User clock high frequency>] \-L <User clock low frequency>]\fP
.SS DESCRIPTION
.sp
userclk sets the frequency range for an AFU.
.SS EXAMPLES
.sp
\fB\&./userclk  \-B 0x5e \-H 400 \-L 200\fP
.sp
Sets AFU frequency.
.SS OPTIONS
.sp
\fB\-v,\-\-version\fP
.sp
Prints version information and exits.
.sp
\fB\-B,\-\-bus\fP
.sp
FPGA Bus number.
.sp
\fB\-D,\-\-device\fP
.sp
FPGA Device number.
.sp
\fB\-F,\-\-function\fP
.sp
FPGA function number.
.sp
\fB\-S,\-\-socket\fP
.sp
FPGA socket number.
.sp
\fB\-P,\-\-port\fP
.sp
Port ID.
.sp
\fB\-H,\-\-freq\-high \fP
.sp
User clock high frequency.
.sp
\fB\-L,\-\-freq\-low \fP
.sp
User clock low frequency.
.sp
| Date | Intel Acceleration Stack Version | Changes Made |
|:\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
|2018.05.21| DCP 1.1 Beta (works with Quartus Prime Pro 17.1.1) |  Fixed typos. |
.SH AUTHOR
Intel DCG FPT SW
.SH COPYRIGHT
2017 Intel Corporation
.\" Generated by docutils manpage writer.
.
